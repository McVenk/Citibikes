<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20192.19.0515.1630                               -->
<workbook original-version='18.1' source-build='2019.2.0 (20192.19.0515.1630)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AutoCreateAndUpdateDSDPhoneLayouts ignorable='true' predowngraded='true' />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <SheetIdentifierTracking ignorable='true' predowngraded='true' />
    <WindowsPersistSimpleIdentifiers />
    <ZoneBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='data' inline='true' name='federated.1klxzo30gxr1s9179gc7d0gb3tuz' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='data' name='textscan.1ob2set0o7rdop16v7svn0eayeeo'>
            <connection class='textscan' directory='C:/Users/13477/Desktop/Bootcamp/Homework- Tableau/Raw_Data/Output' filename='data.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.1ob2set0o7rdop16v7svn0eayeeo' name='data.csv' table='[data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='tripduration' ordinal='0' />
            <column datatype='datetime' name='starttime' ordinal='1' />
            <column datatype='datetime' name='stoptime' ordinal='2' />
            <column datatype='integer' name='start station id' ordinal='3' />
            <column datatype='string' name='start station name' ordinal='4' />
            <column datatype='real' name='start station latitude' ordinal='5' />
            <column datatype='real' name='start station longitude' ordinal='6' />
            <column datatype='integer' name='end station id' ordinal='7' />
            <column datatype='string' name='end station name' ordinal='8' />
            <column datatype='real' name='end station latitude' ordinal='9' />
            <column datatype='real' name='end station longitude' ordinal='10' />
            <column datatype='integer' name='bikeid' ordinal='11' />
            <column datatype='string' name='usertype' ordinal='12' />
            <column datatype='real' name='birth year' ordinal='13' />
            <column datatype='integer' name='gender' ordinal='14' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[data.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tripduration</remote-name>
            <remote-type>20</remote-type>
            <local-name>[tripduration]</local-name>
            <parent-name>[data.csv]</parent-name>
            <remote-alias>tripduration</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>starttime</remote-name>
            <remote-type>135</remote-type>
            <local-name>[starttime]</local-name>
            <parent-name>[data.csv]</parent-name>
            <remote-alias>starttime</remote-alias>
            <ordinal>1</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>stoptime</remote-name>
            <remote-type>135</remote-type>
            <local-name>[stoptime]</local-name>
            <parent-name>[data.csv]</parent-name>
            <remote-alias>stoptime</remote-alias>
            <ordinal>2</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>start station id</remote-name>
            <remote-type>20</remote-type>
            <local-name>[start station id]</local-name>
            <parent-name>[data.csv]</parent-name>
            <remote-alias>start station id</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>start station name</remote-name>
            <remote-type>129</remote-type>
            <local-name>[start station name]</local-name>
            <parent-name>[data.csv]</parent-name>
            <remote-alias>start station name</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>start station latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[start station latitude]</local-name>
            <parent-name>[data.csv]</parent-name>
            <remote-alias>start station latitude</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>start station longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[start station longitude]</local-name>
            <parent-name>[data.csv]</parent-name>
            <remote-alias>start station longitude</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>end station id</remote-name>
            <remote-type>20</remote-type>
            <local-name>[end station id]</local-name>
            <parent-name>[data.csv]</parent-name>
            <remote-alias>end station id</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>end station name</remote-name>
            <remote-type>129</remote-type>
            <local-name>[end station name]</local-name>
            <parent-name>[data.csv]</parent-name>
            <remote-alias>end station name</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>end station latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[end station latitude]</local-name>
            <parent-name>[data.csv]</parent-name>
            <remote-alias>end station latitude</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>end station longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[end station longitude]</local-name>
            <parent-name>[data.csv]</parent-name>
            <remote-alias>end station longitude</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>bikeid</remote-name>
            <remote-type>20</remote-type>
            <local-name>[bikeid]</local-name>
            <parent-name>[data.csv]</parent-name>
            <remote-alias>bikeid</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>usertype</remote-name>
            <remote-type>129</remote-type>
            <local-name>[usertype]</local-name>
            <parent-name>[data.csv]</parent-name>
            <remote-alias>usertype</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>birth year</remote-name>
            <remote-type>5</remote-type>
            <local-name>[birth year]</local-name>
            <parent-name>[data.csv]</parent-name>
            <remote-alias>birth year</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>gender</remote-name>
            <remote-type>20</remote-type>
            <local-name>[gender]</local-name>
            <parent-name>[data.csv]</parent-name>
            <remote-alias>gender</remote-alias>
            <ordinal>14</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' name='[Age (copy)]' role='dimension' type='quantitative'>
        <calculation class='tableau' formula='(2019-[birth year])' />
      </column>
      <column caption='Age' datatype='real' name='[Birth Year (copy)]' role='dimension' type='quantitative'>
        <calculation class='tableau' formula='(DATEPART(&apos;year&apos;, [starttime])-[birth year])' />
      </column>
      <column datatype='real' default-format='p0.00%' name='[Calculation1]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNT([Start Station Id (copy)]) / TOTAL(COUNT([Start Station Id (copy)]))'>
          <table-calc ordering-type='Field'>
            <order field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]' />
            <order field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:usertype:nk]' />
          </table-calc>
        </calculation>
      </column>
      <column datatype='integer' name='[Calculation2]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='RUNNING_SUM(COUNT([Start Station Id (copy)]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='real' default-format='p0.00%' name='[Calculation3]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNT([Start Station Id (copy)]) / TOTAL(COUNT([Start Station Id (copy)]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Num of trips' datatype='integer' name='[Start Station Id (copy)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[start station id]' />
      </column>
      <column caption='Today' datatype='string' name='[Starttime (copy 2)]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [starttime])) = 5) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [starttime])) = 31) and ((DATEPART(&apos;year&apos;, [starttime])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
      </column>
      <column caption='Season' datatype='string' name='[Starttime (copy)]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [starttime])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [starttime])) = 1) or ((DATEPART(&apos;month&apos;, [starttime])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [starttime])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 6) or ((DATEPART(&apos;month&apos;, [starttime])) = 7) or ((DATEPART(&apos;month&apos;, [starttime])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) =10) or ((DATEPART(&apos;month&apos;, [starttime])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
      </column>
      <column aggregation='Sum' caption='Bikeid' datatype='integer' name='[bikeid]' role='dimension' type='ordinal' />
      <column caption='Birth Year' datatype='real' name='[birth year]' role='dimension' type='quantitative' />
      <column caption='End Station Id' datatype='integer' name='[end station id]' role='measure' type='quantitative' />
      <column aggregation='Avg' caption='End Station Latitude' datatype='real' name='[end station latitude]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative' />
      <column aggregation='Avg' caption='End Station Longitude' datatype='real' name='[end station longitude]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative' />
      <column caption='End Station Name' datatype='string' name='[end station name]' role='dimension' type='nominal' />
      <column aggregation='Sum' caption='Gender' datatype='integer' name='[gender]' role='dimension' type='ordinal'>
        <aliases>
          <alias key='0' value='Unidentified' />
          <alias key='1' value='Male' />
          <alias key='2' value='Female' />
        </aliases>
      </column>
      <column caption='Start Station Id' datatype='integer' name='[start station id]' role='measure' type='quantitative' />
      <column aggregation='Avg' caption='Start Station Latitude' datatype='real' name='[start station latitude]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative' />
      <column aggregation='Avg' caption='Start Station Longitude' datatype='real' name='[start station longitude]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative' />
      <column caption='Start Station Name' datatype='string' name='[start station name]' role='dimension' type='nominal' />
      <column caption='Starttime' datatype='datetime' name='[starttime]' role='dimension' type='ordinal' />
      <column caption='Stoptime' datatype='datetime' name='[stoptime]' role='dimension' type='ordinal' />
      <column caption='Tripduration' datatype='integer' name='[tripduration]' role='measure' type='quantitative' />
      <column caption='Usertype' datatype='string' name='[usertype]' role='dimension' type='nominal' />
      <column-instance column='[Start Station Id (copy)]' derivation='Avg' name='[avg:Start Station Id (copy):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Start Station Id (copy)]' derivation='Count' name='[cnt:Start Station Id (copy):qk]' pivot='key' type='quantitative' />
      <column-instance column='[start station id]' derivation='Count' name='[cnt:start station id:qk]' pivot='key' type='quantitative' />
      <column-instance column='[bikeid]' derivation='CountD' name='[ctd:bikeid:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Start Station Id (copy)]' derivation='Count' name='[cum:cnt:Start Station Id (copy):qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[starttime]' derivation='Hour' name='[hr:starttime:ok]' pivot='key' type='ordinal' />
      <column-instance column='[gender]' derivation='None' name='[none:gender:ok]' pivot='key' type='ordinal' />
      <column-instance column='[start station id]' derivation='None' name='[none:start station id:qk]' pivot='key' type='quantitative' />
      <column-instance column='[usertype]' derivation='None' name='[none:usertype:nk]' pivot='key' type='nominal' />
      <column-instance column='[Start Station Id (copy)]' derivation='Count' name='[pcto:cnt:Start Station Id (copy):qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[bikeid]' derivation='Sum' name='[sum:bikeid:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation2]' derivation='User' name='[usr:Calculation2:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' />
      </column-instance>
      <column-instance column='[Calculation3]' derivation='User' name='[usr:Calculation3:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' />
      </column-instance>
      <column-instance column='[start station id]' derivation='Count' name='[win:cnt:start station id:qk:28]' pivot='key' type='quantitative'>
        <table-calc aggregation='Avg' from='0' ordering-field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[hr:starttime:ok]' ordering-type='Field' to='24' type='WindowTotal' window-options='IncludeCurrent' />
      </column-instance>
      <extract count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='en_US' class='hyper' dbname='C:/Users/13477/Desktop/Bootcamp/Homework- Tableau/Citibike_Analytics.hyper' default-settings='yes' schema='Extract' sslmode='' tablename='Extract' update-time='06/17/2019 03:30:03 AM' username='tableau_internal_user'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <refresh>
            <refresh-event add-from-file-path='data' increment-value='%null%' refresh-type='create' rows-inserted='988331' timestamp-start='2019-06-17 03:30:03.874' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>tripduration</remote-name>
              <remote-type>20</remote-type>
              <local-name>[tripduration]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>tripduration</remote-alias>
              <ordinal>0</ordinal>
              <family>data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>7702</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>starttime</remote-name>
              <remote-type>135</remote-type>
              <local-name>[starttime]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>starttime</remote-alias>
              <ordinal>1</ordinal>
              <family>data.csv</family>
              <local-type>datetime</local-type>
              <aggregation>Year</aggregation>
              <approx-count>977555</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>stoptime</remote-name>
              <remote-type>135</remote-type>
              <local-name>[stoptime]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>stoptime</remote-alias>
              <ordinal>2</ordinal>
              <family>data.csv</family>
              <local-type>datetime</local-type>
              <aggregation>Year</aggregation>
              <approx-count>988331</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>start station id</remote-name>
              <remote-type>20</remote-type>
              <local-name>[start station id]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>start station id</remote-alias>
              <ordinal>3</ordinal>
              <family>data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>80</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>start station name</remote-name>
              <remote-type>129</remote-type>
              <local-name>[start station name]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>start station name</remote-alias>
              <ordinal>4</ordinal>
              <family>data.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>80</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>start station latitude</remote-name>
              <remote-type>5</remote-type>
              <local-name>[start station latitude]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>start station latitude</remote-alias>
              <ordinal>5</ordinal>
              <family>data.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>81</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>start station longitude</remote-name>
              <remote-type>5</remote-type>
              <local-name>[start station longitude]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>start station longitude</remote-alias>
              <ordinal>6</ordinal>
              <family>data.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>81</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>end station id</remote-name>
              <remote-type>20</remote-type>
              <local-name>[end station id]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>end station id</remote-alias>
              <ordinal>7</ordinal>
              <family>data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>103</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>end station name</remote-name>
              <remote-type>129</remote-type>
              <local-name>[end station name]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>end station name</remote-alias>
              <ordinal>8</ordinal>
              <family>data.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>114</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>end station latitude</remote-name>
              <remote-type>5</remote-type>
              <local-name>[end station latitude]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>end station latitude</remote-alias>
              <ordinal>9</ordinal>
              <family>data.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>106</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>end station longitude</remote-name>
              <remote-type>5</remote-type>
              <local-name>[end station longitude]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>end station longitude</remote-alias>
              <ordinal>10</ordinal>
              <family>data.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>106</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>bikeid</remote-name>
              <remote-type>20</remote-type>
              <local-name>[bikeid]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>bikeid</remote-alias>
              <ordinal>11</ordinal>
              <family>data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>3483</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>usertype</remote-name>
              <remote-type>129</remote-type>
              <local-name>[usertype]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>usertype</remote-alias>
              <ordinal>12</ordinal>
              <family>data.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>birth year</remote-name>
              <remote-type>5</remote-type>
              <local-name>[birth year]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>birth year</remote-alias>
              <ordinal>13</ordinal>
              <family>data.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>117</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>gender</remote-name>
              <remote-type>20</remote-type>
              <local-name>[gender]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>gender</remote-alias>
              <ordinal>14</ordinal>
              <family>data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>3</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.648148' measure-ordering='alphabetic' measure-percentage='0.351852' show-structure='false' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[avg:Start Station Id (copy):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:start station id:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[diff:cnt:start station id:qk:1]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[diff:cnt:start station id:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:start station id:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:1]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:10]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:11]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:12]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:13]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:14]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:15]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:16]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:17]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:18]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:19]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:2]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:20]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:21]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:22]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:23]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:24]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:25]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:26]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:27]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:28]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:3]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:4]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:5]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:6]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:7]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:8]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:9]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[sum:bikeid:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:Calculation_913949251116576770:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:Start Station Id (copy):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[ctd:bikeid:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cum:cnt:Start Station Id (copy):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Calculation_913949251116576770:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[pcto:cnt:Start Station Id (copy):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[usr:Calculation2:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[usr:Calculation3:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='RM_data' inline='true' name='federated.1nw41i212p7cem1cc3opa1ctynt3' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='RM_data' name='textscan.0c91wm31dv7jtx1ajau48068exk4'>
            <connection class='textscan' directory='C:/Users/13477/Desktop/Bootcamp/Homework- Tableau/Raw_Data/Output' filename='RM_data.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.0c91wm31dv7jtx1ajau48068exk4' name='RM_data.csv' table='[RM_data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='date' name='Date' ordinal='0' />
            <column datatype='integer' name='Trips over the past 24-hours (midnight to 11:59pm)' ordinal='1' />
            <column datatype='integer' name='Miles traveled today (midnight to 11:59 pm)' ordinal='2' />
            <column datatype='integer' name='Total Annual Members (All Time)' ordinal='3' />
            <column datatype='integer' name='24-Hour Passes Purchased (midnight to 11:59 pm)' ordinal='4' />
            <column datatype='integer' name='3-Day Passes Purchased (midnight to 11:59 pm)' ordinal='5' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[RM_data.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[Date]</local-name>
            <parent-name>[RM_data.csv]</parent-name>
            <remote-alias>Date</remote-alias>
            <ordinal>0</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Trips over the past 24-hours (midnight to 11:59pm)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Trips over the past 24-hours (midnight to 11:59pm)]</local-name>
            <parent-name>[RM_data.csv]</parent-name>
            <remote-alias>Trips over the past 24-hours (midnight to 11:59pm)</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Miles traveled today (midnight to 11:59 pm)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Miles traveled today (midnight to 11:59 pm)]</local-name>
            <parent-name>[RM_data.csv]</parent-name>
            <remote-alias>Miles traveled today (midnight to 11:59 pm)</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total Annual Members (All Time)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Total Annual Members (All Time)]</local-name>
            <parent-name>[RM_data.csv]</parent-name>
            <remote-alias>Total Annual Members (All Time)</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>24-Hour Passes Purchased (midnight to 11:59 pm)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[24-Hour Passes Purchased (midnight to 11:59 pm)]</local-name>
            <parent-name>[RM_data.csv]</parent-name>
            <remote-alias>24-Hour Passes Purchased (midnight to 11:59 pm)</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>3-Day Passes Purchased (midnight to 11:59 pm)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[3-Day Passes Purchased (midnight to 11:59 pm)]</local-name>
            <parent-name>[RM_data.csv]</parent-name>
            <remote-alias>3-Day Passes Purchased (midnight to 11:59 pm)</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[24-Hour Passes Purchased (midnight to 11:59 pm)]' role='measure' type='quantitative' />
      <column datatype='integer' name='[3-Day Passes Purchased (midnight to 11:59 pm)]' role='measure' type='quantitative' />
      <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
      </column>
      <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Miles traveled today (midnight to 11:59 pm)]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='integer' name='[Total Annual Members (All Time)]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Trips over the past 24-hours (midnight to 11:59pm)]' role='measure' type='quantitative' />
      <column-instance column='[Miles traveled today (midnight to 11:59 pm)]' derivation='Avg' name='[avg:Miles traveled today (midnight to 11:59 pm):ok]' pivot='key' type='ordinal' />
      <column-instance column='[Trips over the past 24-hours (midnight to 11:59pm)]' derivation='Avg' name='[avg:Trips over the past 24-hours (midnight to 11:59pm):qk]' pivot='key' type='quantitative' />
      <column-instance column='[24-Hour Passes Purchased (midnight to 11:59 pm)]' derivation='Sum' name='[sum:24-Hour Passes Purchased (midnight to 11:59 pm):qk]' pivot='key' type='quantitative' />
      <column-instance column='[3-Day Passes Purchased (midnight to 11:59 pm)]' derivation='Sum' name='[sum:3-Day Passes Purchased (midnight to 11:59 pm):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Miles traveled today (midnight to 11:59 pm)]' derivation='Sum' name='[sum:Miles traveled today (midnight to 11:59 pm):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Total Annual Members (All Time)]' derivation='Sum' name='[sum:Total Annual Members (All Time):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Trips over the past 24-hours (midnight to 11:59pm)]' derivation='Sum' name='[sum:Trips over the past 24-hours (midnight to 11:59pm):qk]' pivot='key' type='quantitative' />
      <extract count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='en_US' class='hyper' dbname='C:/Users/13477/Desktop/Bootcamp/Homework- Tableau/Citibike_RMdata.hyper' default-settings='yes' schema='Extract' sslmode='' tablename='Extract' update-time='06/17/2019 03:24:11 AM' username='tableau_internal_user'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <refresh>
            <refresh-event add-from-file-path='RM_data' increment-value='%null%' refresh-type='create' rows-inserted='891' timestamp-start='2019-06-17 03:24:11.187' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Date</remote-name>
              <remote-type>133</remote-type>
              <local-name>[Date]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Date</remote-alias>
              <ordinal>0</ordinal>
              <family>RM_data.csv</family>
              <local-type>date</local-type>
              <aggregation>Year</aggregation>
              <approx-count>891</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Trips over the past 24-hours (midnight to 11:59pm)</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Trips over the past 24-hours (midnight to 11:59pm)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Trips over the past 24-hours (midnight to 11:59pm)</remote-alias>
              <ordinal>1</ordinal>
              <family>RM_data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>883</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Miles traveled today (midnight to 11:59 pm)</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Miles traveled today (midnight to 11:59 pm)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Miles traveled today (midnight to 11:59 pm)</remote-alias>
              <ordinal>2</ordinal>
              <family>RM_data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>887</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Total Annual Members (All Time)</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Total Annual Members (All Time)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Total Annual Members (All Time)</remote-alias>
              <ordinal>3</ordinal>
              <family>RM_data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>891</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>24-Hour Passes Purchased (midnight to 11:59 pm)</remote-name>
              <remote-type>20</remote-type>
              <local-name>[24-Hour Passes Purchased (midnight to 11:59 pm)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>24-Hour Passes Purchased (midnight to 11:59 pm)</remote-alias>
              <ordinal>4</ordinal>
              <family>RM_data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>795</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>3-Day Passes Purchased (midnight to 11:59 pm)</remote-name>
              <remote-type>20</remote-type>
              <local-name>[3-Day Passes Purchased (midnight to 11:59 pm)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>3-Day Passes Purchased (midnight to 11:59 pm)</remote-alias>
              <ordinal>5</ordinal>
              <family>RM_data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>330</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.444444' measure-ordering='alphabetic' measure-percentage='0.555556' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[avg:Miles traveled today (midnight to 11:59 pm):ok]' type='palette'>
            <map to='#499894'>
              <bucket>12626.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>23277.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>29434.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>30063.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>34450.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>38114.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>43090.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>43123.333333333336</bucket>
            </map>
            <map to='#499894'>
              <bucket>48280.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>49890.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>50418.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>52805.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>55713.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>55731.225806451614</bucket>
            </map>
            <map to='#499894'>
              <bucket>56090.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>58975.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>61251.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>62379.333333333336</bucket>
            </map>
            <map to='#499894'>
              <bucket>63091.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>66518.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>68702.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>70727.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>71140.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>74540.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>78780.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>78825.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>81859.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>85524.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>86315.5</bucket>
            </map>
            <map to='#499894'>
              <bucket>88499.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>92517.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>94653.133333333331</bucket>
            </map>
            <map to='#499894'>
              <bucket>97301.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>99168.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>100843.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>101915.1724137931</bucket>
            </map>
            <map to='#499894'>
              <bucket>104860.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>107949.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>107994.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>112585.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>115310.33333333333</bucket>
            </map>
            <map to='#499894'>
              <bucket>115329.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>120119.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>121806.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>123639.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>126992.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>127096.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>127587.56451612903</bucket>
            </map>
            <map to='#499894'>
              <bucket>129797.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>132760.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>132832.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>136049.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>136330.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>139680.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>140368.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>142121.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>143953.93333333332</bucket>
            </map>
            <map to='#499894'>
              <bucket>144934.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>146083.5</bucket>
            </map>
            <map to='#499894'>
              <bucket>147325.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>150222.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>153260.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>153565.66666666666</bucket>
            </map>
            <map to='#499894'>
              <bucket>156297.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>159032.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>163665.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>171826.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>0.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>21167.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>24060.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>27005.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>32919.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>36653.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>39957.333333333336</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>41583.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>46403.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>47408.924731182793</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>47584.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>49639.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>52310.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>53160.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>54769.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>57978.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>59000.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>60469.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>62387.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>64440.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>67536.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>69137.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>69966.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>72776.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>76262.5</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>76715.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>79929.770186335401</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>80194.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>81992.5</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>83988.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>86116.13461538461</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>87465.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>89585.965517241377</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>90077.8671875</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>91412.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>91877.5</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>95073.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>96536.804713804711</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>98137.066666666666</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>99126.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>104081.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>107006.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>110421.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>113805.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>114260.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>118192.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>119618.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>122713.35483870968</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>122885.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>124697.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>125800.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>129089.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>130325.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>132223.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>134526.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>134723.33333333334</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>138291.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>138754.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>141360.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>143814.5</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>144443.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>146611.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>148926.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>150196.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>151112.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>154638.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>157411.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>158599.66666666666</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>161492.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>168603.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>179681.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>9479.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>22312.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>26182.5</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>28056.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>33344.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>37687.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>41499.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>42066.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>47215.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>49421.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>49887.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>52486.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>55139.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>55191.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>58210.033333333333</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>58441.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>60985.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>61782.333333333336</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>62699.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>65284.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>68321.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>70189.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>70241.333333333328</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>73839.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>77341.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>77988.183333333334</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>78075.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>81071.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>83130.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>84763.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>88057.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>91975.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>92129.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>95502.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>96081.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>98015.645669291334</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>98662.13461538461</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>98900.931034482754</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>99868.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>104309.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>106958.66666666667</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>107682.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>111304.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>114629.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>114791.5</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>118620.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>120868.5</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>123433.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>125959.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>126491.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>129444.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>132061.5</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>132477.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>135263.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>135699.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>137539.96666666667</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>139284.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>139881.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>141936.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>144531.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>144583.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>147055.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>149532.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>151785.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>152617.5</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>155957.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>158453.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>163063.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>165335.66666666666</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>170334.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>185232.0</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>53849.011111111111</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>97098.795275590557</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>97157.923076923078</bucket>
            </map>
            <map to='#79706e'>
              <bucket>15759.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>24326.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>30802.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>32615.5</bucket>
            </map>
            <map to='#79706e'>
              <bucket>35209.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>38834.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>44226.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>44382.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>48713.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>50532.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>50804.333333333336</bucket>
            </map>
            <map to='#79706e'>
              <bucket>53430.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>56313.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>57929.333333333336</bucket>
            </map>
            <map to='#79706e'>
              <bucket>59442.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>61715.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>63480.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>64836.666666666664</bucket>
            </map>
            <map to='#79706e'>
              <bucket>66511.677419354834</bucket>
            </map>
            <map to='#79706e'>
              <bucket>66885.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>68976.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>71673.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>72768.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>75190.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>79338.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>79419.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>82987.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>86293.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>87816.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>89146.96666666666</bucket>
            </map>
            <map to='#79706e'>
              <bucket>89639.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>93232.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>96191.517241379304</bucket>
            </map>
            <map to='#79706e'>
              <bucket>97818.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>101444.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>105248.33333333333</bucket>
            </map>
            <map to='#79706e'>
              <bucket>105721.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>108886.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>109055.5</bucket>
            </map>
            <map to='#79706e'>
              <bucket>113119.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>116318.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>117074.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>120484.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>123086.5</bucket>
            </map>
            <map to='#79706e'>
              <bucket>124150.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>127879.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>128341.33333333333</bucket>
            </map>
            <map to='#79706e'>
              <bucket>130240.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>133187.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>133402.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>136675.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>137189.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>140557.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>141238.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>143054.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>145901.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>147128.66666666666</bucket>
            </map>
            <map to='#79706e'>
              <bucket>147780.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>150377.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>153666.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>156315.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>156787.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>159914.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>165326.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>173581.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>13599.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>23462.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>29794.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>30225.666666666668</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>34580.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>38221.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>43108.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>43482.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>48379.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>50427.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>50652.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>53031.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>55748.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>56614.5</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>58520.93548387097</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>59260.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>61381.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>62871.666666666664</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>63099.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>66584.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>68739.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>70932.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>71358.333333333328</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>74556.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>78803.666666666672</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>78833.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>82681.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>85566.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>86983.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>88831.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>92569.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>94696.100000000006</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>97329.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>99424.333333333328</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>100855.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>102936.6551724138</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>104884.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>108106.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>108281.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>112664.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>115451.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>115845.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>120205.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>122005.5</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>123710.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>127033.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>127140.33333333333</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>128186.55</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>129870.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>132825.5</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>132874.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>136344.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>136481.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>140226.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>140480.5</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>142476.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>145321.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>146669.5</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>147379.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>150082.89999999999</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>150281.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>153444.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>154358.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>156344.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>159263.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>164623.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>171973.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>11483.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>22756.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>27286.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>28193.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>33607.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>37741.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>41624.666666666664</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>42333.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>47328.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>49520.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>49792.290322580644</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>50155.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>52573.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>55182.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>55433.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>58497.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>61049.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>61804.5</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>62728.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>65739.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>68489.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>70297.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>70679.666666666672</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>74286.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>78104.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>78381.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>81217.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>83340.5</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>84767.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>88170.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>92142.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>92203.53333333334</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>95599.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>97107.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>99858.307692307688</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>100571.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>104460.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>106961.95555555556</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>107564.5</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>107762.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>111440.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>114819.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>114985.5</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>118790.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>120970.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>123444.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>126213.5</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>126527.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>129505.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>132407.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>132509.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>135757.66666666666</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>135800.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>139423.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>139943.33333333334</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>140654.5806451613</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>141960.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>144623.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>145329.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>147098.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>149837.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>152057.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>152694.66666666666</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>155978.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>158528.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>163114.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>170524.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>186037.0</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>112989.88732394367</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>132573.29670329671</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>20810.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>26501.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>32472.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>35921.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>38969.333333333336</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>40697.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>46021.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>47095.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>49368.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>51664.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>52492.666666666664</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>54567.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>57295.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>58781.666666666664</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>60363.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>62352.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>64012.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>67186.5</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>67448.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>69588.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>72383.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>75858.333333333328</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>76281.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>80049.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>81302.5</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>83755.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>87328.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>90824.666666666672</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>91041.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>94356.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>97790.275862068971</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>98707.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>103656.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>104875.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>106867.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>109668.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>112567.33333333333</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>114039.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>114238.5</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>117164.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>119321.5</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>122622.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>124436.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>125305.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>128502.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>129634.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>131228.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>134347.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>134578.66666666666</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>137933.33333333334</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>138059.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>141323.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>142694.66666666666</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>143899.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>146438.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>148542.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>149423.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>150903.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>154525.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>157266.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>157413.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>161182.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>167568.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>177291.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>5328.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>21483.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>24125.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>27246.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>32949.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>37473.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>40368.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>41598.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>44758.612903225803</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>46582.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>48011.5</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>49648.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>52442.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>53607.333333333336</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>54156.612903225803</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>54857.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>58136.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>59304.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>60490.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>62500.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>64662.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>67622.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>69154.666666666672</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>70068.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>73187.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>76272.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>77639.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>80607.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>82104.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>84325.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>87612.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>89618.866666666669</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>91489.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>92966.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>95097.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>98193.166666666672</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>99225.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>104171.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>105736.5</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>107040.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>110486.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>113871.5</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>114264.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>118257.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>119903.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>123304.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>124735.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>125978.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>129217.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>130355.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>130978.6129032258</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>132234.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>134926.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>134998.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>138414.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>139040.33333333334</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>141463.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>144029.33333333334</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>144455.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>146794.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>149382.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>151415.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>151427.33333333334</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>154726.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>157912.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>158647.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>162040.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>169402.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>180290.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>18326.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>26272.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>31793.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>35795.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>36308.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>39660.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>45461.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>46427.666666666664</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>49024.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>50924.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>52326.333333333336</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>54362.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>57219.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>58673.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>60051.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>62150.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>63740.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>65568.666666666672</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>67247.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>69530.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>72112.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>72923.141304347824</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>75006.5</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>75825.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>79914.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>80864.333333333328</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>83643.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>86864.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>90369.333333333328</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>90651.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>93532.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>97582.931034482754</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>98554.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>100195.46153846153</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>102121.5748031496</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>103241.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>103700.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>106678.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>109405.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>111192.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>112419.16666666667</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>113959.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>117035.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>118630.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>122345.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>124127.66666666667</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>125166.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>128397.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>129418.33333333333</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>130821.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>133696.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>133775.5</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>137364.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>137778.5</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>141169.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>142200.5</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>143619.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>146419.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>148394.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>149102.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>150847.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>154381.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>156839.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>157085.33333333334</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>160532.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>166177.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>174749.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>11799.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>22917.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>27835.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>28763.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>34052.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>37788.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>41700.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>42845.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>47829.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>49738.666666666664</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>49894.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>50218.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>52757.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>55350.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>55706.333333333336</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>58710.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>61107.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>61856.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>62854.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>66078.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>68600.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>70477.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>70871.666666666672</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>74307.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>78320.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>78549.5</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>81358.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>83692.666666666672</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>85008.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>88293.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>92219.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>92464.551724137928</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>95827.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>97943.5</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>100255.26666666666</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>100652.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>104541.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>107615.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>107763.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>111660.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>114830.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>115053.5</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>116480.75806451614</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>118793.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>121099.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>123470.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>126311.5</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>126637.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>129597.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>132527.5</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>132583.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>135835.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>136080.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>139481.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>140017.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>142007.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>143088.60000000001</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>144759.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>145744.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>147144.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>149853.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>152463.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>152858.66666666666</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>156062.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>158625.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>163188.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>170812.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>189852.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>17446.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>25232.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>31294.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>33933.666666666664</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>35594.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>39154.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>44411.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>44982.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>48870.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>50738.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>51167.666666666664</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>53955.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>56479.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>57969.666666666664</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>59477.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>61756.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>63551.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>64916.666666666664</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>66984.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>69352.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>71843.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>73005.333333333328</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>75196.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>79562.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>79933.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>83086.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>86395.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>87968.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>90249.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>93244.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>96632.517241379304</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>97913.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>100576.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>101573.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>101951.16129032258</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>105730.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>109070.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>109142.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>113123.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>116337.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>117083.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>119380.96739130435</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>120796.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>123143.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>124272.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>128201.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>128839.66666666667</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>130310.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>133198.5</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>133409.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>136772.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>137228.5</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>140361.53260869565</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>140711.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>141364.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>143277.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>145920.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>147337.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>147842.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>150437.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>153674.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>156450.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>156810.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>160019.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>165423.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>173852.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>17576.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>25393.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>31573.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>35458.333333333336</bucket>
            </map>
            <map to='#d37295'>
              <bucket>35619.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>39176.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>44552.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>45562.666666666664</bucket>
            </map>
            <map to='#d37295'>
              <bucket>48943.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>50743.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>51492.5</bucket>
            </map>
            <map to='#d37295'>
              <bucket>54116.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>56553.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>58119.5</bucket>
            </map>
            <map to='#d37295'>
              <bucket>59614.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>61857.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>63654.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>65423.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>66829.399999999994</bucket>
            </map>
            <map to='#d37295'>
              <bucket>67056.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>69420.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>71869.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>73330.666666666672</bucket>
            </map>
            <map to='#d37295'>
              <bucket>75694.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>79824.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>80233.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>83399.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>86651.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>88232.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>90430.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>93434.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>97158.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>98021.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>101442.5</bucket>
            </map>
            <map to='#d37295'>
              <bucket>101982.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>102526.2</bucket>
            </map>
            <map to='#d37295'>
              <bucket>105765.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>109380.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>109998.33333333333</bucket>
            </map>
            <map to='#d37295'>
              <bucket>113385.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>116904.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>118244.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>121887.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>123323.66666666667</bucket>
            </map>
            <map to='#d37295'>
              <bucket>124356.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>128273.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>129259.5</bucket>
            </map>
            <map to='#d37295'>
              <bucket>130649.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>133330.5</bucket>
            </map>
            <map to='#d37295'>
              <bucket>133564.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>137240.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>137447.5</bucket>
            </map>
            <map to='#d37295'>
              <bucket>140767.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>141406.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>143334.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>145924.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>147546.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>147977.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>150535.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>153883.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>156782.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>156832.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>160081.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>165582.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>173896.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>19131.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>26468.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>32011.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>35873.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>38173.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>40020.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>46003.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>47011.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>49109.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>50981.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>52373.5</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>54440.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>57244.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>58756.333333333336</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>60053.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>62304.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>63750.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>66026.666666666672</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>67299.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>69573.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>72192.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>75131.666666666672</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>75847.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>79955.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>81086.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>83660.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>87253.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>90695.5</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>90704.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>94040.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>97688.600000000006</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>98615.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>103621.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>104179.66666666667</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>106799.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>109420.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>111268.66666666667</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>113406.77419354839</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>113998.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>117155.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>118917.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>122394.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>124208.5</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>125265.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>128453.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>129539.66666666667</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>131224.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>134191.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>134233.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>137821.5</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>137988.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>141282.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>142302.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>143664.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>146437.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>148395.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>149336.66666666666</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>150894.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>154397.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>157255.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>157257.5</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>160750.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>166828.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>175352.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>20955.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>26767.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>32527.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>36319.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>38980.333333333336</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>40886.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>46216.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>47134.333333333336</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>49576.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>51927.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>52588.666666666664</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>54751.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>57760.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>58791.666666666664</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>60375.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>62381.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>64197.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>67530.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>67952.333333333328</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>69596.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>72513.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>76257.666666666672</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>76569.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>80081.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>81719.5</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>83935.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>87382.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>90971.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>91215.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>94653.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>98127.068965517246</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>98909.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>103697.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>104885.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>106881.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>110293.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>113715.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>114113.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>114520.54838709677</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>117924.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>119417.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>122656.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>124519.66666666667</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>125508.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>128749.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>129693.5</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>131871.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>134416.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>134668.33333333334</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>138069.5</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>138078.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>141327.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>143678.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>144186.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>146441.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>148669.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>149986.5</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>151063.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>154588.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>157299.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>157829.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>161263.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>167597.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>177631.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>13910.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>23556.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>30358.333333333332</bucket>
            </map>
            <map to='#e15759'>
              <bucket>30418.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>35121.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>38634.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>43621.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>43744.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>48666.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>50481.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>50687.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>53225.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>55927.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>56846.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>59336.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>61407.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>62884.5</bucket>
            </map>
            <map to='#e15759'>
              <bucket>63165.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>66587.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>67090.774193548394</bucket>
            </map>
            <map to='#e15759'>
              <bucket>68775.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>71418.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>71554.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>74794.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>78847.333333333328</bucket>
            </map>
            <map to='#e15759'>
              <bucket>78912.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>82748.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>85944.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>87227.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>88986.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>92642.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>95137.413793103449</bucket>
            </map>
            <map to='#e15759'>
              <bucket>96581.393700787405</bucket>
            </map>
            <map to='#e15759'>
              <bucket>96868.5</bucket>
            </map>
            <map to='#e15759'>
              <bucket>97330.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>99748.666666666672</bucket>
            </map>
            <map to='#e15759'>
              <bucket>100885.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>103428.33333333333</bucket>
            </map>
            <map to='#e15759'>
              <bucket>104522.05205479452</bucket>
            </map>
            <map to='#e15759'>
              <bucket>104944.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>108301.5</bucket>
            </map>
            <map to='#e15759'>
              <bucket>108427.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>112985.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>115573.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>116270.5</bucket>
            </map>
            <map to='#e15759'>
              <bucket>120257.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>122119.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>123795.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>127267.5</bucket>
            </map>
            <map to='#e15759'>
              <bucket>127470.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>130087.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>132952.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>133086.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>133785.29032258064</bucket>
            </map>
            <map to='#e15759'>
              <bucket>136511.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>136548.66666666666</bucket>
            </map>
            <map to='#e15759'>
              <bucket>140362.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>140509.5</bucket>
            </map>
            <map to='#e15759'>
              <bucket>142563.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>145524.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>146720.5</bucket>
            </map>
            <map to='#e15759'>
              <bucket>147441.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>150312.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>153500.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>154831.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>156367.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>159264.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>164956.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>172936.0</bucket>
            </map>
            <map to='#edc948'>
              <bucket>59221.566666666666</bucket>
            </map>
            <map to='#edc948'>
              <bucket>99309.196850393695</bucket>
            </map>
            <map to='#edc948'>
              <bucket>99706.288461538468</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>11911.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>23143.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>28417.666666666668</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>29284.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>34438.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>37985.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>42013.666666666664</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>42853.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>48021.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>49886.333333333336</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>50322.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>51996.483870967742</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>52760.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>55696.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>55755.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>58768.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>61206.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>62282.5</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>63086.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>66449.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>68638.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>70501.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>71126.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>74345.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>78530.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>78715.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>81425.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>83700.5</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>85295.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>88474.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>92348.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>93397.68965517242</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>97110.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>98460.5</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>100790.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>100960.26923076923</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>104590.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>107852.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>107906.33333333333</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>112354.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>114977.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>115183.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>118809.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>121335.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>123534.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>126427.65591397849</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>126518.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>126748.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>129720.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>132640.5</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>132716.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>135850.33333333334</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>136287.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>139535.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>140150.5</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>142097.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>143162.83870967742</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>144852.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>145834.5</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>147247.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>150076.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>153123.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>153560.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>156285.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>158983.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>163349.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>171623.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>8344.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>21545.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>25825.5</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>27381.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>33018.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>37500.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>41078.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>41770.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>46930.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>48674.666666666664</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>49691.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>52446.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>54747.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>55000.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>58278.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>59773.5</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>60652.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>61153.345238095237</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>62524.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>64701.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>68060.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>69267.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>70146.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>73262.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>76864.5</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>77668.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>80705.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>82176.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>84590.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>87647.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>90096.620689655174</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>91525.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>92496.528301886792</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>92634.7421875</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>93530.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>95288.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>95876.852054794523</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>98322.827586206899</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>99410.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>104217.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>105762.5</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>107126.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>110772.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>114057.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>114400.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>118282.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>120452.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>123401.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>125180.5</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>126129.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>129382.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>131010.35483870968</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>131245.5</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>132255.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>135101.5</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>135405.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>139011.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>139411.5</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>141709.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>144116.5</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>144473.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>146802.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>149487.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>151449.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>152297.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>155007.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>158334.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>159132.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>162302.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>169481.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>183295.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>17949.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>25879.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>31752.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>35764.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>36047.5</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>39352.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>45120.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>46048.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>48964.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>50761.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>51931.333333333336</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>54282.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>57070.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>58140.5</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>59975.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>61956.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>63693.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>65538.666666666672</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>67098.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>69505.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>72077.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>74696.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>75746.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>79890.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>80520.5</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>83442.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>86679.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>89363.333333333328</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>90625.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>93476.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>97415.862068965522</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>98129.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>102602.5</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>102834.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>104121.16666666667</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>105906.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>109399.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>110423.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>113613.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>116967.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>118347.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>122234.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>123339.5</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>124919.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>128288.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>129408.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>130774.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>133465.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>133659.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>137343.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>137474.5</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>140923.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>141573.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>143571.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>146307.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>148067.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>148440.5</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>150788.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>153928.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>156834.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>157052.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>160138.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>165836.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>174715.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>14303.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>24205.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>30544.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>30920.5</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>35133.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>38766.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>44131.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>44182.666666666664</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>48684.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>50512.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>50785.666666666664</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>53403.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>56061.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>57843.333333333336</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>59343.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>61571.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>62480.964285714283</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>63353.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>63773.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>66633.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>68868.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>71085.071428571435</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>71556.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>71959.666666666672</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>75072.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>78975.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>79003.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>82768.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>86248.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>87695.333333333328</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>89629.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>92882.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>96183.448275862072</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>97587.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>99759.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>101124.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>105695.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>108780.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>108990.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>113055.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>115888.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>116645.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>120473.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>122270.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>123973.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>127619.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>128249.66666666667</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>130122.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>133107.5</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>133126.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>136608.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>137038.5</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>140537.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>140879.66666666666</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>142585.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>143708.17142857143</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>145832.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>147028.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>147654.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>150324.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>153650.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>155548.5</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>156779.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>159297.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>165240.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>173109.0</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>92933.467391304352</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>124807.34065934065</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>9387.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>22190.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>26007.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>27931.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>33178.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>37641.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>41353.333333333336</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>41971.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>45471.677419354841</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>47207.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>49086.333333333336</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>49790.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>52453.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>55080.5</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>55093.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>58360.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>60400.333333333336</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>60831.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>62656.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>63111.225806451614</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>64764.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>68283.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>70092.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>70173.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>73542.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>77106.5</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>77915.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>80995.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>82469.333333333328</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>84614.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>87917.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>90678.882352941175</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>91563.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>95328.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>95882.333333333328</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>98655.31034482758</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>99450.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>104268.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>106466.66666666667</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>107144.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>111254.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>114490.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>114684.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>118306.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>120743.33333333333</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>123419.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>125653.5</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>126480.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>129385.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>131991.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>132261.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>135160.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>135482.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>136591.96774193548</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>139278.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>139443.5</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>141748.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>144452.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>144513.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>146858.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>149524.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>151514.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>152406.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>155712.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>158375.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>160825.5</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>163026.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>169511.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>184114.0</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1nw41i212p7cem1cc3opa1ctynt3].[sum:24-Hour Passes Purchased (midnight to 11:59 pm):qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1nw41i212p7cem1cc3opa1ctynt3].[sum:Total Annual Members (All Time):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.1nw41i212p7cem1cc3opa1ctynt3].[sum:Number of Records:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1nw41i212p7cem1cc3opa1ctynt3].[sum:Miles traveled today (midnight to 11:59 pm):qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.1nw41i212p7cem1cc3opa1ctynt3].[avg:Trips over the past 24-hours (midnight to 11:59pm):qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.1nw41i212p7cem1cc3opa1ctynt3].[sum:Trips over the past 24-hours (midnight to 11:59pm):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1nw41i212p7cem1cc3opa1ctynt3].[sum:3-Day Passes Purchased (midnight to 11:59 pm):qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <shared-views>
    <shared-view name='federated.1klxzo30gxr1s9179gc7d0gb3tuz'>
      <datasources>
        <datasource caption='data' name='federated.1klxzo30gxr1s9179gc7d0gb3tuz' />
      </datasources>
      <datasource-dependencies datasource='federated.1klxzo30gxr1s9179gc7d0gb3tuz'>
        <column caption='Starttime' datatype='datetime' name='[starttime]' role='dimension' type='ordinal' />
        <column-instance column='[starttime]' derivation='Year' name='[yr:starttime:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
        <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
        </column>
        <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
        </column>
        <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
        <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]'>
        <groupfilter function='level-members' level='[yr:starttime:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
        <target field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]' />
      </filter>
      <filter class='categorical' column='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]'>
        <groupfilter from='&quot;Fall&quot;' function='range' level='[none:Date (copy 2):nk]' to='&quot;Winter&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]'>
        <groupfilter function='level-members' level='[none:Date (copy):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
    </shared-view>
    <shared-view name='federated.1nw41i212p7cem1cc3opa1ctynt3'>
      <datasources>
        <datasource caption='RM_data' name='federated.1nw41i212p7cem1cc3opa1ctynt3' />
      </datasources>
      <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
        <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
        </column>
        <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
        </column>
        <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
        <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
        <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
        <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <filter class='categorical' column='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]'>
        <groupfilter from='&quot;Fall&quot;' function='range' level='[none:Date (copy 2):nk]' to='&quot;Winter&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]'>
        <groupfilter function='level-members' level='[none:Date (copy):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok]'>
        <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
          <groupfilter function='member' level='[yr:Date:ok]' member='2017' />
          <groupfilter function='member' level='[yr:Date:ok]' member='2018' />
        </groupfilter>
      </filter>
    </shared-view>
  </shared-views>
  <worksheets>
    <worksheet name='#Trips&amp;Gender'>
      <table>
        <view>
          <datasources>
            <datasource caption='data' name='federated.1klxzo30gxr1s9179gc7d0gb3tuz' />
            <datasource caption='RM_data' name='federated.1nw41i212p7cem1cc3opa1ctynt3' />
          </datasources>
          <datasource-dependencies datasource='federated.1klxzo30gxr1s9179gc7d0gb3tuz'>
            <column caption='Num of trips' datatype='integer' name='[Start Station Id (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[start station id]' />
            </column>
            <column caption='Today' datatype='string' name='[Starttime (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [starttime])) = 5) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [starttime])) = 31) and ((DATEPART(&apos;year&apos;, [starttime])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column-instance column='[Start Station Id (copy)]' derivation='Count' name='[cnt:Start Station Id (copy):qk]' pivot='key' type='quantitative' />
            <column aggregation='Sum' caption='Gender' datatype='integer' name='[gender]' role='dimension' type='ordinal'>
              <aliases>
                <alias key='0' value='Unidentified' />
                <alias key='1' value='Male' />
                <alias key='2' value='Female' />
              </aliases>
            </column>
            <column-instance column='[Starttime (copy 2)]' derivation='None' name='[none:Starttime (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[gender]' derivation='None' name='[none:gender:ok]' pivot='key' type='ordinal' />
            <column-instance column='[usertype]' derivation='None' name='[none:usertype:nk]' pivot='key' type='nominal' />
            <column caption='Start Station Id' datatype='integer' name='[start station id]' role='measure' type='quantitative' />
            <column caption='Starttime' datatype='datetime' name='[starttime]' role='dimension' type='ordinal' />
            <column caption='Usertype' datatype='string' name='[usertype]' role='dimension' type='nominal' />
            <column-instance column='[starttime]' derivation='Year' name='[yr:starttime:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
            <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):nk]'>
            <groupfilter function='level-members' level='[none:Starttime (copy 2):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]'>
            <groupfilter from='0' function='range' level='[none:gender:ok]' to='2' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:usertype:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:usertype:nk]' member='&quot;Customer&quot;' />
              <groupfilter function='member' level='[none:usertype:nk]' member='&quot;Subscriber&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:usertype:nk]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:Start Station Id (copy):qk]' scope='rows' value='#Trips' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]' />
              <text column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:Start Station Id (copy):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:Start Station Id (copy):qk]</rows>
        <cols>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</cols>
      </table>
      <simple-id uuid='{6E02D31F-9388-484E-980A-014C7D151276}' />
    </worksheet>
    <worksheet name='#passesperday'>
      <layout-options>
        <title>
          <formatted-text>
            <run>24 hrs passes are mostly sold over the weekends</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='RM_data' name='federated.1nw41i212p7cem1cc3opa1ctynt3' />
          </datasources>
          <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
            <column datatype='integer' name='[24-Hour Passes Purchased (midnight to 11:59 pm)]' role='measure' type='quantitative' />
            <column datatype='integer' name='[3-Day Passes Purchased (midnight to 11:59 pm)]' role='measure' type='quantitative' />
            <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
            <column-instance column='[24-Hour Passes Purchased (midnight to 11:59 pm)]' derivation='Sum' name='[sum:24-Hour Passes Purchased (midnight to 11:59 pm):qk]' pivot='key' type='quantitative' />
            <column-instance column='[3-Day Passes Purchased (midnight to 11:59 pm)]' derivation='Sum' name='[sum:3-Day Passes Purchased (midnight to 11:59 pm):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Weekday' name='[wd:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1nw41i212p7cem1cc3opa1ctynt3].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1nw41i212p7cem1cc3opa1ctynt3].[sum:24-Hour Passes Purchased (midnight to 11:59 pm):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1nw41i212p7cem1cc3opa1ctynt3].[sum:3-Day Passes Purchased (midnight to 11:59 pm):qk]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1nw41i212p7cem1cc3opa1ctynt3].[Multiple Values]' scope='rows' value='#Passes' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1nw41i212p7cem1cc3opa1ctynt3].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='has-stroke' value='true' />
                <format attr='stroke-color' value='#000000' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1nw41i212p7cem1cc3opa1ctynt3].[Multiple Values]</rows>
        <cols>([federated.1nw41i212p7cem1cc3opa1ctynt3].[wd:Date:ok] / [federated.1nw41i212p7cem1cc3opa1ctynt3].[:Measure Names])</cols>
      </table>
      <simple-id uuid='{35088D2E-1457-4005-B815-9733FC6FACFB}' />
    </worksheet>
    <worksheet name='#passespermonth'>
      <layout-options>
        <title>
          <formatted-text>
            <run>As expected pass purchases soared in summer (June, July &amp; Aug)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='RM_data' name='federated.1nw41i212p7cem1cc3opa1ctynt3' />
          </datasources>
          <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
            <column datatype='integer' name='[24-Hour Passes Purchased (midnight to 11:59 pm)]' role='measure' type='quantitative' />
            <column datatype='integer' name='[3-Day Passes Purchased (midnight to 11:59 pm)]' role='measure' type='quantitative' />
            <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column-instance column='[Date]' derivation='Month' name='[mn:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
            <column-instance column='[24-Hour Passes Purchased (midnight to 11:59 pm)]' derivation='Sum' name='[sum:24-Hour Passes Purchased (midnight to 11:59 pm):qk]' pivot='key' type='quantitative' />
            <column-instance column='[3-Day Passes Purchased (midnight to 11:59 pm)]' derivation='Sum' name='[sum:3-Day Passes Purchased (midnight to 11:59 pm):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1nw41i212p7cem1cc3opa1ctynt3].[:Measure Names]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1nw41i212p7cem1cc3opa1ctynt3].[sum:3-Day Passes Purchased (midnight to 11:59 pm):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1nw41i212p7cem1cc3opa1ctynt3].[sum:24-Hour Passes Purchased (midnight to 11:59 pm):qk]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1nw41i212p7cem1cc3opa1ctynt3].[Multiple Values]' scope='rows' value='#Passes' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1nw41i212p7cem1cc3opa1ctynt3].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='has-stroke' value='true' />
                <format attr='stroke-color' value='#000000' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1nw41i212p7cem1cc3opa1ctynt3].[Multiple Values]</rows>
        <cols>([federated.1nw41i212p7cem1cc3opa1ctynt3].[mn:Date:ok] / [federated.1nw41i212p7cem1cc3opa1ctynt3].[:Measure Names])</cols>
      </table>
      <simple-id uuid='{A8AB3AE4-8D65-4CA8-88BE-45D19415E270}' />
    </worksheet>
    <worksheet name='#passesperyear'>
      <layout-options>
        <title>
          <formatted-text>
            <run>#passes sales soared in 2018 </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='RM_data' name='federated.1nw41i212p7cem1cc3opa1ctynt3' />
          </datasources>
          <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
            <column datatype='integer' name='[24-Hour Passes Purchased (midnight to 11:59 pm)]' role='measure' type='quantitative' />
            <column datatype='integer' name='[3-Day Passes Purchased (midnight to 11:59 pm)]' role='measure' type='quantitative' />
            <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
            <column-instance column='[24-Hour Passes Purchased (midnight to 11:59 pm)]' derivation='Sum' name='[sum:24-Hour Passes Purchased (midnight to 11:59 pm):qk]' pivot='key' type='quantitative' />
            <column-instance column='[3-Day Passes Purchased (midnight to 11:59 pm)]' derivation='Sum' name='[sum:3-Day Passes Purchased (midnight to 11:59 pm):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1nw41i212p7cem1cc3opa1ctynt3].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1nw41i212p7cem1cc3opa1ctynt3].[sum:24-Hour Passes Purchased (midnight to 11:59 pm):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1nw41i212p7cem1cc3opa1ctynt3].[sum:3-Day Passes Purchased (midnight to 11:59 pm):qk]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1nw41i212p7cem1cc3opa1ctynt3].[Multiple Values]' scope='rows' value='#Passes' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1nw41i212p7cem1cc3opa1ctynt3].[:Measure Names]' />
              <text column='[federated.1nw41i212p7cem1cc3opa1ctynt3].[sum:24-Hour Passes Purchased (midnight to 11:59 pm):qk]' />
              <text column='[federated.1nw41i212p7cem1cc3opa1ctynt3].[sum:3-Day Passes Purchased (midnight to 11:59 pm):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='has-stroke' value='true' />
                <format attr='stroke-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1nw41i212p7cem1cc3opa1ctynt3].[Multiple Values]</rows>
        <cols>([federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok] / [federated.1nw41i212p7cem1cc3opa1ctynt3].[:Measure Names])</cols>
      </table>
      <simple-id uuid='{662B34A5-771D-4056-8EBB-428BDFDFBA8C}' />
    </worksheet>
    <worksheet name='Avg Trips per day'>
      <table>
        <view>
          <datasources>
            <datasource caption='RM_data' name='federated.1nw41i212p7cem1cc3opa1ctynt3' />
          </datasources>
          <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
            <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[Trips over the past 24-hours (midnight to 11:59pm)]' role='measure' type='quantitative' />
            <column-instance column='[Trips over the past 24-hours (midnight to 11:59pm)]' derivation='Avg' name='[avg:Trips over the past 24-hours (midnight to 11:59pm):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1nw41i212p7cem1cc3opa1ctynt3].[avg:Trips over the past 24-hours (midnight to 11:59pm):qk]' scope='rows' value='Avg #Trips per day' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <text column='[federated.1nw41i212p7cem1cc3opa1ctynt3].[avg:Trips over the past 24-hours (midnight to 11:59pm):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1nw41i212p7cem1cc3opa1ctynt3].[avg:Trips over the past 24-hours (midnight to 11:59pm):qk]</rows>
        <cols>[federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok]</cols>
      </table>
      <simple-id uuid='{290B645C-C805-4461-B6DA-13BD7173429B}' />
    </worksheet>
    <worksheet name='AvgTripmilesPerDay'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Avg Trip miles highest on Wednesdays followed by Thursdays &amp; Saturdays</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='RM_data' name='federated.1nw41i212p7cem1cc3opa1ctynt3' />
          </datasources>
          <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
            <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[Miles traveled today (midnight to 11:59 pm)]' role='measure' type='quantitative' />
            <column-instance column='[Miles traveled today (midnight to 11:59 pm)]' derivation='Avg' name='[avg:Miles traveled today (midnight to 11:59 pm):ok]' pivot='key' type='ordinal' />
            <column-instance column='[Miles traveled today (midnight to 11:59 pm)]' derivation='Avg' name='[avg:Miles traveled today (midnight to 11:59 pm):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='Weekday' name='[wd:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1nw41i212p7cem1cc3opa1ctynt3].[avg:Miles traveled today (midnight to 11:59 pm):qk]' scope='rows' value='Avg Trip Miles' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1nw41i212p7cem1cc3opa1ctynt3].[avg:Miles traveled today (midnight to 11:59 pm):ok]' />
              <text column='[federated.1nw41i212p7cem1cc3opa1ctynt3].[avg:Miles traveled today (midnight to 11:59 pm):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1nw41i212p7cem1cc3opa1ctynt3].[avg:Miles traveled today (midnight to 11:59 pm):qk]</rows>
        <cols>[federated.1nw41i212p7cem1cc3opa1ctynt3].[wd:Date:ok]</cols>
      </table>
      <simple-id uuid='{97087E4C-34AC-4B7D-ADDF-966FEE7966E4}' />
    </worksheet>
    <worksheet name='AvgTripmilesPermonth'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Trip mileage increases during summer months as expected</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='RM_data' name='federated.1nw41i212p7cem1cc3opa1ctynt3' />
          </datasources>
          <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
            <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[Miles traveled today (midnight to 11:59 pm)]' role='measure' type='quantitative' />
            <column-instance column='[Miles traveled today (midnight to 11:59 pm)]' derivation='Avg' name='[avg:Miles traveled today (midnight to 11:59 pm):ok]' pivot='key' type='ordinal' />
            <column-instance column='[Miles traveled today (midnight to 11:59 pm)]' derivation='Avg' name='[avg:Miles traveled today (midnight to 11:59 pm):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Month' name='[mn:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1nw41i212p7cem1cc3opa1ctynt3].[avg:Miles traveled today (midnight to 11:59 pm):qk]' scope='rows' value='Avg trip miles' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1nw41i212p7cem1cc3opa1ctynt3].[avg:Miles traveled today (midnight to 11:59 pm):ok]' />
              <text column='[federated.1nw41i212p7cem1cc3opa1ctynt3].[avg:Miles traveled today (midnight to 11:59 pm):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1nw41i212p7cem1cc3opa1ctynt3].[avg:Miles traveled today (midnight to 11:59 pm):qk]</rows>
        <cols>[federated.1nw41i212p7cem1cc3opa1ctynt3].[mn:Date:ok]</cols>
      </table>
      <simple-id uuid='{B7EA03DE-4EB3-4585-AB3A-ADFEF216F4FF}' />
    </worksheet>
    <worksheet name='Bikes Due for inspection'>
      <table>
        <view>
          <datasources>
            <datasource caption='data' name='federated.1klxzo30gxr1s9179gc7d0gb3tuz' />
            <datasource caption='RM_data' name='federated.1nw41i212p7cem1cc3opa1ctynt3' />
          </datasources>
          <datasource-dependencies datasource='federated.1klxzo30gxr1s9179gc7d0gb3tuz'>
            <column caption='Num of trips' datatype='integer' name='[Start Station Id (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[start station id]' />
            </column>
            <column aggregation='Sum' caption='Bikeid' datatype='integer' name='[bikeid]' role='dimension' type='ordinal' />
            <column-instance column='[Start Station Id (copy)]' derivation='Count' name='[cnt:Start Station Id (copy):qk]' pivot='key' type='quantitative' />
            <column-instance column='[bikeid]' derivation='None' name='[none:bikeid:ok]' pivot='key' type='ordinal' />
            <column caption='Start Station Id' datatype='integer' name='[start station id]' role='measure' type='quantitative' />
            <column caption='Starttime' datatype='datetime' name='[starttime]' role='dimension' type='ordinal' />
            <column-instance column='[tripduration]' derivation='Sum' name='[sum:tripduration:qk]' pivot='key' type='quantitative' />
            <column caption='Tripduration' datatype='integer' name='[tripduration]' role='measure' type='quantitative' />
            <column-instance column='[starttime]' derivation='Year' name='[yr:starttime:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
            <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:bikeid:ok]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[sum:tripduration:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[sum:tripduration:qk]' />
              <text column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:Start Station Id (copy):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:bikeid:ok]</rows>
        <cols />
      </table>
      <simple-id uuid='{205FB60C-A7B6-4340-A8F1-3BCBE96B215B}' />
    </worksheet>
    <worksheet name='Bottom10deststations'>
      <table>
        <view>
          <datasources>
            <datasource caption='data' name='federated.1klxzo30gxr1s9179gc7d0gb3tuz' />
            <datasource caption='RM_data' name='federated.1nw41i212p7cem1cc3opa1ctynt3' />
          </datasources>
          <datasource-dependencies datasource='federated.1klxzo30gxr1s9179gc7d0gb3tuz'>
            <column caption='Today' datatype='string' name='[Starttime (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [starttime])) = 5) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [starttime])) = 31) and ((DATEPART(&apos;year&apos;, [starttime])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Season' datatype='string' name='[Starttime (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [starttime])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [starttime])) = 1) or ((DATEPART(&apos;month&apos;, [starttime])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [starttime])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 6) or ((DATEPART(&apos;month&apos;, [starttime])) = 7) or ((DATEPART(&apos;month&apos;, [starttime])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) =10) or ((DATEPART(&apos;month&apos;, [starttime])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column-instance column='[end station id]' derivation='Count' name='[cnt:end station id:qk]' pivot='key' type='quantitative' />
            <column-instance column='[start station id]' derivation='Count' name='[cnt:start station id:qk]' pivot='key' type='quantitative' />
            <column caption='End Station Id' datatype='integer' name='[end station id]' role='measure' type='quantitative' />
            <column caption='End Station Name' datatype='string' name='[end station name]' role='dimension' type='nominal' />
            <column-instance column='[Starttime (copy 2)]' derivation='None' name='[none:Starttime (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Starttime (copy)]' derivation='None' name='[none:Starttime (copy):nk]' pivot='key' type='nominal' />
            <column-instance column='[end station name]' derivation='None' name='[none:end station name:nk]' pivot='key' type='nominal' />
            <column caption='Start Station Id' datatype='integer' name='[start station id]' role='measure' type='quantitative' />
            <column caption='Starttime' datatype='datetime' name='[starttime]' role='dimension' type='ordinal' />
            <column-instance column='[starttime]' derivation='Year' name='[yr:starttime:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
            <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):nk]'>
            <groupfilter function='level-members' level='[none:Starttime (copy 2):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):nk]'>
            <groupfilter from='&quot;Fall&quot;' function='range' level='[none:Starttime (copy):nk]' to='&quot;Winter&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:end station name:nk]'>
            <groupfilter count='10' end='bottom' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNT([end station id])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:end station name:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:end station name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:end station id:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:end station name:nk]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):nk]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):nk]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:end station id:qk]' scope='cols' value='#Trips' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:start station id:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='has-stroke' value='true' />
                <format attr='stroke-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:end station name:nk]</rows>
        <cols>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:end station id:qk]</cols>
      </table>
      <simple-id uuid='{A3D8B126-EB5A-4C5E-8C5A-15C92350F1F0}' />
    </worksheet>
    <worksheet name='Bottom10originstations'>
      <table>
        <view>
          <datasources>
            <datasource caption='data' name='federated.1klxzo30gxr1s9179gc7d0gb3tuz' />
            <datasource caption='RM_data' name='federated.1nw41i212p7cem1cc3opa1ctynt3' />
          </datasources>
          <datasource-dependencies datasource='federated.1klxzo30gxr1s9179gc7d0gb3tuz'>
            <column caption='Today' datatype='string' name='[Starttime (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [starttime])) = 5) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [starttime])) = 31) and ((DATEPART(&apos;year&apos;, [starttime])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Season' datatype='string' name='[Starttime (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [starttime])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [starttime])) = 1) or ((DATEPART(&apos;month&apos;, [starttime])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [starttime])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 6) or ((DATEPART(&apos;month&apos;, [starttime])) = 7) or ((DATEPART(&apos;month&apos;, [starttime])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) =10) or ((DATEPART(&apos;month&apos;, [starttime])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column-instance column='[start station id]' derivation='Count' name='[cnt:start station id:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Starttime (copy 2)]' derivation='None' name='[none:Starttime (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Starttime (copy)]' derivation='None' name='[none:Starttime (copy):nk]' pivot='key' type='nominal' />
            <column-instance column='[start station name]' derivation='None' name='[none:start station name:nk]' pivot='key' type='nominal' />
            <column caption='Start Station Id' datatype='integer' name='[start station id]' role='measure' type='quantitative' />
            <column caption='Start Station Name' datatype='string' name='[start station name]' role='dimension' type='nominal' />
            <column caption='Starttime' datatype='datetime' name='[starttime]' role='dimension' type='ordinal' />
            <column-instance column='[starttime]' derivation='Year' name='[yr:starttime:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
            <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):nk]'>
            <groupfilter function='level-members' level='[none:Starttime (copy 2):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):nk]'>
            <groupfilter function='level-members' level='[none:Starttime (copy):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:start station name:nk]'>
            <groupfilter count='10' end='bottom' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNT([start station id])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:start station name:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:start station name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:start station id:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:start station name:nk]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):nk]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:start station id:qk]' scope='cols' value='#Trips' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:start station id:qk]' />
            </encodings>
            <style>
              <style-rule element='cell'>
                <format attr='wrap' value='on' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#4e79a7' />
                <format attr='has-stroke' value='true' />
                <format attr='stroke-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:start station name:nk]</rows>
        <cols>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:start station id:qk]</cols>
      </table>
      <simple-id uuid='{D3408D99-BC7B-48FA-8FDA-8FD3888E8866}' />
    </worksheet>
    <worksheet name='Gender-Age Statistcs'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Majority of citi bike riders are male and we see an increase in female &amp; male riders over the years</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='data' name='federated.1klxzo30gxr1s9179gc7d0gb3tuz' />
            <datasource caption='RM_data' name='federated.1nw41i212p7cem1cc3opa1ctynt3' />
          </datasources>
          <datasource-dependencies datasource='federated.1klxzo30gxr1s9179gc7d0gb3tuz'>
            <column caption='Num of trips' datatype='integer' name='[Start Station Id (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[start station id]' />
            </column>
            <column caption='Today' datatype='string' name='[Starttime (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [starttime])) = 5) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [starttime])) = 31) and ((DATEPART(&apos;year&apos;, [starttime])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column-instance column='[Start Station Id (copy)]' derivation='Count' name='[cnt:Start Station Id (copy):qk]' pivot='key' type='quantitative' />
            <column aggregation='Sum' caption='Gender' datatype='integer' name='[gender]' role='dimension' type='ordinal'>
              <aliases>
                <alias key='0' value='Unidentified' />
                <alias key='1' value='Male' />
                <alias key='2' value='Female' />
              </aliases>
            </column>
            <column-instance column='[Starttime (copy 2)]' derivation='None' name='[none:Starttime (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[gender]' derivation='None' name='[none:gender:ok]' pivot='key' type='ordinal' />
            <column caption='Start Station Id' datatype='integer' name='[start station id]' role='measure' type='quantitative' />
            <column caption='Starttime' datatype='datetime' name='[starttime]' role='dimension' type='ordinal' />
            <column-instance column='[starttime]' derivation='Year' name='[yr:starttime:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
            <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):nk]'>
            <groupfilter function='level-members' level='[none:Starttime (copy 2):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]'>
            <groupfilter from='0' function='range' level='[none:gender:ok]' to='2' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:Start Station Id (copy):qk]' scope='rows' value='# Trips' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]' />
              <text column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:Start Station Id (copy):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:Start Station Id (copy):qk]</rows>
        <cols>([federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok] / [federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok])</cols>
      </table>
      <simple-id uuid='{1C504E40-FFD7-4811-8EA0-CB31BEBC27F0}' />
    </worksheet>
    <worksheet name='Months Vs Bikers'>
      <table>
        <view>
          <datasources>
            <datasource caption='data' name='federated.1klxzo30gxr1s9179gc7d0gb3tuz' />
            <datasource caption='RM_data' name='federated.1nw41i212p7cem1cc3opa1ctynt3' />
          </datasources>
          <datasource-dependencies datasource='federated.1klxzo30gxr1s9179gc7d0gb3tuz'>
            <column aggregation='Sum' caption='Bikeid' datatype='integer' name='[bikeid]' role='dimension' type='ordinal' />
            <column-instance column='[bikeid]' derivation='CountD' name='[ctd:bikeid:qk]' pivot='key' type='quantitative' />
            <column aggregation='Sum' caption='Gender' datatype='integer' name='[gender]' role='dimension' type='ordinal'>
              <aliases>
                <alias key='0' value='Unidentified' />
                <alias key='1' value='Male' />
                <alias key='2' value='Female' />
              </aliases>
            </column>
            <column-instance column='[starttime]' derivation='Month' name='[mn:starttime:ok]' pivot='key' type='ordinal' />
            <column-instance column='[gender]' derivation='None' name='[none:gender:ok]' pivot='key' type='ordinal' />
            <column-instance column='[usertype]' derivation='None' name='[none:usertype:nk]' pivot='key' type='nominal' />
            <column caption='Starttime' datatype='datetime' name='[starttime]' role='dimension' type='ordinal' />
            <column caption='Usertype' datatype='string' name='[usertype]' role='dimension' type='nominal' />
            <column-instance column='[starttime]' derivation='Year' name='[yr:starttime:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
            <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]'>
            <groupfilter from='0' function='range' level='[none:gender:ok]' to='2' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:usertype:nk]' />
              <lod column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[ctd:bikeid:qk]' />
              <text column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:usertype:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[ctd:bikeid:qk]</rows>
        <cols>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[mn:starttime:ok]</cols>
      </table>
      <simple-id uuid='{0DE56758-2164-4324-9A35-FBEA19889AB2}' />
    </worksheet>
    <worksheet name='Sheet 2'>
      <table>
        <view>
          <datasources>
            <datasource caption='data' name='federated.1klxzo30gxr1s9179gc7d0gb3tuz' />
            <datasource caption='RM_data' name='federated.1nw41i212p7cem1cc3opa1ctynt3' />
          </datasources>
          <datasource-dependencies datasource='federated.1klxzo30gxr1s9179gc7d0gb3tuz'>
            <column aggregation='Sum' caption='Gender' datatype='integer' name='[gender]' role='dimension' type='ordinal'>
              <aliases>
                <alias key='0' value='Unidentified' />
                <alias key='1' value='Male' />
                <alias key='2' value='Female' />
              </aliases>
            </column>
            <column-instance column='[gender]' derivation='None' name='[none:gender:ok]' pivot='key' type='ordinal' />
            <column caption='Starttime' datatype='datetime' name='[starttime]' role='dimension' type='ordinal' />
            <column-instance column='[tripduration]' derivation='Sum' name='[sum:tripduration:qk]' pivot='key' type='quantitative' />
            <column caption='Tripduration' datatype='integer' name='[tripduration]' role='measure' type='quantitative' />
            <column-instance column='[starttime]' derivation='Weekday' name='[wd:starttime:ok]' pivot='key' type='ordinal' />
            <column-instance column='[starttime]' derivation='Year' name='[yr:starttime:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
            <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:gender:ok]' member='1' />
              <groupfilter function='member' level='[none:gender:ok]' member='2' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[sum:tripduration:qk]</rows>
        <cols>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[wd:starttime:ok]</cols>
      </table>
      <simple-id uuid='{5BB9F474-C385-4BF7-92F1-42DBC18D3662}' />
    </worksheet>
    <worksheet name='Sheet 25'>
      <table>
        <view>
          <datasources />
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{BA04E95E-08CB-429D-A8B7-BDFDD08EF9E3}' />
    </worksheet>
    <worksheet name='Today-#Trips &amp; End Stations'>
      <table>
        <view>
          <datasources>
            <datasource caption='data' name='federated.1klxzo30gxr1s9179gc7d0gb3tuz' />
            <datasource caption='RM_data' name='federated.1nw41i212p7cem1cc3opa1ctynt3' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1klxzo30gxr1s9179gc7d0gb3tuz'>
            <column caption='Num of trips' datatype='integer' name='[Start Station Id (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[start station id]' />
            </column>
            <column caption='Today' datatype='string' name='[Starttime (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [starttime])) = 5) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [starttime])) = 31) and ((DATEPART(&apos;year&apos;, [starttime])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column-instance column='[Start Station Id (copy)]' derivation='Count' name='[cnt:Start Station Id (copy):qk]' pivot='key' type='quantitative' />
            <column aggregation='Avg' caption='End Station Latitude' datatype='real' name='[end station latitude]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative' />
            <column aggregation='Avg' caption='End Station Longitude' datatype='real' name='[end station longitude]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative' />
            <column caption='End Station Name' datatype='string' name='[end station name]' role='dimension' type='nominal' />
            <column-instance column='[Starttime (copy 2)]' derivation='None' name='[none:Starttime (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[end station latitude]' derivation='None' name='[none:end station latitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[end station longitude]' derivation='None' name='[none:end station longitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[end station name]' derivation='None' name='[none:end station name:nk]' pivot='key' type='nominal' />
            <column caption='Start Station Id' datatype='integer' name='[start station id]' role='measure' type='quantitative' />
            <column caption='Starttime' datatype='datetime' name='[starttime]' role='dimension' type='ordinal' />
            <column-instance column='[starttime]' derivation='Year' name='[yr:starttime:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
            <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):nk]'>
            <groupfilter function='member' level='[none:Starttime (copy 2):nk]' member='&quot;Today&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):nk]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='Zip Code Boundaries' value='true' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:Start Station Id (copy):qk]' />
              <text column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:end station name:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:end station latitude:qk]</rows>
        <cols>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:end station longitude:qk]</cols>
      </table>
      <simple-id uuid='{F6684C20-EA44-4F28-944F-22805BE7C9A7}' />
    </worksheet>
    <worksheet name='Today-#Trips &amp; Start Stations'>
      <table>
        <view>
          <datasources>
            <datasource caption='data' name='federated.1klxzo30gxr1s9179gc7d0gb3tuz' />
            <datasource caption='RM_data' name='federated.1nw41i212p7cem1cc3opa1ctynt3' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1klxzo30gxr1s9179gc7d0gb3tuz'>
            <column caption='Num of trips' datatype='integer' name='[Start Station Id (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[start station id]' />
            </column>
            <column caption='Today' datatype='string' name='[Starttime (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [starttime])) = 5) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [starttime])) = 31) and ((DATEPART(&apos;year&apos;, [starttime])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column-instance column='[Start Station Id (copy)]' derivation='Count' name='[cnt:Start Station Id (copy):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Starttime (copy 2)]' derivation='None' name='[none:Starttime (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[start station latitude]' derivation='None' name='[none:start station latitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[start station longitude]' derivation='None' name='[none:start station longitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[start station name]' derivation='None' name='[none:start station name:nk]' pivot='key' type='nominal' />
            <column caption='Start Station Id' datatype='integer' name='[start station id]' role='measure' type='quantitative' />
            <column aggregation='Avg' caption='Start Station Latitude' datatype='real' name='[start station latitude]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative' />
            <column aggregation='Avg' caption='Start Station Longitude' datatype='real' name='[start station longitude]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative' />
            <column caption='Start Station Name' datatype='string' name='[start station name]' role='dimension' type='nominal' />
            <column caption='Starttime' datatype='datetime' name='[starttime]' role='dimension' type='ordinal' />
            <column-instance column='[starttime]' derivation='Year' name='[yr:starttime:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
            <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):nk]'>
            <groupfilter function='member' level='[none:Starttime (copy 2):nk]' member='&quot;Today&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):nk]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='Zip Code Boundaries' value='true' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:Start Station Id (copy):qk]' />
              <text column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:start station name:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:start station latitude:qk]</rows>
        <cols>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:start station longitude:qk]</cols>
      </table>
      <simple-id uuid='{94076D90-3E81-45C7-A168-4B2AF88134BF}' />
    </worksheet>
    <worksheet name='Top10deststations'>
      <table>
        <view>
          <datasources>
            <datasource caption='data' name='federated.1klxzo30gxr1s9179gc7d0gb3tuz' />
            <datasource caption='RM_data' name='federated.1nw41i212p7cem1cc3opa1ctynt3' />
          </datasources>
          <datasource-dependencies datasource='federated.1klxzo30gxr1s9179gc7d0gb3tuz'>
            <column caption='Today' datatype='string' name='[Starttime (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [starttime])) = 5) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [starttime])) = 31) and ((DATEPART(&apos;year&apos;, [starttime])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Season' datatype='string' name='[Starttime (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [starttime])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [starttime])) = 1) or ((DATEPART(&apos;month&apos;, [starttime])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [starttime])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 6) or ((DATEPART(&apos;month&apos;, [starttime])) = 7) or ((DATEPART(&apos;month&apos;, [starttime])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) =10) or ((DATEPART(&apos;month&apos;, [starttime])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column aggregation='Sum' caption='Bikeid' datatype='integer' name='[bikeid]' role='dimension' type='ordinal' />
            <column-instance column='[end station id]' derivation='Count' name='[cnt:end station id:qk]' pivot='key' type='quantitative' />
            <column-instance column='[start station id]' derivation='Count' name='[cnt:start station id:qk]' pivot='key' type='quantitative' />
            <column caption='End Station Id' datatype='integer' name='[end station id]' role='measure' type='quantitative' />
            <column caption='End Station Name' datatype='string' name='[end station name]' role='dimension' type='nominal' />
            <column-instance column='[Starttime (copy 2)]' derivation='None' name='[none:Starttime (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Starttime (copy)]' derivation='None' name='[none:Starttime (copy):nk]' pivot='key' type='nominal' />
            <column-instance column='[end station name]' derivation='None' name='[none:end station name:nk]' pivot='key' type='nominal' />
            <column caption='Start Station Id' datatype='integer' name='[start station id]' role='measure' type='quantitative' />
            <column caption='Starttime' datatype='datetime' name='[starttime]' role='dimension' type='ordinal' />
            <column-instance column='[starttime]' derivation='Year' name='[yr:starttime:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
            <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):nk]'>
            <groupfilter function='level-members' level='[none:Starttime (copy 2):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):nk]'>
            <groupfilter function='level-members' level='[none:Starttime (copy):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:end station name:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([bikeid])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:end station name:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:end station name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:end station id:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:end station name:nk]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):nk]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:end station id:qk]' scope='cols' value='#Trips' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:start station id:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:end station name:nk]</rows>
        <cols>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:end station id:qk]</cols>
      </table>
      <simple-id uuid='{57A85B16-952D-4005-B5DF-A17216EDD754}' />
    </worksheet>
    <worksheet name='Top10originstations'>
      <table>
        <view>
          <datasources>
            <datasource caption='data' name='federated.1klxzo30gxr1s9179gc7d0gb3tuz' />
            <datasource caption='RM_data' name='federated.1nw41i212p7cem1cc3opa1ctynt3' />
          </datasources>
          <datasource-dependencies datasource='federated.1klxzo30gxr1s9179gc7d0gb3tuz'>
            <column caption='Today' datatype='string' name='[Starttime (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [starttime])) = 5) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [starttime])) = 31) and ((DATEPART(&apos;year&apos;, [starttime])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Season' datatype='string' name='[Starttime (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [starttime])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [starttime])) = 1) or ((DATEPART(&apos;month&apos;, [starttime])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [starttime])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 6) or ((DATEPART(&apos;month&apos;, [starttime])) = 7) or ((DATEPART(&apos;month&apos;, [starttime])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) =10) or ((DATEPART(&apos;month&apos;, [starttime])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column-instance column='[start station id]' derivation='Count' name='[cnt:start station id:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Starttime (copy 2)]' derivation='None' name='[none:Starttime (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Starttime (copy)]' derivation='None' name='[none:Starttime (copy):nk]' pivot='key' type='nominal' />
            <column-instance column='[start station name]' derivation='None' name='[none:start station name:nk]' pivot='key' type='nominal' />
            <column caption='Start Station Id' datatype='integer' name='[start station id]' role='measure' type='quantitative' />
            <column caption='Start Station Name' datatype='string' name='[start station name]' role='dimension' type='nominal' />
            <column caption='Starttime' datatype='datetime' name='[starttime]' role='dimension' type='ordinal' />
            <column-instance column='[starttime]' derivation='Year' name='[yr:starttime:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
            <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):nk]'>
            <groupfilter function='level-members' level='[none:Starttime (copy 2):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):nk]'>
            <groupfilter function='level-members' level='[none:Starttime (copy):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:start station name:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNT([start station id])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:start station name:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:start station name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:start station id:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:start station name:nk]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):nk]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:start station id:qk]' scope='cols' value='#Trips' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]' value='YEAR'>
              <formatted-text>
                <run>YEAR</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:start station id:qk]' />
            </encodings>
            <style>
              <style-rule element='cell'>
                <format attr='wrap' value='on' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#f28e2b' />
                <format attr='has-stroke' value='true' />
                <format attr='stroke-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:start station name:nk]</rows>
        <cols>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:start station id:qk]</cols>
      </table>
      <simple-id uuid='{032DC5C6-7B96-47C3-9D42-C2BDF3274989}' />
    </worksheet>
    <worksheet name='Trips&amp;Riders'>
      <layout-options>
        <title>
          <formatted-text>
            <run># Trips increased over the past 3 years &amp; # Riders reduced in 2018 butis trended to an increase in 2019</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='data' name='federated.1klxzo30gxr1s9179gc7d0gb3tuz' />
            <datasource caption='RM_data' name='federated.1nw41i212p7cem1cc3opa1ctynt3' />
          </datasources>
          <datasource-dependencies datasource='federated.1klxzo30gxr1s9179gc7d0gb3tuz'>
            <column aggregation='Sum' caption='Bikeid' datatype='integer' name='[bikeid]' role='dimension' type='ordinal' />
            <column-instance column='[start station id]' derivation='Count' name='[cnt:start station id:qk]' pivot='key' type='quantitative' />
            <column-instance column='[bikeid]' derivation='CountD' name='[ctd:bikeid:qk]' pivot='key' type='quantitative' />
            <column-instance column='[bikeid]' derivation='CountD' name='[pcdf:ctd:bikeid:ok]' pivot='key' type='ordinal'>
              <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
                <address>
                  <value>-1</value>
                </address>
              </table-calc>
            </column-instance>
            <column caption='Start Station Id' datatype='integer' name='[start station id]' role='measure' type='quantitative' />
            <column caption='Starttime' datatype='datetime' name='[starttime]' role='dimension' type='ordinal' />
            <column-instance column='[starttime]' derivation='Year-Trunc' name='[tyr:starttime:qk]' pivot='key' type='quantitative' />
            <column-instance column='[starttime]' derivation='Year' name='[yr:starttime:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
            <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[ctd:bikeid:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
            <format attr='title' class='0' field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:start station id:qk]' scope='rows' value='# Trips' />
            <format attr='title' class='0' field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[ctd:bikeid:qk]' scope='rows' value='# Riders' />
            <format attr='title' class='0' field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[tyr:starttime:qk]' scope='cols' value='' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[pcdf:ctd:bikeid:ok]' value='p0.0%' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[pcdf:ctd:bikeid:ok]' value='p0.0%' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]' value='YEAR' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[ctd:bikeid:qk]' />
              <text column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[pcdf:ctd:bikeid:ok]' />
              <text column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:start station id:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:start station id:qk]'>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Bar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[:Measure Names]' />
              <text column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[ctd:bikeid:qk]' />
              <text column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[pcdf:ctd:bikeid:ok]' />
              <text column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:start station id:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[ctd:bikeid:qk]'>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[:Measure Names]' />
              <text column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[ctd:bikeid:qk]' />
              <text column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[pcdf:ctd:bikeid:ok]' />
              <text column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:start station id:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:start station id:qk] + [federated.1klxzo30gxr1s9179gc7d0gb3tuz].[ctd:bikeid:qk])</rows>
        <cols>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[tyr:starttime:qk]</cols>
      </table>
      <simple-id uuid='{EB69272E-2A14-4F3F-83AC-AAA45213C4BB}' />
    </worksheet>
    <worksheet name='Tripsbyhour'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Peak morning hrs is between 07am to 09am &amp; evening hrs between 5pm to 7pm</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='data' name='federated.1klxzo30gxr1s9179gc7d0gb3tuz' />
            <datasource caption='RM_data' name='federated.1nw41i212p7cem1cc3opa1ctynt3' />
          </datasources>
          <datasource-dependencies datasource='federated.1klxzo30gxr1s9179gc7d0gb3tuz'>
            <column caption='Season' datatype='string' name='[Starttime (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [starttime])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [starttime])) = 1) or ((DATEPART(&apos;month&apos;, [starttime])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [starttime])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 6) or ((DATEPART(&apos;month&apos;, [starttime])) = 7) or ((DATEPART(&apos;month&apos;, [starttime])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) =10) or ((DATEPART(&apos;month&apos;, [starttime])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column-instance column='[start station id]' derivation='Count' name='[cnt:start station id:qk]' pivot='key' type='quantitative' />
            <column-instance column='[starttime]' derivation='Hour' name='[hr:starttime:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Starttime (copy)]' derivation='None' name='[none:Starttime (copy):nk]' pivot='key' type='nominal' />
            <column caption='Start Station Id' datatype='integer' name='[start station id]' role='measure' type='quantitative' />
            <column caption='Starttime' datatype='datetime' name='[starttime]' role='dimension' type='ordinal' />
            <column-instance column='[start station id]' derivation='Count' name='[win:cnt:start station id:qk:28]' pivot='key' type='quantitative'>
              <table-calc aggregation='Avg' from='0' ordering-field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[hr:starttime:ok]' ordering-type='Field' to='24' type='WindowTotal' window-options='IncludeCurrent' />
            </column-instance>
            <column-instance column='[starttime]' derivation='Year' name='[yr:starttime:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
            <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):nk]'>
            <groupfilter function='level-members' level='[none:Starttime (copy):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:28]' included-values='in-range'>
            <min>13224.0</min>
          </filter>
          <slices>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):nk]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:28]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:start station id:qk]' scope='rows' value='# Trips' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[hr:starttime:ok]' value='iHH' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:start station id:qk]' palette='orange_10_0' type='interpolated' />
            <encoding attr='color' field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:28]' palette='orange_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:28]' value='#trips'>
              <formatted-text>
                <run>#trips</run>
              </formatted-text>
            </format>
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:28]' value='#Trips'>
              <formatted-text>
                <run>#Trips</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:28]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:start station id:qk]</rows>
        <cols>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[hr:starttime:ok]</cols>
      </table>
      <simple-id uuid='{43532163-88F4-4910-B910-F68C0251169D}' />
    </worksheet>
    <worksheet name='Tripsbymonths'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Max trips taken in August followed by October &amp; July</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='data' name='federated.1klxzo30gxr1s9179gc7d0gb3tuz' />
            <datasource caption='RM_data' name='federated.1nw41i212p7cem1cc3opa1ctynt3' />
          </datasources>
          <datasource-dependencies datasource='federated.1klxzo30gxr1s9179gc7d0gb3tuz'>
            <column caption='Num of trips' datatype='integer' name='[Start Station Id (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[start station id]' />
            </column>
            <column caption='Season' datatype='string' name='[Starttime (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [starttime])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [starttime])) = 1) or ((DATEPART(&apos;month&apos;, [starttime])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [starttime])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 6) or ((DATEPART(&apos;month&apos;, [starttime])) = 7) or ((DATEPART(&apos;month&apos;, [starttime])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) =10) or ((DATEPART(&apos;month&apos;, [starttime])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column-instance column='[Start Station Id (copy)]' derivation='Count' name='[cnt:Start Station Id (copy):qk]' pivot='key' type='quantitative' />
            <column-instance column='[starttime]' derivation='Hour' name='[hr:starttime:ok]' pivot='key' type='ordinal' />
            <column-instance column='[starttime]' derivation='Month' name='[mn:starttime:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Starttime (copy)]' derivation='None' name='[none:Starttime (copy):nk]' pivot='key' type='nominal' />
            <column caption='Start Station Id' datatype='integer' name='[start station id]' role='measure' type='quantitative' />
            <column caption='Starttime' datatype='datetime' name='[starttime]' role='dimension' type='ordinal' />
            <column-instance column='[starttime]' derivation='Year' name='[yr:starttime:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
            <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):nk]'>
            <groupfilter function='level-members' level='[none:Starttime (copy):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):nk]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:Start Station Id (copy):qk]' scope='rows' value='#trips' />
            <format attr='title' class='0' field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[mn:starttime:qk]' scope='cols' value='Months' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[hr:starttime:ok]' value='iHH' />
            <format attr='text-format' field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[mn:starttime:qk]' value='iLLL' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <text column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:Start Station Id (copy):qk]' />
              <lod column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#55ff00' />
                <format attr='mark-transparency' value='129' />
                <format attr='has-stroke' value='true' />
                <format attr='stroke-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:Start Station Id (copy):qk]</rows>
        <cols>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[mn:starttime:qk]</cols>
      </table>
      <simple-id uuid='{7E59BAA1-F2FB-481C-8851-FB36F2D36BA8}' />
    </worksheet>
    <worksheet name='Tripsbyseasons'>
      <table>
        <view>
          <datasources>
            <datasource caption='data' name='federated.1klxzo30gxr1s9179gc7d0gb3tuz' />
            <datasource caption='RM_data' name='federated.1nw41i212p7cem1cc3opa1ctynt3' />
          </datasources>
          <datasource-dependencies datasource='federated.1klxzo30gxr1s9179gc7d0gb3tuz'>
            <column caption='Num of trips' datatype='integer' name='[Start Station Id (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[start station id]' />
            </column>
            <column caption='Season' datatype='string' name='[Starttime (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [starttime])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [starttime])) = 1) or ((DATEPART(&apos;month&apos;, [starttime])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [starttime])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 6) or ((DATEPART(&apos;month&apos;, [starttime])) = 7) or ((DATEPART(&apos;month&apos;, [starttime])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [starttime])) =10) or ((DATEPART(&apos;month&apos;, [starttime])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column-instance column='[Start Station Id (copy)]' derivation='Count' name='[cnt:Start Station Id (copy):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Starttime (copy)]' derivation='None' name='[none:Starttime (copy):nk]' pivot='key' type='nominal' />
            <column caption='Start Station Id' datatype='integer' name='[start station id]' role='measure' type='quantitative' />
            <column caption='Starttime' datatype='datetime' name='[starttime]' role='dimension' type='ordinal' />
            <column-instance column='[starttime]' derivation='Year' name='[yr:starttime:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
            <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
            <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):nk]'>
            <groupfilter function='level-members' level='[none:Starttime (copy):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):nk]</column>
            <column>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</column>
            <column>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <text column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:Start Station Id (copy):qk]' />
              <lod column='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#55ff00' />
                <format attr='mark-transparency' value='129' />
                <format attr='has-stroke' value='true' />
                <format attr='stroke-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:Start Station Id (copy):qk]</rows>
        <cols>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):nk]</cols>
      </table>
      <simple-id uuid='{1427B0EE-C202-4C46-AA9F-4EFBE037314C}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Bike Stations &amp; Traffic'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <datasources>
        <datasource caption='data' name='federated.1klxzo30gxr1s9179gc7d0gb3tuz' />
      </datasources>
      <datasource-dependencies datasource='federated.1klxzo30gxr1s9179gc7d0gb3tuz'>
        <column caption='Starttime' datatype='datetime' name='[starttime]' role='dimension' type='ordinal' />
        <column-instance column='[starttime]' derivation='Year' name='[yr:starttime:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='7' param='horz' type='layout-flow' w='98400' x='800' y='1000'>
            <zone h='98000' id='5' type='layout-basic' w='82800' x='800' y='1000'>
              <zone h='49000' id='3' name='Today-#Trips &amp; Start Stations' w='41400' x='800' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49000' id='9' name='Today-#Trips &amp; End Stations' w='41400' x='42200' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49000' id='10' name='Top10originstations' w='20700' x='800' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49000' id='12' name='Top10deststations' w='20700' x='42200' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49000' id='15' name='Bottom10originstations' w='20700' x='21500' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49000' id='18' name='Bottom10deststations' w='20700' x='62900' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='156' h='98000' id='6' is-fixed='true' param='vert' type='layout-flow' w='15600' x='83600' y='1000'>
              <zone h='16875' id='8' name='Today-#Trips &amp; Start Stations' pane-specification-id='1' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:Start Station Id (copy):qk]' type='size' w='15600' x='83600' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='7625' id='11' mode='checkdropdown' name='Top10originstations' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]' type='filter' w='15600' x='83600' y='17875'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='3750' id='13' mode='checkdropdown' name='Top10deststations' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):ok]' show-morefewerbutton='false' type='filter' w='15600' x='83600' y='25500'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='3750' id='16' mode='checkdropdown' name='Bottom10originstations' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):ok]' show-morefewerbutton='false' type='filter' w='15600' x='83600' y='29250'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
        <zone forceUpdate='true' h='3375' id='25' type='text' w='98300' x='1300' y='96500'>
          <formatted-text>
            <run fontcolor='#000000' italic='true'>Size of bubble represents # trips taken from the start station. Looks like Grove St is the busiest starting station today</run>
          </formatted-text>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='2050' minheight='2050' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='38' type='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='39' param='vert' type='layout-flow' w='98400' x='800' y='1000'>
                <zone fixed-size='280' h='49000' id='3' is-fixed='true' name='Today-#Trips &amp; Start Stations' w='41400' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='16875' id='8' name='Today-#Trips &amp; Start Stations' pane-specification-id='1' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:Start Station Id (copy):qk]' type='size' w='15600' x='83600' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='9' is-fixed='true' name='Today-#Trips &amp; End Stations' w='41400' x='42200' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='7625' id='11' mode='checkdropdown' name='Top10originstations' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]' type='filter' w='15600' x='83600' y='17875'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='10' is-fixed='true' name='Top10originstations' w='20700' x='800' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3750' id='16' mode='checkdropdown' name='Bottom10originstations' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):ok]' show-morefewerbutton='false' type='filter' w='15600' x='83600' y='29250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='15' is-fixed='true' name='Bottom10originstations' w='20700' x='21500' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3750' id='13' mode='checkdropdown' name='Top10deststations' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):ok]' show-morefewerbutton='false' type='filter' w='15600' x='83600' y='25500'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='12' is-fixed='true' name='Top10deststations' w='20700' x='42200' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='18' is-fixed='true' name='Bottom10deststations' w='20700' x='62900' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone forceUpdate='true' h='3375' id='25' type='text' w='98300' x='1300' y='96500'>
                  <formatted-text>
                    <run fontcolor='#000000' italic='true'>Size of bubble represents # trips taken from the start station. Looks like Grove St is the busiest starting station today</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{24D0C448-8186-461A-84E9-EA429C2F6438}' />
    </dashboard>
    <dashboard name='Maintenance &amp; Gender statistics'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <datasources>
        <datasource caption='data' name='federated.1klxzo30gxr1s9179gc7d0gb3tuz' />
      </datasources>
      <datasource-dependencies datasource='federated.1klxzo30gxr1s9179gc7d0gb3tuz'>
        <column aggregation='Sum' caption='Gender' datatype='integer' name='[gender]' role='dimension' type='ordinal'>
          <aliases>
            <alias key='0' value='Unidentified' />
            <alias key='1' value='Male' />
            <alias key='2' value='Female' />
          </aliases>
        </column>
        <column-instance column='[gender]' derivation='None' name='[none:gender:ok]' pivot='key' type='ordinal' />
        <column caption='Starttime' datatype='datetime' name='[starttime]' role='dimension' type='ordinal' />
        <column-instance column='[starttime]' derivation='Year' name='[yr:starttime:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='8' param='horz' type='layout-flow' w='98400' x='800' y='1000'>
            <zone h='98000' id='6' type='layout-basic' w='82400' x='800' y='1000'>
              <zone h='98000' id='3' name='Bikes Due for inspection' w='22100' x='800' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='98000' id='10' name='Gender-Age Statistcs' w='60300' x='22900' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='160' h='98000' id='7' is-fixed='true' param='vert' type='layout-flow' w='16000' x='83200' y='1000'>
              <zone h='7625' id='9' mode='checkdropdown' name='Bikes Due for inspection' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]' type='filter' w='16000' x='83200' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='7625' id='11' mode='checkdropdown' name='Gender-Age Statistcs' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]' type='filter' w='16000' x='83200' y='8625'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='11625' id='12' name='Gender-Age Statistcs' pane-specification-id='1' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]' type='color' w='16000' x='83200' y='16250'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='800' minheight='800' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='15' type='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='16' param='vert' type='layout-flow' w='98400' x='800' y='1000'>
                <zone h='7625' id='9' mode='checkdropdown' name='Bikes Due for inspection' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]' type='filter' w='16000' x='83200' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='98000' id='3' is-fixed='true' name='Bikes Due for inspection' w='22100' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='7625' id='11' mode='checkdropdown' name='Gender-Age Statistcs' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]' type='filter' w='16000' x='83200' y='8625'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='98000' id='10' is-fixed='true' name='Gender-Age Statistcs' w='60300' x='22900' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='11625' id='12' name='Gender-Age Statistcs' pane-specification-id='1' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]' type='color' w='16000' x='83200' y='16250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{60387EF1-8A41-44A9-B07C-2CFA4F62C944}' />
    </dashboard>
    <dashboard name='Passes Purchased'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <datasources>
        <datasource caption='RM_data' name='federated.1nw41i212p7cem1cc3opa1ctynt3' />
      </datasources>
      <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
        <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
        </column>
        <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
        </column>
        <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
        <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
        <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
        <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='10' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='13' param='horz' type='layout-flow' w='98400' x='800' y='1000'>
            <zone h='98000' id='11' type='layout-basic' w='82400' x='800' y='1000'>
              <zone h='27625' id='9' name='#passesperyear' w='82400' x='800' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='39375' id='19' name='#passesperday' w='82400' x='800' y='59625'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='31000' id='17' name='#passespermonth' w='82400' x='800' y='28625'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='160' h='98000' id='12' is-fixed='true' param='vert' type='layout-flow' w='16000' x='83200' y='1000'>
              <zone h='7625' id='14' mode='checkdropdown' name='#passesperyear' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]' type='filter' w='16000' x='83200' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='7625' id='15' mode='checkdropdown' name='#passesperyear' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok]' type='filter' w='16000' x='83200' y='8625'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='7625' id='16' mode='checkdropdown' name='#passesperyear' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]' type='filter' w='16000' x='83200' y='16250'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='7625' id='18' mode='checkdropdown' name='#passespermonth' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[:Measure Names]' type='filter' w='16000' x='83200' y='23875'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1000' minheight='1000' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='26' type='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='27' param='vert' type='layout-flow' w='98400' x='800' y='1000'>
                <zone h='7625' id='14' mode='checkdropdown' name='#passesperyear' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]' type='filter' w='16000' x='83200' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='7625' id='15' mode='checkdropdown' name='#passesperyear' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok]' type='filter' w='16000' x='83200' y='8625'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='7625' id='16' mode='checkdropdown' name='#passesperyear' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]' type='filter' w='16000' x='83200' y='16250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='213' h='27625' id='9' is-fixed='true' name='#passesperyear' w='82400' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='7625' id='18' mode='checkdropdown' name='#passespermonth' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[:Measure Names]' type='filter' w='16000' x='83200' y='23875'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='240' h='31000' id='17' is-fixed='true' name='#passespermonth' w='82400' x='800' y='28625'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='39375' id='19' is-fixed='true' name='#passesperday' w='82400' x='800' y='59625'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{8CF56D11-8AE8-4F5D-A1A2-D19718016188}' />
    </dashboard>
    <dashboard name='Trip statistics'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <datasources>
        <datasource caption='data' name='federated.1klxzo30gxr1s9179gc7d0gb3tuz' />
      </datasources>
      <datasource-dependencies datasource='federated.1klxzo30gxr1s9179gc7d0gb3tuz'>
        <column-instance column='[starttime]' derivation='Hour' name='[hr:starttime:ok]' pivot='key' type='ordinal' />
        <column caption='Start Station Id' datatype='integer' name='[start station id]' role='measure' type='quantitative' />
        <column caption='Starttime' datatype='datetime' name='[starttime]' role='dimension' type='ordinal' />
        <column-instance column='[start station id]' derivation='Count' name='[win:cnt:start station id:qk:28]' pivot='key' type='quantitative'>
          <table-calc aggregation='Avg' from='0' ordering-field='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[hr:starttime:ok]' ordering-type='Field' to='24' type='WindowTotal' window-options='IncludeCurrent' />
        </column-instance>
        <column-instance column='[starttime]' derivation='Year' name='[yr:starttime:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='7' param='horz' type='layout-flow' w='98400' x='800' y='1000'>
            <zone h='98000' id='5' type='layout-basic' w='82400' x='800' y='1000'>
              <zone h='49000' id='3' name='Tripsbymonths' w='41200' x='800' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49000' id='9' name='Tripsbyhour' w='41200' x='42000' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49000' id='14' name='Trips&amp;Riders' w='82400' x='800' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='160' h='98000' id='6' is-fixed='true' param='vert' type='layout-flow' w='16000' x='83200' y='1000'>
              <zone h='3750' id='8' mode='checkdropdown' name='Tripsbymonths' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):ok]' show-morefewerbutton='false' type='filter' w='16000' x='83200' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='9125' id='10' name='Tripsbyhour' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:28]' show-domain='false' show-null-ctrls='false' type='filter' w='16000' x='83200' y='4750'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='3750' id='11' mode='checkdropdown' name='Tripsbyhour' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):ok]' show-morefewerbutton='false' type='filter' w='16000' x='83200' y='13875'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='7625' id='12' mode='checkdropdown' name='Tripsbyhour' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]' type='filter' w='16000' x='83200' y='17625'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='9125' id='13' name='Tripsbyhour' pane-specification-id='0' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:28]' type='color' w='16000' x='83200' y='25250'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1200' minheight='1200' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='29' type='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='30' param='vert' type='layout-flow' w='98400' x='800' y='1000'>
                <zone h='3750' id='8' mode='checkdropdown' name='Tripsbymonths' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):ok]' show-morefewerbutton='false' type='filter' w='16000' x='83200' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='3' is-fixed='true' name='Tripsbymonths' w='41200' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='9125' id='10' name='Tripsbyhour' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:28]' show-domain='false' show-null-ctrls='false' type='filter' w='16000' x='83200' y='4750'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3750' id='11' mode='checkdropdown' name='Tripsbyhour' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):ok]' show-morefewerbutton='false' type='filter' w='16000' x='83200' y='13875'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='7625' id='12' mode='checkdropdown' name='Tripsbyhour' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]' type='filter' w='16000' x='83200' y='17625'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='9' is-fixed='true' name='Tripsbyhour' w='41200' x='42000' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='9125' id='13' name='Tripsbyhour' pane-specification-id='0' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:28]' type='color' w='16000' x='83200' y='25250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='14' is-fixed='true' name='Trips&amp;Riders' w='82400' x='800' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{1BC1E150-55F8-4EA8-823D-D5665CF5E0E1}' />
    </dashboard>
    <dashboard name='Trips&amp;Trip Miles'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <datasources>
        <datasource caption='RM_data' name='federated.1nw41i212p7cem1cc3opa1ctynt3' />
      </datasources>
      <datasource-dependencies datasource='federated.1nw41i212p7cem1cc3opa1ctynt3'>
        <column caption='Season' datatype='string' name='[Date (copy 2)]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 12) or&#13;&#10;&#13;&#10;   ((DATEPART(&apos;month&apos;, [Date])) = 1) or ((DATEPART(&apos;month&apos;, [Date])) = 2) then &apos;Winter&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 3) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 4) or&#13;&#10;&#13;&#10; ((DATEPART(&apos;month&apos;, [Date])) = 5) then &apos;Spring&apos;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 6) or ((DATEPART(&apos;month&apos;, [Date])) = 7) or ((DATEPART(&apos;month&apos;, [Date])) = 8) &#13;&#10; then &apos;Summer&apos;&#13;&#10;&#13;&#10;elseif&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) = 9) or&#13;&#10;&#13;&#10;    ((DATEPART(&apos;month&apos;, [Date])) =10) or ((DATEPART(&apos;month&apos;, [Date])) = 11) then &apos;Fall&apos;&#13;&#10;&#13;&#10;END' />
        </column>
        <column caption='Today' datatype='string' name='[Date (copy)]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='if ((DATEPART(&apos;month&apos;, [Date])) = 6) and&#13;&#10;&#13;&#10;   ((DATEPART(&apos;day&apos;, [Date])) = 10) and ((DATEPART(&apos;year&apos;, [Date])) = 2019) then &apos;Today&apos; else &apos;past&apos;&#13;&#10;&#13;&#10;END' />
        </column>
        <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
        <column-instance column='[Date (copy 2)]' derivation='None' name='[none:Date (copy 2):nk]' pivot='key' type='nominal' />
        <column-instance column='[Date (copy)]' derivation='None' name='[none:Date (copy):nk]' pivot='key' type='nominal' />
        <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='6' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='9' param='horz' type='layout-flow' w='98400' x='800' y='1000'>
            <zone h='98000' id='7' type='layout-basic' w='82400' x='800' y='1000'>
              <zone h='49000' id='5' name='AvgTripmilesPermonth' w='52800' x='800' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='98000' id='13' name='Avg Trips per day' w='29600' x='53600' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49000' id='17' name='AvgTripmilesPerDay' w='52800' x='800' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='160' h='98000' id='8' is-fixed='true' param='vert' type='layout-flow' w='16000' x='83200' y='1000'>
              <zone h='7625' id='10' mode='checkdropdown' name='AvgTripmilesPermonth' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok]' type='filter' w='16000' x='83200' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='7625' id='11' mode='checkdropdown' name='AvgTripmilesPermonth' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]' type='filter' w='16000' x='83200' y='8625'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='7625' id='12' mode='checkdropdown' name='AvgTripmilesPermonth' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]' type='filter' w='16000' x='83200' y='16250'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='3750' id='14' name='Avg Trips per day' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):ok]' show-morefewerbutton='false' type='filter' w='16000' x='83200' y='23875'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='3750' id='16' mode='checkdropdown' name='Avg Trips per day' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):ok]' show-morefewerbutton='false' type='filter' w='16000' x='83200' y='27625'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1200' minheight='1200' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='30' type='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='31' param='vert' type='layout-flow' w='98400' x='800' y='1000'>
                <zone h='7625' id='10' mode='checkdropdown' name='AvgTripmilesPermonth' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok]' type='filter' w='16000' x='83200' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='7625' id='11' mode='checkdropdown' name='AvgTripmilesPermonth' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]' type='filter' w='16000' x='83200' y='8625'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='7625' id='12' mode='checkdropdown' name='AvgTripmilesPermonth' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]' type='filter' w='16000' x='83200' y='16250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='5' is-fixed='true' name='AvgTripmilesPermonth' w='52800' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3750' id='14' name='Avg Trips per day' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):ok]' show-morefewerbutton='false' type='filter' w='16000' x='83200' y='23875'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3750' id='16' mode='checkdropdown' name='Avg Trips per day' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):ok]' show-morefewerbutton='false' type='filter' w='16000' x='83200' y='27625'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='98000' id='13' is-fixed='true' name='Avg Trips per day' w='29600' x='53600' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='17' is-fixed='true' name='AvgTripmilesPerDay' w='52800' x='800' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{99045ECC-EC22-494F-B409-0B4EE20B8855}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.25' source-height='63'>
    <window class='worksheet' name='Months Vs Bikers'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]' type='filter' />
            <card pane-specification-id='0' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:usertype:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:birth year:qk]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:usertype:nk]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{501D79A8-BFBB-4145-A761-B996A36DE7DA}' />
    </window>
    <window class='worksheet' name='Sheet 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]' type='filter' />
            <card pane-specification-id='0' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[wd:starttime:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{3AD10515-5733-47D7-8D2A-6C72A003107E}' />
    </window>
    <window class='worksheet' name='Trips&amp;Riders'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]' show-all='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[:Measure Names]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[pcdf:ctd:bikeid:ok]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{9E78F690-898C-462E-9A06-E0022B95438C}' />
    </window>
    <window class='worksheet' name='Tripsbyhour'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:28]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card mode='checkdropdown' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):ok]' show-morefewerbutton='false' type='filter' />
            <card param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]' type='filter' />
            <card pane-specification-id='0' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:28]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):ok]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:28]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:Starttime (copy 2):ok]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{1089F34E-9B6D-40D5-AF77-666A1233C3D7}' />
    </window>
    <window class='worksheet' name='Tripsbymonths'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):ok]' show-morefewerbutton='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='horizontal'>
              <node-reference>
                <axis>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[mn:starttime:qk]</axis>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[:Measure Names]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):ok]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:28]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:Starttime (copy 2):ok]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{947AF429-03CB-4D0D-A85B-78ABE9D23E14}' />
    </window>
    <window class='worksheet' name='Tripsbyseasons'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):ok]' show-morefewerbutton='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[:Measure Names]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Calculation_913949251116576770:qk]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):ok]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[win:cnt:start station id:qk:28]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:Starttime (copy 2):ok]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{AE75A787-655B-4512-B526-4A05DDD79CDB}' />
    </window>
    <window class='worksheet' name='Top10originstations'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):ok]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):ok]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:start station name:nk]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{0CBE3B8E-63FE-4D6F-965F-CA2865C3AE03}' />
    </window>
    <window class='worksheet' name='Bottom10originstations'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):ok]' show-morefewerbutton='false' type='filter' />
            <card mode='checkdropdown' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):ok]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):ok]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:start station name:nk]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{0AC65813-6ED3-46F3-BE23-357E7CDB840E}' />
    </window>
    <window class='worksheet' name='Top10deststations'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):ok]' show-morefewerbutton='false' type='filter' />
            <card mode='checkdropdown' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):ok]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):ok]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:end station name:nk]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:start station name:nk]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{A4EF9810-23D2-45DA-A93D-1BB0E4A5BC96}' />
    </window>
    <window class='worksheet' name='Bottom10deststations'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):ok]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):nk]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy):ok]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Today (copy):nk]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:end station name:nk]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:start station name:nk]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{3599F7ED-82B6-41F7-A03A-CCA360ADE425}' />
    </window>
    <window class='worksheet' name='Gender-Age Statistcs'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]' type='filter' />
            <card mode='checkdropdown' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]' type='filter' />
            <card pane-specification-id='1' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[mn:starttime:ok]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Birth Year (copy):qk]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):ok]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[tdy:starttime:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{7D75FEFA-E7C4-4470-BAE5-EF10E6A431D9}' />
    </window>
    <window class='worksheet' name='Avg Trips per day'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):ok]</field>
            <field>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):ok]</field>
            <field>[federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{3C29EF74-A06B-4410-8FDD-6ACF8042E208}' />
    </window>
    <window class='worksheet' name='#Trips&amp;Gender'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]' type='filter' />
            <card mode='checkdropdown' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:usertype:nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]' type='filter' />
            <card pane-specification-id='0' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):nk]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:usertype:nk]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[yr:starttime:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{96104884-1A39-4C64-A35D-280D99CEFB09}' />
    </window>
    <window class='worksheet' name='AvgTripmilesPermonth'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok]' type='filter' />
            <card mode='checkdropdown' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1nw41i212p7cem1cc3opa1ctynt3].[avg:Miles traveled today (midnight to 11:59 pm):ok]</field>
            <field>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</field>
            <field>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</field>
            <field>[federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5C76E46D-ABBC-4679-89F8-FF9E580272B4}' />
    </window>
    <window class='worksheet' name='AvgTripmilesPerDay'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok]' type='filter' />
            <card mode='checkdropdown' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1nw41i212p7cem1cc3opa1ctynt3].[avg:Miles traveled today (midnight to 11:59 pm):ok]</field>
            <field>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</field>
            <field>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</field>
            <field>[federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{8DE989A4-5244-490C-B95F-DF1E737DA3BB}' />
    </window>
    <window class='worksheet' name='#passesperyear'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok]' type='filter' />
            <card mode='checkdropdown' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <axis>[federated.1nw41i212p7cem1cc3opa1ctynt3].[Multiple Values]</axis>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.1nw41i212p7cem1cc3opa1ctynt3].[:Measure Names]</field>
            <field>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</field>
            <field>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</field>
            <field>[federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{346DDF65-99E9-44BF-AC25-6F7D5A65330F}' />
    </window>
    <window class='worksheet' name='#passespermonth'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[:Measure Names]' show-morefewerbutton='false' type='filter' />
            <card mode='checkdropdown' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok]' type='filter' />
            <card mode='checkdropdown' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1nw41i212p7cem1cc3opa1ctynt3].[:Measure Names]</field>
            <field>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</field>
            <field>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</field>
            <field>[federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{A50E2420-89BE-47AD-B00B-455A28F47692}' />
    </window>
    <window class='worksheet' name='#passesperday'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[:Measure Names]' show-morefewerbutton='false' type='filter' />
            <card mode='checkdropdown' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok]' type='filter' />
            <card mode='checkdropdown' param='[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1nw41i212p7cem1cc3opa1ctynt3].[:Measure Names]</field>
            <field>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy 2):nk]</field>
            <field>[federated.1nw41i212p7cem1cc3opa1ctynt3].[none:Date (copy):nk]</field>
            <field>[federated.1nw41i212p7cem1cc3opa1ctynt3].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{AFF4BC91-6380-4D66-9D72-5D460273563A}' />
    </window>
    <window class='worksheet' name='Bikes Due for inspection'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:bikeid:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{DFD4BD57-8E83-4CD3-92FC-561387DEAAC6}' />
    </window>
    <window class='worksheet' name='Today-#Trips &amp; Start Stations'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:Start Station Id (copy):qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):nk]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:end station latitude:qk]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:end station longitude:qk]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:start station name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{4DE0B044-40A3-4EB1-AFFE-8CE21F58C31A}' />
    </window>
    <window class='worksheet' name='Today-#Trips &amp; End Stations'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='3' param='[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:Start Station Id (copy):qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:Starttime (copy 2):nk]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:end station latitude:qk]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:end station longitude:qk]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:end station name:nk]</field>
            <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:start station name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{0948BBBD-88FF-4341-99B6-81F3B88D2E55}' />
    </window>
    <window class='dashboard' maximized='true' name='Bike Stations &amp; Traffic'>
      <viewpoints>
        <viewpoint name='Bottom10deststations' />
        <viewpoint name='Bottom10originstations' />
        <viewpoint name='Today-#Trips &amp; End Stations'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Today-#Trips &amp; Start Stations'>
          <zoom type='entire-view' />
          <selection-collection>
            <tuple-selection>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields>
                      <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:start station longitude:qk]</field>
                    </x-fields>
                    <y-fields>
                      <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:start station latitude:qk]</field>
                    </y-fields>
                  </pane-descriptor>
                  <columns>
                    <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:Start Station Id (copy):qk]</field>
                    <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:start station latitude:qk]</field>
                    <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:start station longitude:qk]</field>
                    <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:start station name:nk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>7</value>
                  <value>40.74590996631558</value>
                  <value>-74.057271480560289</value>
                  <value>&quot;Leonard Gordon Park&quot;</value>
                </tuple>
              </tuple-reference>
            </tuple-selection>
          </selection-collection>
        </viewpoint>
        <viewpoint name='Top10deststations' />
        <viewpoint name='Top10originstations' />
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{B9B78EF2-4263-48F8-9D50-82C33C1A6F3F}' />
    </window>
    <window class='dashboard' name='Trip statistics'>
      <viewpoints>
        <viewpoint name='Trips&amp;Riders'>
          <zoom type='entire-view' />
          <selection-collection>
            <tuple-selection>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields>
                      <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[tyr:starttime:qk]</field>
                    </x-fields>
                    <y-fields>
                      <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[ctd:bikeid:qk]</field>
                    </y-fields>
                  </pane-descriptor>
                  <columns>
                    <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[cnt:start station id:qk]</field>
                    <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[ctd:bikeid:qk]</field>
                    <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[tyr:starttime:qk]</field>
                    <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[pcdf:ctd:bikeid:ok]</field>
                    <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[:Measure Names]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>275196</value>
                  <value>1198</value>
                  <value>#2017-01-01 00:00:00#</value>
                  <value>1.1278863232682061</value>
                  <value>&quot;[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[ctd:bikeid:qk]&quot;</value>
                </tuple>
              </tuple-reference>
            </tuple-selection>
          </selection-collection>
        </viewpoint>
        <viewpoint name='Tripsbyhour'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Tripsbymonths'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='6' />
      <simple-id uuid='{55A9B9E0-9760-46D0-A5E7-FE7568397B55}' />
    </window>
    <window class='dashboard' name='Trips&amp;Trip Miles'>
      <viewpoints>
        <viewpoint name='Avg Trips per day'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='AvgTripmilesPerDay'>
          <zoom type='entire-view' />
          <selection-collection>
            <node-selection select-tuples='false'>
              <oriented-node-reference orientation='vertical'>
                <node-reference>
                  <axis>[federated.1nw41i212p7cem1cc3opa1ctynt3].[avg:Miles traveled today (midnight to 11:59 pm):qk]</axis>
                </node-reference>
                <page-reference />
              </oriented-node-reference>
            </node-selection>
          </selection-collection>
        </viewpoint>
        <viewpoint name='AvgTripmilesPermonth'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='8' />
      <simple-id uuid='{DDCD16EB-F43A-4F35-AC8B-A4D181093571}' />
    </window>
    <window class='worksheet' name='Sheet 25'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{15FFD210-9642-439F-B0CD-4D42109750A7}' />
    </window>
    <window class='dashboard' name='Passes Purchased'>
      <viewpoints>
        <viewpoint name='#passesperday'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='#passespermonth'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='#passesperyear'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='12' />
      <simple-id uuid='{01ECC313-E3BB-4E12-A1A5-09330949C852}' />
    </window>
    <window class='dashboard' name='Maintenance &amp; Gender statistics'>
      <viewpoints>
        <viewpoint name='Bikes Due for inspection' />
        <viewpoint name='Gender-Age Statistcs'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.1klxzo30gxr1s9179gc7d0gb3tuz].[none:gender:ok]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{75C884CC-F254-431E-9EF0-04ED765C5C52}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='#Trips&amp;Gender' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAReklEQVR4nO3dWXBV933A8e//nHvPXbTragPtGxgkYYnNbGazXZMmTZw0yaQznUz61nY6
      TdNJp9On9qV5ap86k0napMlkxomTusYJsR0HA2YxCGRWIQkhQEJoA+37Xc7SBwgGx4ztBg4X
      /X+fJ7jb/3/uvV/OuQv/qzzP8xBCQ0opZTzuSQjxOEkAQmsSgNCaBCC0JgEIrUkAQmuBxz0B
      8QCew9jANa7fnCIQyaGyuprcaPChDmHPjXFleJ6qmkrC5kO96SeG7AHS1HDHQf7rJ/sYGJuk
      7+IxDl8YwLWTvPqj79M3tfDJb2i2hx/8aC+TcXAdm9d+/D2uTcwDsNDfxn/++HXGEo9oI54A
      sgdIU5fbDmKt/Bpf2PP0nVMSdB56m1/++tdcnvNoXLuDz7YUcfTQIa6PzZNT1siLO1pwxrs5
      0ePQVJLg9OV5QvOt/HpfB4GcApoKZnl93xt0Tns0rtvBS2sa2fN8jOxAikutBxklxnh/NxSt
      prkwzqnz1yhu3Mb2pgriUwO8e/AIY6kstj63m5rCzMd6/zwssgdIUzVPb2W89ee88tZRrt+c
      xvGClDeupbQgj43bd7O5oYLk7BSRstXs3rmFsWM/4c32CeaG2/nlr/bx2usHmHZDNLU0ESso
      Z/26Ruoa1lJWmMvG7bvZ2lgBU3386q2jTCVSdBz5JceuJFjT3MSZV77HuXgea1YW8tOfvood
      H+O1H/8Mp2I9m2oUL//gf7i5RPYasgdIU+Ute/jb3CrOt1/gh/++j7Vf/ms+11xMNGRRUFxC
      YW4Uez6T0fYDvDswynDfINW3ZqAY5mZs9vzjt6iOhVHjrYRCUWKxPLLCSaIhi1hRMYW5mTDz
      oTHrnqKm3KAgq4TKlVWUL1hEQm0khi9z9GwXsQWbCyxw65bH+CwUhx7PffMwSQBpyvUMimsa
      ebGmgZUxl//Yf4zdzX96zyUczr3xIzrUDr757fV0vvZvtN7Zn2cvr6YsN4x6SHNRShGNVfGN
      b/4T9ZkP61bTgwSQps7+9mUuTOdQXZJNT1sPq9d9mQzTpKG6kMMH3sXd0EJWrJCZti6Ov7fA
      hfcvYTz3ETeUV0V5YIxzpzvY+exKGmqKOHroMGxYx7rIJ5uLtXw126r389Mf/oSdLZUkUima
      NrzAsuyHusmPhZJvg6anxNwYV3p6mZpPEs1fzsr6CqIBg8WpYTq6+wgW1tBUFqHjQheLwWxK
      cwPYGWUUW1NcveWxqq4U484/1uM3LjE4HWZlQyXu1Agd3b0ECqppLg1xsW+K2vpKpq534eav
      oDRb0Xu5l/z6WjKdBN3XB3mqvg57YZLurm5mkoqC0hpqy4sIPOGvIJVSSgIQ2lpyX4d2Xfdx
      T0E8YZZUALZtP+4piCfMkgpAiE9LAhBakwCE1iQAoTUJQGhNAhBakwCE1iQAoTUJQGhNAhBa
      kwCE1iQAoTUJQGhNAhBakwCE1iQAoTUJQGhNVoXQlOO4tPfe8mWs/KwIFcU5voz1afkUgIed
      SpJIpvA8hRUKEwyYKM9mfiHO7/5XvhWOYgUUrmOzuJhABYKEQxaGUtipJMq0MA1w7CQOJlZA
      0xVdH4J40uaf//tdX8ba1VLF331lky9jfVo+BZDk/JH99M+mUK6DHS5k986t5C+088NXO6go
      ub3O5KrNe1iR73D2yAGuTjtge6zavIum8jwute0nu+GzVOQ4nD/yFk75ZjbUF/kzfbFk+RRA
      kMatz9NshTBwOX34LYYn5jGmbtH43Evsrv9godXJgU5GzTK+9FILidEeftt+mYbyZ+6c6zLe
      08ZwoI7nagr9mbpY0nwKwCAYMJmfGWd08CojdoytsQhT/Yt0X9rLcFuIourVbN/YwML8DLmx
      CgKGIpBfQHhhiDjgOSmmxga42DnGMy+sJ2zeXvXp3mWNPM+TpVE+IdfH5aDS+XHx7UVwcm6c
      s21tTC4qcorLCRgBqra8xF9tATe1QM/xN9l/LkZTJgSCd34IwjQJoXCA5NwkF0+dIJRdQXbo
      g2P/e5dCcV2XVCrl1yY90Wwf7yfX9dL2cfEtgHBuCc8+/zk8J0XnycN094+ytrYQpQyMYJT6
      xlrOnpokmB9ibnQKKMSZn2c6YBIBQjlF7Nz0AvGOA7R2DbKloYyAgmDwg19N8TwPy7L82qQn
      mu36t8itaRqEQum5lLQ/nwPERzn9fjuDN8eYmBhjeHSGsOVxqe092q/e4NbIAK3HuyirLyMW
      K2HuRidXR27ReeEiGcXL7laqDIsVG7diXz/DlZFpZE1H8YfyZw8QyqM4e5DLF86Q9Eyq1u6k
      vjyGWhbh7KkznJ23KVi5k7V12SiyeH53CydOnSFUVMOzTTUAFFesxAqDsrLZsnUDvRPzQHq+
      t5z+XGYHznHt+KukVA4lq7eQk5MBgD03wMjgBMvrmzCMj9pLeExdOciMUUtFTdXtU5wFRjsv
      kLFiLRmh23tgNzXDaPcJJibmeGrZX2CTnh86+TMnFaBsRTNlKz50upXDum27PnxhwnkV7Hqx
      4r5TC8vq7v45nLuMVbmPZqo6mLt5jf/df5qixj/CTA3Se+Y40V0vkLjRymDvAAtYlNQ2/n4A
      nkdy/CIjN8Yh1wKqSM3dYKi9lenhBKVVTXcCSDJy9gBq2QZqq6MEAnbaBiBfhdBQpKCaP//6
      N8jMziaUlU9Y3X6jwcpfQfX6XWREPvqp6rlxRvr6KKxdSeBOG4aVS0nzH1NcnP/B5WavMO0t
      JzvLIpV0yM0tID1fAaRnlOIRM02TgGniLo7Qf66VcN1GwgAZ+biJyY++kucw1/seqmgLWVlj
      TE7c/n0l08rC5P5Fie3Zm8zNTDF6ZQI7NU9byGbyi5vJD6ffr8tIAFpymeg5Ss/p9ylueo6c
      7I//xcfUzFWuXb5OfkWYoeFhpsdnGS2sJbZ8OR8+UlKGScbyp6lcXQ14DA2d4drQFPk1eY9m
      c/4AEoCGEqNXefntDsrXv0gkHPxEvyVmRIqpbNqKA9jGAsEFj1Dko39jKZBfheroYKG2nKjl
      YRqKYDA9n2rpOSvxSA33nqHtwDtcHUsCYIaqqN2xmfFTexmbmGZ6bIT4xC1iq/ewPJZgcBCW
      1VeSW377XbfkpGI2GSE7P4+568fo7e5hYbgfY2qIW0VPU79hPSWVPfQdexlPBdi95yvULct6
      nJv8QEvqJ5KSyaR8EPYJeK7D1OwiX//XvbdPUAbKNPAcB+59OiiHsY6DBKpeIC/7gz2F53ng
      eSjDwHMdvHu/5qAMlGmC5+G5DgC719Xxra+m37dBlVJK9gAaUoaJZVkYgeD9p5v3Px08zyCn
      fgdWOHDfYZJSCpS6e1vK+IivpSt19/ZU+r32vUsCEA+klEkokvG4p/FIyecAQmsSgNCaBCC0
      JgEIrUkAQmvyLpCmLJXiL7Ne92Ws0vB2IP0+BwAJQFsB5bItfNGfsYI1vozz/yGHQEJrEoDQ
      mgQgtCYBCK1JAEJrEoDQmgQgtCYBCK1JAEJrEoDQmgQgtCYBCK1JAEJrEoDQmgQgtCYBCK1J
      AEJrEoDQmgQgtCYBCK1JAEJrEoDQmgQgtCYBCK1JAEJrEoDQmgQgtCYBCK1JAEJrEoDQmk/L
      o3uMXr9ER08/i45JbdMG6pblYCiPga42Om/MUvpUMw0VMcAjPnGD422dhIpqWNtUTySgGB24
      glVYR04Ipkf6mPByqF6W58/0xZLl0x4gwdhEnJqGFjY0r6Dn1EH6RueZuXqSk/2KxsY6Bk8d
      4Mq0TXJmhHcOnaWqeR3ZC30cPX8VgJv93UzHwY1P0Np2ESMU9mfqYknzaQ8QZlVLC57n4aQS
      FOSEsJ1FurrGWb/rRZZnmMQ2DfKbjhGylo2SWd5ATXEhTkYjV49cw6YOAM9N0n2qleyVz1Ce
      H/Fn6mJJ8+0XYuJTI5w82crN6SRlqzZTHQvTG8xgTcgAFFZxCcHzUyzEEmRmlwFgRjPIth0W
      gcT0TU6//SuiuaV8obbg7q4rlUrheR4AjuOQSCT82qQnm4/3k+um7+PiWwBWVoy1m3cwOzbE
      mYvtDBVvxEylSOARAUgkSJkmBmCnUrev5Dgk8DABKzNGS/0a+i50MBW3KcoI3t6AwAeb4Hke
      wWDQr016srlBkj4NZRhG2j4u/gTg2iSSLtHMXDKzcqgZGmBkcpHSaILeW4s8XRJm9Eof0fLN
      ZGd4dA2NYLvLSEyMEY9GCAPKDJBTWMn25jEOvXeO53etIytooJS6O4xSCsOQN7Y+Cc/X+yl9
      Hxd/AkhNceLAe0ynPMDDMbPYtqaIwuUt7HtjH9eCQRLk8Scv5ZLpBinsPsBrr18H22PV5t33
      vFI3yK1ZT8PYftra+9i1tgb14FGF+FjK+90B9KPkeaRSCZIpBw8IWmGsgIlSHqlEnKTtErDC
      hIIm4OE6NvF4EmUGCYWCGEphp5Io08I0wHVsUg5YVuC+AJLJJJZlPfLNWQq8xCxz393sy1iB
      VZ8nsuc7voz1aSillD97AKUIWmGCv/fcVARDEYKh+08zzCDRjPuPGQP3XNkwA4TMRzVZoZP0
      PDATwicSgNCaBCC0JgEIrUkAQmsSgNCaBCC0JgEIrUkAQmsSgNCaBCC0JgEIrUkAQmsSgNCa
      BCC0JgEIrUkAQmsSgNCaBCC0JgEIrfm2MJaAq0MTTMws+jLW2hXLMNN0LZ50IgH4aO+RSxy9
      0O/LWD//ly9jWhLAx5EAfPRMqIuiaJsvYwX4IvLwfjy5h3y0PnSJ5oxjvoxlKteXcZ50so8U
      WpMAhNYkAKE1CUBoTQIQWpMAhNYkAKE1CUBoTQIQWpMAhNYkAKE1CUBoTQIQWpMAhNYkAKE1
      CUBoTQIQWpMAhNYkAKE1CUBoTQIQWvNpVQiHG12nOdfZx3Q8RV7ZanZsWkPm4mW+/7MTZGRZ
      oBRP7/oSjcUG186f4GTXIIGMAjY++yxVsSiXTx8kY8VuSrNcutveZS63gXX1xf5MXyxZPgVg
      Yxu5bH3xC+RFDU4e/A39ozVUzg9R8ewX+Uxj3t1Lzt28QueI4qWv/RkLfec41t5N5c4WkolF
      wq7H4q3LdI2G2LWmwJ+piyXNp0OgENUrV5CfGQJ7gbmESVZGkJsj4wxcPMIbb77N+90DeMD0
      9Dix0lqipkFBWSWBmWnid27FSc7y3vEu1m/bQE7I9GfqYknzb2Esz2HsRg+tZ7qpf2YXpbkR
      3E2f46vxFG5yge5ThzjMZ6hRHqFQ6PZ1ggEylIENLE4Mcvj1Vykob6I4M3j3ZpPJ5N0/27aN
      66bvglCO49/cEvE4OOqB53uJ+APPe9gcxyEe92+8T8OnADzG+i5y+tos63e+QHFOFIWHsiJk
      W1GUymHjplX84uQwtStMFucWbl8rkWBWgQVE8kv57OYdDJ86wKWhGRpKczAUWJZ130gf/ns6
      WTRvx+yHUDiMCoYfeL6nUsz5NBfTNAmHHzyXx8mnQ6AFOtoHWbNpEyW5UZQC3CQ9588wMDmP
      k1rkcvsVckoLieUXMdrbwVTKYaCnG3LzCf1usoFMNu3YxLVTRxicSfgzdbGk+bMHSMwxMzfJ
      O3tfQQFYeWzbvYPKmuUcPfwWR+ccCmvW8FxjAUHDZefGWd559eeEi+vYvuUpAHJiJYSDoKJF
      7Ny0kkv9Q5Q1VfPgnbwQH095nuc97kk8LMlkMr0Pgd78B+zut3wZK/Nv2lDByAPP9xKzzH13
      sy9zCaz6PJE93/FlrE9DKaXkgzChNQlAaE0CEFqTAITWJAChNQlAaE0CEFqTAITWJAChNQlA
      aE0CEFqTAITWJAChNQlAaE0CEFqTAITWJAChNQlAaM2/ZVEeg6Fbk+w90ObLWFuaV9CyqsqX
      scTDs6QDKEpe5esjf+/LWKGFbwPf8GUs8fDIIZDQmgQgtCYBCK1JAEJrEoDQmgQgtCYBCK1J
      AEJrEoDQmgQgtCYBCK1JAEJrEoDQmgQgtCYBCK1JAEJrEoDQmgQgtCYBCK1JAEJr/wfWJaVV
      n+CxCQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='#passesperday' width='192'>
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='#passespermonth' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='#passesperyear' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Avg Trips per day' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='AvgTripmilesPerDay' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='AvgTripmilesPermonth' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Bike Stations &amp; Traffic' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAgAElEQVR4nOy9eXSd93nf+XmXu2/YFxIEQXDfJO7UQsl2LMeSkzhL46SZOHPakzan0znt
      TM40nWlPOycz7UxPJpPTnM5ppmmbuEnbxHZiWY1kqZbFSqJIiRY3cAMXkAQIggAB3H1/77v8
      5o/3vi/uxb0ALkBQVif6+lAGXrzrb33W7yMJIQSf4TP8JYX8o36Bz/AZfpT4bAJ8hr/U+GwC
      fIa/1PhsAnyGv9T4bAJ8hr/UUGt/uXX9MvmyAUD/4DAbutsbrzDyjE1m2T68oaUHZDJpgl6Z
      ihJm5u51MsUKAL0bhxjo63Ruysx0iv4N3Sver5hLMTY+zd59e1BlCQBhmdwcvUaoYwODLdyj
      GSqlPNdvjrF56046osEWrrCYmZmjv79vTc9bLXKpeW7fm7R/Uf0cfnpv0/PGbt9m+44dLd1T
      L2WpKGGMUhYVk5t3Juw/yF4OHtzvro7z0zO0b+ivHyxNIbh3axR/+wY29Dhjx+LqpUtULAjG
      Otm9bajplZO3x+jZsR0/gLAYuzmKEupgeLC1cTYzM01/f2vn1qJuB9i592nS4+NsPXy4+eAH
      ewKMz7T8gNFrozy4fo2cJbNt937KjybYuPdwzeBfHb7/zrvs2rqRt995zz32g7feYOPwbuRy
      mpIJ33vzeyveZ/E533vr++x/aj+JuZmmf3fP+96ba3rvx0WkvZvDhw9zf3x8ycEPMDY21vI9
      nX4ZvTZKKNbJ4cOHmZiY4HDN4F8Nbn/8XyiEBrjy4fuU3aMVbt97xOHDh5cc/AAPxsbca977
      wVu0bxwmJJfJlMwl2/zCyTd5VG76p5axzKQW/ODN12nr7iVXhmf3DvD2R9cZ7FKwaGN+epKJ
      h3NMTs/y0pEtfHjP4JVnt/HaW6f5mZ/6cQAm7tzg1t0xbgOHQj307d5W94RX//QbJLIaP/EL
      f41LIx+zZ8bPSCpMp5wkNvAUqYkRgu29dPcNsGWTvdKGFIuz5y8wMLSwyvlUiftTM+zfsZ1S
      LsXE+DgXLlxi/1N7uHLpMlohQWTTQaZufUwpnaB7eD/j4xNcuHCZpw8/jQqYWoH5dIHt27ba
      3zY+ztUbd9jSF2P0zgTTk5O88NJL1XtfYM/Th7l48SInDu/izJX7RL063cMHuf7Dkwxt3cHN
      W3f5ha+9wndffZuhoQF2PXWYiF95vN6qwYPbV7j9KA/FBHue+RLjlz9A9rcxPZ8ETEbOX6Cs
      FVAim5i4cYGf+8Vf5NSbf8HBL/4kbT6ZSiHDB6Nj7JV83Lo7xo59T9MZC7n3Hz3zPa7MSQTD
      UUJ6huc3/AR/9sffYOfefUxMJ/jKiT28ceoGg33dHDx+CA+waftu/tPJ9/B6vPiWeO/xCye5
      nA7TwzzegcP4c+OkKjITk9M409rnU5m4P8Xh/TswSznGJ+w237V/H7dGLqNpGXydO5mcHCcZ
      vAA7tnHx4gg/8ZVu3nz9Lbp7eyjjo9OYZsLaQKgwQceuF5m5fpr23g30DWxhU18XsJwOoM2j
      e/o5evQ45WycCz8c4XMv/zgHn96LDKSSCSwBM7OzxDbuoTg3xo0LZ9l3/HluXb/MnYkpSqU0
      suVDsgRen7fhEbky/Oqv/S02tPvdYzv3Pc2LP/YyU2OXicVi6LqOz283p1XJkigpzDycJTM1
      ynSqBMDnvvxVuvw63/3zP6OkRBjasoXDhw9CpUA2X8LvV5m8/5ByLstLP/d1Xnz2CFu2DHG4
      OvgBfv6vfp30wzG+8/r36d4wyNCWLezfvY1sOoVuWli5GbIiVr33YQLVCy9evMHnv/QFTnz+
      Je5cO48vGOXQoUP0xoIYsodIyIeJjM+zvurW1bEHfPHF5/jijx3n0rmrJPMVnjl+lA3dHViV
      MslsHtXv58HkfV48OMxHV+5TsGSUYoILFy6QyBaRLIFECdny4fU2Dtkte4/w1S+dcH+PdfZw
      6PBROmWLsi9EwCsheTwoVVfqlavX6QwqdPR088ZbJ93rHk3ZA/jOxBQAO/Y+zXOH9zIbT3F/
      NskLzz1TJ+o8+7kvs7nLz/e+++fMlhS2DNlt7rM00rki3qCXB+MPGBzcwv6Dh+nrjAGgzd/D
      07+Xo8efIRu3d/Ld+w9y/MBO5hJZYrEoum7g9y2Mt6V7xduOlp2mohXRhczgpi5u3JggPjeH
      Bdy8M8GBp/cgY3/9gaEu3rw6z7aeEDv3Ps22oQG29nWy87kvMrx9OzuHBxse0d3TQ1WMd1HR
      NO7fvEjHxu109G7kmWNH+Pij0wCYpSzBjg28cHg7H44+oq8tAMDYzRt09G9hoMNPuqgjWSZa
      xWBufJTQwG662sIIwB9pJxbw2A8yTSq6UX17g9HR2+zcewBLyyMA0zAxTJNrozd5+sAB/NUB
      rGBSruiY1U7fOtTLtRsTzIyP0tG/te5bTE1jz6HjbO+Ej65PLdnUa8HGjiBjDxPcvnqDwR3D
      6KUiWqXCfCJJYX4cMzRAf1cbQkDvjiOMn/4TOocOuKJUf38/w9u3s3+wh53PfZFIoFEY6Onp
      qfu9Uqlg6GXmyxXUiuDoM88SKE5xJ27LIclMged+7EvcPfs2m3btd6/rG7AH8LahgYZnKJZO
      uqAxNzfvHrs3dpNQRz87BjqYTxfxSBZFrULywW2U7mF6OqIAtLcFmZ/PYJomAN72DWSn76AV
      Mwi5ccHt3TjEsSMH+ej0BwsHxSIk5+aEXv25XMiISyNXhKabQgghHozfFpNTUyKezIpSPi1G
      ro6K2fm4EEKISnZKvHnyfN29KsWsyGumSKfT7rF0fE5o9u1EPB53j8fjcXHv/Dvie6cuinuT
      00IIIYrZlLh48ZIolHX3vEdT4+LO/YeilEuKbNE+rpXyYuTiBTE9n7KfW8qJSyPXhCEscXv0
      qphPJEQ8ma17XrmQESNXRoXpvtcjceHiRZEtakIIIVJz0+LmnfvCrJTEyMiIiM/PiqIuhF4u
      iEsjV4RuLrz/9OQ9MTY+VfdNyXhcmEKIqYk7YvT2PWEtbug1Ym5uzv154s5NcX96zv3mkZGr
      YmZ2XgghxPjtUTE9nxDxeFIIIcQb/+k/CX3RS6TTabePFt8/n46LavO63/Kdb/5HcfHSiChq
      hhDCEvduj4o7E1PutaZeFpcvjYiCpou5+XnnqLhy8bw4f/68GB0bF8Vs0n6eXhTxdF5YZkVc
      HRkRU1Mz7rgztJK4MnJRTE7b9zArJTFyaURohhB3b14Ts4mEiMfTQghL3Lp+RSSyBbfdC5mE
      GLlyXeim5X6DqeVFMlsU2dS8uHjpsijrC98rCbEesUAG589e5Kljx/A+xk6fmr6HER2kO7yy
      veEztI756UnSmsz2LY0r8GqwGgvTfy1YpwnwGT7Df534zBH2Gf5So07WyOay9kFFRZIkZHl9
      5odumMgS1G42liXQTROvqiBJC5qwEAIhxLo9+5NAxTDwqioV3cDrWV/xzefzoaoqmqahVTRk
      SUZR7DarbbfHgW4YLL5TqaIT8HoQQtQ9x7KsdX32k4ZumHhUBcM0UWS54b3rektYAr/fj6qq
      yE1OXvNLmGWEBBWtVDcJUrkiAO2RBc+rZVnu/8uy/KmfCBXdoKhV8KgKQkA4sGBOdCbz4wwY
      VVVRVRXTNFEVFa/X6/bNevVPrqQR9KqUywteJcs0mYin6IyF8Kqq+z3OBLAsy52In2bMp3N0
      t0WYTWXpbY/W/c0SVr0I5Pf78fl86/5h4aCfklYhEonUHW+PBAn4PDxKZjCrA1+SJIQQGIaB
      aZp82lWUTKFEWzhIoaTVDX4ASwgsYWGYBqZlPtZzFEUhGAyu++IEEPT7EJKC17tgOlQVhf7O
      GNlCmUzB9rc4k840TQzD+NT3DYCgugsojU5Iy7I+OR0gFPBT1g38fn/dcb/XQ297lEQmT6Gs
      IYRA13X3BT/1kKBc0fH7PA1/cgaIs2K2MgmcXaP2+ieNoN9HSdMIhUINf+uKhfEoCrOpLEII
      TNN07e6f9gngDPxUrkBHtP7bXFH7k3qZgM9LWavg8zV6HCVJoqc9imlaJLKFT/22CnDrQYpX
      T98hEvCTLZSIBgMN5yiyjCytroktYU8UfR12jdUgEgyQK5ab9k/Q76U7FmY2lUPTDff4p3kC
      /Om7txi9nyAS9KEojX0gSRKKon6yVqBoKEi+pNVttfV/D9AWDjKXyWOY9ur/aW3k/s4Q+7d0
      4VEVfN7G1R9wDQmKrNj6TIuTQQgBn/B3+7weKrresEM7kGWZvo4oummRropEn9a+kSSJIzv7
      2NgdoVCu0BkNNz1PlqR6P0AmlycWCdvKjhCYpmXLe5Zl/2xZ2Itz4wptWQJZtrd6YVkIBAh7
      G2qPRQhW43ni6WyDwrUYhmEwm8rg83joiIafqCKsNJENPwk4YkQz1IpOoVAIn89HLl8gFAoi
      OzqSae8UpmlVf7YaLDYN9wP7PEuAJBDC/n1Dtx2Za5gmuUIJYVSWfbd8sUQqV6SnPYq/SYzX
      euJJ90+dFUjXdWbmE/aDZQlFllFVFY+q4vd7UVW1oYEdZVXXdXRdR65dFSQoVDRM3QfVCdAe
      DfNoPkHAs/SHybJMVzRMUaswn87R0x5tSSwSQiAQSLRuITl9+jQnTpzggw8+YHh4GEmS0DSN
      zs5Obt++DYDH46Gjo4OzZ8/y4osvks1m2b59O6+99hobN25E0zSOHDnC2NgYg4ODhEIhMpkM
      9+7do6uri5GREb7whS/w6NEjNm7cSCaTob+/f8l3avbuqiIzG0+6JmJFllAVBY9HxedR8Hr8
      DZYhx5ig6zqGYWAYBgosrF8SFMtldF3H4/GgKgqWZe8+y7Wf3+uhpy1MKlcgYokG5X8p1O4Y
      q+mfZ555hnPnzhGLxdi8eTNzc3OoqkqpVCKZTBIKhUgkEsRiMSKRCNFolI6ODr75zW9y7Ngx
      5ubm2LFjB6VSiba2NgA0TSORSNRPAFOvIFdfTpVUEBamXsHUK9Su146lplXUKrMV3cCjLj+r
      JUlCVVWiqgqSxKNUlvZwEP8Soob7HGFhCQsEruixEnRd5/Tp06RSKU6ePEk0GqWrq4sHDx64
      ZtjBwUEePHjA0NAQd+/erRPhnBXq3XffJZfLEY/H8Xq9dHV1MT09jWmaDA8PMzIyQiQS4cyZ
      Mxw4cGDF91oM0zSRLVv+ViUJCRCmQcU0qADFmnNb7R/DNFEVud4/IyyUZQan0zeSJNHbEaNQ
      rrimxuUghMC0Fqx6jq9pJcTjcc6cOUM6nebevXvMzs7i8XhsSaPGZ+T3+9mzZw/vvvsuw8PD
      dHR0AAv9c/LkSVRVZcOGDUiSRCAQ4Ny5c406gHPjlT5mLRBCkCuW8K/gLLIVFMX+J8v0d8Qo
      aRVS+eKS17g2aiRAwhKtrTBdXV2cOHGCoaEhBgYGGB4eJhaLEQgEuH37Nu3t7bS3txOLxZid
      naWzs5NcLgdAOBzGNE1isRgDAwP09fXxzDPPkEzaK7WzGj18+JBIJML8/DyDg4P09a09i6wV
      03Cr/VMoVwjWiDDZQpFAE2vWYjiTQJZlIkE/7ZEgM4kMurG0WGfVWsRE62bcrVu3cuLECQYH
      B2lra3P7p1KpMDs7y4YNG+js7KS3t5fr16/T1dVFPp9HkqSG/hkeHmZgYAC/30+lUqGjo6Ne
      B5ifn3flyPWQvQzTolzRaYuEiEajxNNZOqJh0un0mu5Xquhk8kW62yIoTfQC29RoMZ0ski3o
      7N+yctbZUt85NjZGPB7n2WefXdO7roTldIBaODpAoVCgWCwihFg3P02mUCIWChCJRJBkmWy+
      SMBrixZrQTyTx6MqxEKNFjFngRIITl56yJePbG7pnkv1z/nz5wkGg+zZs2dN7+qgbgLE4/F1
      VTizhRKRoJ9QKISFhGUJgn7vmicA2A05l84RDvgI+Rtlz1oFcj3h7IyyLKObJnOpHANLpY2u
      I2ongKZp63pvx4nX1tbGfDpLT3uMYrG4rIFiJRTKGvmSRk9bZEmF/EmYuQ3TtK06ksTDeJre
      9uiKojY84WA4gS2LezweCmWNcNDf8sq3FCRJorc9imFazGdyTf++3g0sSRKi+j9LWGQKJTZU
      s5CeFJzd7EnBtCxkScLn85EtlIiF7HCUx+2fkN9HVyzMbCpLSWu0Jj05H49w/SaqIrc0+OET
      iAYNhUKkcgU6Y7aStF6rWCwUoC1ky57GY3baSvjzD8YYe5ixdwBJRmL9AgWbwVEWc8XHzPhe
      BoWSRiwcRPV4sYSFz2srlo4X/nGgyDJ9HTE03SCZK6zD2y4N0xL87ncv1cVHraZvnkgvCiEo
      Vyr4fT500yLg9yFLEpVKhUplaRvzauFR7XiVVK5ItrC83FobYrBa/PwL29m2Ieo2sLXG+7QK
      CQkBTfWc9YBp2ume4XCYdL5Ae9X3k8/n1/U5beEgIZ+XmUQG01x+N7PW2D+KLPF3f+aAbSWT
      bIuW+qOaAM6qVdB0vD4/3R1tlLQKIb8PXdfXvYEdOErxXKpRJHJgWdWgtDUE2Dkrv2NWVRYn
      Mq8zZFm2PZht0ZVPXgV0wyRTKKGZgg29PeRKZdrCIXfwG4ax8k1WCZ/XQ39njEQ2T77UfPe3
      Y4zs0I+1xH/J1VVflmXyJa0lS5Z77aqf1gTlik4mX6Ko6fR2dzK4oY+u9jZX9DEM44kNfgeh
      gI/OWIiZZIZypX4bF9WoTEeWvzaR4NunWufPAeoiME1r9SuV07mtTD5NN4iEQoTDzV34q4EQ
      gmyhRKZQQlE9bN7Yz0BfD4qqIEsSXo9KoVBYF9FnOfS0R7GEYD7duEg5fQMgEPzh968zMbv0
      YtYMzuKk6QaBVXin15y9YVmCXMmWUUMBP10d7XUOolyxRDgYwLIscrncJxI34vgMUvkiXlVF
      lhcatVYuHOqN0h4JrNqhB07yy+pMxLVx9MISeNSlVyjTMskVSwxueLzVv1zR0XQDSZLo6mgj
      GAjUtUEmX3StPuspli6HaNCP6fe65tdaOBNAkiRe3D9Ab3sr7HyPj1VPgEJZwzDtzuyIhgkG
      g3g89R1qWhYV3SDk95HNZj+ZwV9jL+6K1XslFeoHrNcDbZFGW/VKME2TQqlCNNg8YGw5yLLs
      ilKLUdErVYuZRLGsE/B5Gtq0pfezLFfM8Hs99Ha24/f7G5TCZDZPRzRMuVx+LJNnq6jdPRVF
      oWPRty229e/c1LHqZziLzGr1s5YmgG6YFKsmraDfSyzsIxAILNlJyUyOjmiYXC73icX0v/ba
      ayiKwtGjR5mdnWV4eJhMJkMymWRwcJDTp09z7NgxCoUCfr+fbDbLpk2buHbtGocOHeK9997D
      7/fT29vLli1buHr1qu0plCTS6TSZTIbnnnsO3TSbhtcuB0mSUKTmu4YjnglAmGBYJn3dXS2F
      cTjIlzQ35a8tHMTn8zUd+ADlSgVVkTF0nWJxac/6eiIej/ODH/yA/v5+BgcHicVi5PN5/H4/
      yWSSQqGA1+ulp6cHn8/Hw4cP2bZtG5OTk4RCIQYGBvjDP/xDPve5z9khLoqCz+djbGyMffv2
      8eabb/JLv/RLgK0PrAZLTgAhBLmShizLeD0qfV0d7sNVdel5ky2U8CgSmUxmVS+yHvB6vfzw
      hz/EMAzm5+c5cuQI58+fJxaLEY1GGR8fp1KpoOs6wWCQubk5QqFQ3UB4+PAh09PTZLNZ12G3
      Y8cO13y72gZeCZIk4VVtU6QQglgkSGCJkORaVAyDkqajqiqxSAi/z4cQAp/Pt6ytPZMr4lcl
      itonl2vgIBwO895777F7925SqRQ9PT1usJ7P5+Pu3bv4/X56eno4c+YMXV1dPHr0iIEBm85F
      lmUePnzI2NgYnZ2ddHR0cPXqVbZv3+4+47F3AIf1zOv1sqGna8nY/cUwLYtMvoih66jSJx8n
      vnXrVvbv38+NGzeYn5+nr6/PDWwrFAps3LgR0zQpl8tuzHupVOLy5cts27aN3t5e9u/fz9Wr
      VwkGgzx48ICBgQFM02R0dJSuLptL8kmIc7IsIyNjWibyMiEoQgjyZQ2Px0vQH6SnK9iyzbtY
      1sgWivhkVjRJrjc8Hg8nTpxg06ZNxONxent76e/vR5Ikbt++zdDQEMGgLfP7/X46Ozvp7+9n
      cnLStUwdPXqULVu2kM/n2bRpE/39/ViWRaFQYGbGpkHUDXPV+lldKMSjuTjR6ELs/kowTJNs
      vlilEjTwKtKPLI1xLbFLExMTTE5O8sILL7TkoTRNs6XIx7VCN01CoQjhGh1D07RqPkCesm7S
      GYu0POgLpTLlim4r4MJyaSw/aawlh9myLM6cOcOmTZsYGhpa8XwhBIlMnkjQh7qKsVA3AZzG
      Xg66YZItFO2kaMsk5Pdhmmuz3z5pyLJMKBTC4/FgGAbZrE37kswVkCWJtvDqLA1CCBLZAl2x
      xzdPNkNZN+ju7MBTI2I6fdJK3wDkiyXKFTs3w+dRUWXpidj31wM+n61LyrLsxjoZpsl8Om/n
      Iq9yNZ9L5ehpX93i1JISXNENckWb0kRYJqoEHkmAIj9x+/HjwDHBer3eOtGlIxKipFV4lMws
      GVnaDMVyhcAKOQlrhRACC2lVq5eDbKGIbtjJ6qoEsrDwKRJYJsanb11yoWkalUqFYDDo6lgO
      G8V8JodXVZtGli4FeQ0OyhV7fj6VIZ3N4ZEEsmWgsPaQgtVivQKnHMUX7AA9wxQEfF5626PE
      q2wUraBUsU2Ullj/USWEwOf1ruqbS1qFmfkklmmgCBMVC57Auy2F9egfIQSFQmO8UHcsYmfB
      pVo3o1vCWrUksuQEMAyTyZlZMHQUrB/JNvrv3r5OIre+IcAfjc7wf/zJDzFMURdZGs+s7Kl2
      eH6sNXiCV4REy7K9EIJUNkcylcIrCyzD+MRF0ES2zLffv73u9/3jd24wk7Stck5k6aNUllKl
      NUmjNuusFTQVgUpahUdz8wQ8CqZpAMoTT05utpr8Nz+2G6/afFCsdRfavtHOCVWUhefFQoGm
      LvrGd7RT+Z4EDNMgm80jTA2vx0vAv7SfZTaRQtfKeBQZwzCa5mqvJ5rduzMW4KvPbl02CX8t
      eHq4m1ioJuW06t1PZgsrip+yJLecaules/hAJl8gnkgS8nk+UWrC8fFxbt++7T5TlmX83gUW
      tMuXL5PJZB6bFa07FuC5Pf0NvBat6AFSEzaM9YCb5SVL6LpOoVhANxt3XMuymHo0D6at4K43
      Q9xSMAyDDz/8kFKp5PaNIssE/fYYSSaTXLt2bV34ZJ8e7iLoa1xkVrLvlyt6A89sK6h7UiKd
      RVgm/ipjwydJgjozM8Pg4CBXr14lnU7T19fn5nc6bGTlcpnf+73f4+tf/3pTFrPHgmRT8TT7
      XCEEyVzBTuoJ+FZMzl8LwsEwsuon4FWxLAufp97/ohsmjxIpgh4FZ936pPonk8nQ0dHBmTNn
      2L59u+tn8Xg8dHd3c/r0aV588UW+853vsHPnzsdOU2yG5ZKDdMNkPpMjUDV2rKZN6iaAR5GQ
      awK13Ai9apyFc+xJNXpvby+nTp2io6ODzs5OLl68SH9/P7t376ZQKHDnzh32799PJBJZd5lX
      liQM06wzvWWLJcqajizLtIeDdEbDZAolssUyiizREQmtS1tIkkSpVCJXLBPsbMfv8zWupMIi
      7GvsG6jPdXhSfeOYlC9cuEA0GkVV7SjS/v5+vvSlL/HGG2/Q29vL7t27n8jzF3+VsyhZlkBR
      ZAa62jEtW5ezhCAWCrS0UNW1ssRCYzo8kA7fj/GEFa1gMMi5c+f42te+ht/vp62tjUqlwq5d
      u8hms8TjcTZv3ozf73dZGWpxaypNKr86hVk3LDIFO8ZJqeb6CgGX78VJ5gp4VJWe9ihdsbAb
      /xMLBehpixANBpjP5JlLZamso4FAVdWmq1jtYuQsSE4YwZPun2AwyOTkJBs3bmTfvn1Eo1F2
      797tWtbGxsbYuHEje/fu5caNG03vUSg/Xhs5C0IiV2Y2VSCeyRMLBehui7gLkaoodLdF6G2P
      Uq7ozKVzyzKJAI2sEM1YfxfLmk9C6Vq84lmWxdTUFIODjcX1mmV3XZtI0N8RojPaeqTmpbvz
      nL81y9/8yj5yRZsFORL0r8r2DLZjzTAt/F7PmiJFHRhCoqPq6XXaw3GAFQoFCoVCU2ucwxJh
      WZZLV7KeaLbrT01N0d/f39Q40mwizqZL9Latrl0n5/Js7AqhyBIziQyKLBFtcWV3oOkGmUIJ
      CWiPhFAXBTI2sEI4H7C4oWsngaqqdSLR4zS4Q5ikyK0rMNcnEtyaSvGVY1vwexc6YC2T0skJ
      yJXKRAKtD95mlo5yRUczBZYlqBgGlmXiVVV8HhVribxl1aNiWeD1evD7vIQD/iUnQLlcdvtm
      8fOdgehcW1vI4nEWK6efH3dSPe57rKb4SLMJKIQglS+hejxoFd1O/hei0Qxam1zsxljX8E5a
      llXHHPC4O8FqDWaSJPFnH4xxfzbL1g1tPD3cVfe3S5cusXnzZjo7FziBksmkyxTmwBEdKpUK
      bW1tLivC4nPK5XJdXYNsNrukAu73evCzQOwlSRK6YZdVlatOLkmyte1oKIAQdkGS2jZcjne/
      9r61/VK7I9ZSlzvWpceBEKIZFeyy+M7pOwD8lRP1hdGvXbuGaZps2rTJ7R/DMCgUCsRiMSzL
      Ip/PE41GmZycZGBggIcPH7Jp06amBMTJZBJZll26Q8AV1RZDkiQ6IkF7wQ7Zi4wAlN/8zd/8
      TeekQqHgTgBnJXEmQi1nvbO6rMd26zxrNROpuy1AZyzIs7v767a0s2fPsmPHDqamprh+/Tpe
      r5c7d+6gKAozMzPMzs7yxhtv0NnZiWVZzMzMMD4+jhCCK1euIMsyo6Oj6LrOyMgIHR0dTE1N
      8dprr9Hd3c3ly5dJpVJ0d3evOLCcAQoCVZFRJFAkkBHkS2XaohHXzl/77Yurv5imiaqqdo1e
      w6hjPnCSbBzUTgYnbP1xF6jVsFo7CPs9bOwMEwstxC5ZlsWdO3c4fvw4H374IRL1edoAACAA
      SURBVPF4nNHRUcAWvS9cuIBlWXz/+9/nwIEDvPfee8zNzRGPx7l16xb5fJ5Lly4RCoV4//33
      SSQSaJrGu+++SywW4+bNm6RSKebm5ti0adOy71e7sNd9WUWvoBt6A4mpx+PBu8hN/6Okxt67
      uZOfe35rnfgD9ort0Bpu27bNDbWdnJzEsiyKxSI7duxw9YqLFy8yMTHB1NQUGzdu5OHDh2ia
      RjKZ5OjRo1y6dAkhBPv37yeTyTAxMbEuSSSqomAY5pImu2bHLGFR0St15kBnEfJ4PHUT8kfZ
      NwCDPREGe+qD0mRZplgsUiwW2bx5M6qq0t7eTm9vL+VymUAggGEY7N69207j7Ori+eefp1Ao
      sGHDBtLpNLFYjKmpKfr6+qhUKmQyGYaGhujr62NycpJr166t+l3rdIAHUw/c1cOjehoo+JzS
      OE5izKetfle5XObjjz9m06ZNdHd3k0ql3G20VCpRKpWIRCIueW2xWKRQKCCEYHJykuHhYcbH
      xwH7Ww8dOoSmady4cYPu7m6mpqbYunUrg4ODq1pZDdNElqWFlVSS8Xi9hIOBFe/j6ADZbJZ0
      Jo1cZexWVU9dco4QC5V1nP75pHw4rUCSJOLxOOl02s2zAAgEAhSLRW7fvs3TTz/NzZs32bt3
      L7lcjmg0SjabdcWgiYkJBgcHeeutt/jyl7/sjr9UKkUmk2Hjxo14PJ5VkQk0nQCwwOjmFHeA
      tdFbryeu30/yYD7HC/s2EvI3KkTOe85nSnTHlrc4aLqBbwmlKpfLNdQzq8VqOIaEEBg1Xl2H
      mbhi4pKFLfueiyaAA5vOvN4b/KR9ASthJZIB+72kKoX98sg3qbnWKlazAy65hLtKlWVimIZL
      XfFJeodr8ShZ5Hdfvci33rvFn757s+k5jlL4v//7j5hO5F05r9m/qfkks8kMs8kMhVK57m+h
      UGjZa1crYiiyw3StIEmyXTikShKm6/qa7fcCUS3A9+SdlCshni3zv/7Rh7z24b0lzxFCMP4o
      w5/8l5t1+srif+l8kVSuwGwyS7ZQalD2V/q3GqxoV6pVxixJuPbuTyuEEPzjrz9D1zL+gFSu
      yMbONrwe2+mULZbJFBZymH0elWgwsOrk92aoG5TSgnhiVEM7DMPA6/WumQPItgiZCGHZ5tR1
      rlPcKqbmc0zO2Q7Kn31+65IDcbA7TOfxLcveS6voLvFwUaswl87h3M7xBSy1e68WDSKQW8+q
      WjihdkVJ5YuUKwad0RCBVcaurweu308yNZ/jxBIiUKuYS+foWSatUdMNssUSpumIFHZobsi/
      Pt/s9/spVgy62qJYluUqgc3uXSsCZbIZO9qxmvixWAebmk/ZHE3R8I9gJ5AYuTfPpu4InZG1
      iS6wwGe0lDPSNC2yxTJaTSJWwOslEmwSPtLKWzdMgKoCLEkShmm4NzWrxdE6oyEyhRKqIttO
      G2n9IxLX6lxrhdk4Uyjh86ir2sWEEC7fjqLIFKo/y7Ls2pZbQaZQIRzw0NnRTjKbp6stWme/
      b6a4LtYBAv6ALUNXfQHO+YlsgVjIj2nZ9JRdsUjTyujrAV3XuXz5Mvv27UOSJDehHWBubo62
      trYGMoVWRcdmBa1XQkmroOkGfq+HYrmCYVlIQDjgX5EmsWGU1TpPahsvmSvQWa21GgsF0A2b
      hGmtfI7LwbIsvvWtb3Ht2jXGx8eZnZ11bcbFYpHf//3fJ5fLYZommUyGa9eutVzUwVF+zVXI
      85IkEQn6iQT9BH1eutsi1cT41iMPbz5I8ev/6j1+588vUKlUbOXYMFzC4NUMVEVWENbCsx1u
      fFVR8HlU2sIBZlNZt0D3eptF33//fbZt20YulyOfz3Py5EkmJibs77x5kytXrjA5OcmDBw+Y
      mJjgo48+aum+mq7j93hcO32rMn3A56WtWkKrIxqip9o/mcLKJus6OUJVVHw+n+t4cRrYrutV
      L3K0hQOkckUkCQJeD5YQa8pnbQZZltm0aRPpdJp0Oo0k2Tz2+Xyejz/+GEVRmJ+fZ3p6mlKp
      RCqVIplM8vzzzy9735Jm5/Q6PPKi+p9mSS5Ow398a47L9+Z4eriH47t6685ZDb1I7fB2Bn+p
      VHLJeh0vbzAYbOpkkyQJn9fn5jcbpuHmJyRzxTqRTlUUOiJB4pk83W0RDGGiriLUZCW89NJL
      vPfee8iyTHd3N4ODg0xPTzMwMMDdu3cJhUIu3eLs7CzBYNBmb15hV0/nS/S0Rexvk2waSVlW
      mtYsc/qnrNt9EPA2tpl3Gf4qB/VnSNW0vyqTsvPCmUKZ7rZGJa09EiSRtRkWgi0wFjiwhF2J
      0Lm/blh4ajK/LMuiUqng8XiIRqPMzMxQKBQIBAJ0dXXx+c9/ntHRURKJBC+99BLvv/8+w8PD
      Kz43VyzbA6LawLC8yXBsOs2/euMyYKdSdkaPs23DQmGMVpTk/zLygAfzOb5ybJh//rc+T8hv
      r3ASdvxOqxSIkiRhCQtZlimVF3a7pcy5HlUhEvSTzBXpiKyO/cK0zGVF24mJCVRVZceOHW6y
      zIkTJ8hms/z8z/88qVSKcDhMMpmku7ub+fn5FQe/ZVko8iK9U5Ka5meA7Ri8/TDD737nIgC/
      /lcOs2tTfcUeo4VC43U6wNzcHIqiYFomXq8Xy7LIFoqYpkVkmSjH+XSerrYInhZ3gNoAOFmW
      +e1vn+fvfe0ITmTQYh1genqaDRs2rHjf5XQAw7TIFIp0REJuJUmBWDIIz7IsPrrxiH/71oJ3
      8W+8sp/n9y6UN12JI+jaRILf+fMLAGztj/GPfvm4+zddSHS3x9zypYDr1a19H0cHyBfylEpl
      5OpE8Pl8lMvlFd+hWK6gm9aSxaKbwRGbVEUlW6ygG1ZdlG1t3zgh2YHA8n6XlcSZeCZPRyQE
      VdIFR89ZiiLStCz++J2bnLoyBcDnnhrgr/14fSJOPJNflsLm+v1FZVKdrVVRVLxeH5VKhXxR
      W5ZrRQhBb3uU2XTOzeRfCXbstupe/xu/cKQhpqV2MPf29j526Z5UzubzkaSleToXv+PBbd1s
      6AwzncizoTPMoW3ddec8lmRd3QG9Xq+72CxrxxfY5s6q0inLCsVydkUq8KDfi1YxSeeLLfMg
      1Q66aLDx/rU6nyzL+Hy+x9YDLcuq0pq0KqYJnt3dz9nRaQCe2V1fd9m0rBXrOIw/ytbvALNz
      s24H+Hw+EuksiiyvqEmLamfOpXLEQkGC/idbPXwtaGb61HSTVF6jbxkqbktAPFOiKxZgcXsm
      c4XqqtUcQgjevfywKgIN1Xmny7pJX3fniqKBuwPk8xRLtlJnh0N4mJqLL2vOdd5BkiTyJZuB
      un2VZGCfBNL5IgGft0GUe5go0BnxN8R81aJUqYZULDqnUNYQgmW9yYWyvrQnWNM0ilrFHfyS
      JOP3N7dVOy7wrrYwpmXTB8YzOeYzORLZPPoSGVM3H6T4ox/caEozks5rGOtEP5LIFmgPB13R
      y5nzZ67P8NvfPk9Zt/jjd25wbSLhXiME5Eo6EtDT1jj4YWUl2DAN/soX9vM/fO1Ztm/uJxaL
      uXWH22NRimVt2fDnpWBZFvF0pi75xuPxLqk8A4T8HjyKxHza7pd4Jk88k6+zpy/GuVuzFLUn
      T4dTMUw7Z8IpdA5UDIvf/vZ5Tl19yGyqyAdXH9KsmQJepakCXNHNZRduIQTRsH9pT3A6X6Qz
      siA/ybKtkHg8niULKkjYW24kuLDSWcK2S1fyC4qbR1WIBpeWGdN5jf/p90/x+acH+JWXHj/H
      1LQsPKrihjJIiowEPL+3nz2bOyhrBu9fmUIC9g3ZcervXp7im+/d5K9+fhc/dmCg6X2XG7a1
      5mTH0lNr5/d5PaSyedskWw15bhVCCCq6STQYQFRDVGRZwuv1NyWZgqoVyaMSqsk/ENW+yRaq
      NQIkUGWZaCiAIsvcmkox1BdtYGmYmM1y/X6Snzg21PI7LwXHMgc1yTeKjFeV+Y1fOEJnxM+5
      W494+8J9ntnd7xpL/vO5+wC8fLR5vWFLWMsyfTihPU1b3V4pcSsHmpbNyqBpGsFQCMMwsZbQ
      sO1rLcYf5djaH0OWpAavnm6YpPJFuqIefvL4JhLZPAGfh3A1Iysc9PL5pwc4uK1nyQ9oFfmS
      RrhK9uuutMKmf/B7Vfra7UH6O7/2IuEm8u5y0A0D07SaWoOSOY3OqJ2/7CS9NMT9V2P6HW6f
      ViCEIFMo0xkN22HVVW+1pmnIsoLf71+26IUlLB7O26LUYE+E6KK+sY0FJSxL8MrRTViWQbZo
      Z8s5rx8JeNnQuT6sHLlimZ72aEPOiSRJbKw+48S+jXWDvzVI5IrlJY03qqJimVa9DnB7fIJI
      MECuqNEeDiLLEoZl1qklwaCtqWua1lQxFUKgmxL/7+uX+e+/emBZ+a0WJa1CvqRVG9l+YiTo
      f+yYj1oriWlZSJJNoFTUDP7pf/whn3t6gC8fblxFhIB8WSfs9yxpihNCEM/k7fj1GmvDX3x0
      j++eucPPPr+Nrz7baJ51klnKhkV7xC5StxQNvaMDJNMZcvk8Qb+PRLZAT1vEXZxqU1X9/gCa
      Vl6Ss1WSJF770A75XpyxtRTKFb2hwN160MM4lrnOaNh1fjnRrZYQfHxzlmO7etdck8Ep2t0W
      CtRllL165i6nrkzxv/23z9bvAB2RMOl8ya643WTwAxSLhWUVN0mS8CiCv/uzTzV1YCyFgM9b
      Z9FY2J5t0cnv9XDjQYat/TEU2aYntKq7jSLLVfPgQiPKsoRpWXUK+WrKjjqBXZHA0p0sSVLV
      r2Axm8ri93qa1r6KRCIN6aW11SpbcVD5PCp5SeJRMkNfR8z1wC9OpywWbefkUqHJlmXx088O
      rcop5vd6GgZ7rlh26xhLEsiyh6n5PHuHOmx2asN0+8iyLCRZQpFl+1i1jywh3MXJcQQ6yJd0
      vnvmDns2dzS1RLUCO37LRzpfJFMo0RkLN4yBhqT42th/p2rJ4qC45TrOseE68pwiK6umq2sG
      SZL4R984wyvHtrB/qH1Zv8Rq7tlskBTKBr/xr08B8Nu/9mLLgXclTSdTsM2NhbJJZ9SPqqqE
      QqEG30auUMLTQkxSbVJ8bZFxux6W1dA3QNNj7t9w/CUCSZLxqOqqUx6b4cq9OG+eG+dvvrIH
      n8cmAlgtvfliLNU/qZzGvz95g1/54m7aWwy8E0Iwn8mjyBKd1WBBIZokxdc+3LGX1zY2koQs
      2yU2HYtKbWPbO4AHw1zII6gYFTyK57HZI/7pX38eIWyO/uXku9Xcsxl8XoWnhrvdn1tFwOch
      4IuRKZQwTB3D9OCrli5anLKo6TqRVdKv1MKpKmMJC2GJOsZqVVFdpuTFC5ciKygeGd0wENU0
      S1VRV8XK0QxPDXfx9NZuSlqFdL5IOBBb+aIVsJ4xTJIkVcMsTGZTWQJeD9FQYOkdYLkXqm0o
      y7IwhVUl1bLjUGqtDLpp04PYVojG2ToVzxP0eehYZQhtrlimYphugN56Y6XsplYQz+TxeDxs
      6uuuswAlMjnaI+GW+OyX2gEWw955be2ptv0XL1K1cU+GaWBUdwNVURtioiwhmIoXGOxeXa6C
      adkiYU9bZN3iw9YbJa1CplBaXaHsZp5KWZbdQKvF4beSJOFVPXhV75KsylfHE4w/Wn1BvUjQ
      T8jv5VEyu+pra/H9C/f5/oX7dcfO357j7/3+Kc7fnnOPZQoVfu/1Ky6T3GI0Wz27YmEiAS/3
      HkwzM5+gXC5TLJfxqMqaijksB0mSbN1tUfs7qzvQEFagKio+j9feFZqEHOSKOn/09nV0c7UZ
      cDIbOttIZAtuddG1oFwxefvCJOXKgrFFCDg58oCTIw/q/ALX7ye5fj/Z8r0DPi99HbH1qRTv
      xGwstXvYbMLNV4JXjm7m8Pa1mTv9Xg/dsTDTiTTGGgq/SZLE+5eneP/yVN3AGZ1MEM+WGJ1M
      LHP1Ah6livyDPzjNt99vrD4vOxYiy+Te1AxziTTRJhxETxKyvDRtuCRJbv7HYsRCXv7xLx/H
      o6xtsva2R9EqOplCa6Hqi5HIlXnz43ESuQWzbq6k8613b/Gtd2+RKy1Yus7emOHsjZmm95lO
      FPh/XhthOtHoI/nR5M+tIxTFXm1mU1miQf+KsTG1EEK4AWq14s7Pv7Cdrf1tHKyJ/bEswVeO
      bSHcxCo0OZdjJlkA5vjFz+9oKjr5vR76OmKUKp/Oel1PCu2REPmStmJgWjNs7Azxf/3NF+pq
      REQCHn7xCzvdnwFMS/C5pwZoCzcXo8ceprl4Z46ntnY3+C9WpQN82jGbzNLbsbpsolbwxg/H
      efWDMQTQ0xbkf/7Fo3U6iyXg/O1ZBnsiy8YVabpBIBCgLdp6IbdWdYBPOyq6Qa6krbvOlsxp
      /Na3zjGXLiIBP/fCdn5yUc6xAKbm8wx0hxvM+v/1jvYmiAT9FMpaS5lQhimIZ5f2mDpI5jR3
      8APMpYv8xUd3686RJTi2s7dh8I/cjfPPX73EyF2bc1XxeFc1+P//BG9NrE+tD+Rx8Rcf3WUu
      bXu2BfDqB2MNLOESsKnJ4Nd060c/AWbTJU5eerAu9/J6ZPKlMiC5FpClcPr6NP/kP5xd0fSX
      KWgNMT+p/MoTR5Ik/vWbV7hyb55//eYVJEmiomnk83kKhQKlUulTXWHTwXc/vMuj5OOz4Qkh
      EJbjwLRcE/lS+LNTY5wcWXlcLO4LgR1LthI03eLv/5tTP/oJ0BH2sW9L18ontgiJhSyi5Uoa
      ndi7gX/89WfqVqJrEwn++J0bdVGogz0RetrqV/ajO/vcn8sVk8v34nWWCrA7fLjPtoUP98WQ
      ZZlgKEQ4HCYYDDYkvnxa0d8RItCkZNFqIRC0R0Kk86WWvvvLR4Z4blGM/8NEoaGda/sCbBG1
      lpbRtATmMlHFa9YBJufzK9qH17uwnhNOsByckqdeVV7W+tQMf/zODd6/MsX//Wsv0hZaoEC5
      eGee1z+6SzTk5ejOPk7sXchOe/X0HV4/e4+fenYrP/f81rr7mZZgci7HYE8En9eDgUTHKkWg
      tegApiUoVwxC/uXDONZb31suacnxRcxnctXQdGtVEQIVw+Lv/5sP+MqxLXzp0Ka6685cn+Hj
      WzO0h/189dmtdfrZH/zn6wD86st7m96zjh3ajiNp7YWkajTlSvgX/+JfcOzYMa5evYqmaXzv
      e99jaGiIW7duEYlEmJ6eJhaL8a1vfYubN28yNzdHR0cHN27coKenh0uXLhGJRBgbG6O7u3tF
      2dGrqmTyJbvA3iopW/YOdfH5pwaIBKpc+5JMoWzwW988R6Gs8w/+6rG6nGCwrUPTiQIv7t/Y
      sFPIkkR72GczNqgqpgUB/+ocfk6otK7rLWfFCWEn3Di13ppBkiRGR0eJx+N0d9vWrsnJSWKx
      Rg/unTt3uHjxIsVikdnZWXp7exvOsZ+7Ei2iHS7i99oBhqtZnBRZYv9wNzsHYkgIt28zhQr/
      8i8uc2BrD7/0hZ0Nu5XPozLQHaGnSXEORV4iHNo9YZkVvD2yMj34tWvXiEajjI6Ocu/ePY4c
      OcLg4CAXL15ky5YtvPfee3VEs9FoFFmWmZ6eZmRkhLm5OY4fP87JkycplUoMDQ3h968c/iBg
      Ta59VbYHbG1HrhQWsXeok31bulacmFpFx7OGIm5LYbkVXFGgY4UoWsuyyGRsB+Q777yDEIJH
      jx5x9OhRrl+/TltbG7lcjkOHDrmFCovFIpVKhT/6oz8iHA7j9/vZsmULr776Kvv27eOnfuqn
      Vnzv9kjQpthZJpNuKWzsDNXlC7eCvZs7lv37sjvAhx9+yODgIKdPn0aSJBKJBOl0GlVVuXv3
      Ln6/n5s3b9LV1cXIyAi3bt2iWCxy8uRJdu3aRTwe5+WXX2Z6errKaKwyPT1NX18f4+PjbN68
      maGhITcn9rnnniObzbqFK4aGhrh37x5dXV0EAgE2b97c0odblqiuMi2EGugmp65Os6FzoXxO
      rcdbliSO7OjlyI6FsNxkTuPqRIKNXa3btbOFEkGfx6VEccoZrYSldgBJkjhz5gyzs7P4/X7u
      3LlDLBZjenqahw8f4vf7mZmZIZ1O09bWxquvvkqhUOCHP/whfr+fYDDI2bNnyWQy7Nmzh8uX
      L7N9+3aCwSDz8/P4/X636N3s7Cz79+9neHiYe/fukc/nCQQCKIpCW1sblmVx6NChprvHYsiS
      BIKmBS+aYXIuR6ZQcWsNLI5G8HsVXjm2pY4RolDWq87Zlft/WR3go48+4sSJE5w+fRpd1wkG
      g25Btq6uLiYmJjh27Bhzc3MMDg7y4Ycfsm3bNubn5zl+/Pi6y5it6AAOWg2We5Qq8tvfPs9v
      /MKRZW34tfj41iyvf3TXDc5rBdlimc62KB6PB/8qKGSW0gEkSeLDDz/E5/NhGAZbt25lfHyc
      ZDLJxo0bSSaTLtHv8ePHuXTpEolEAp/PxwsvvOCGJK8nWhXRMoVSy3XYlqo2sxy+8fYoOwfa
      eW5P/4rnLrsEbd68mZMnTzIwMODOOk3T3AJ2Q0NDtLe3UygUyOVyLjVGIpFYV1vvWlCq6C1N
      gL72IL/1N15AXYW7/9jOXo7v6mv4vuUC6DweD5FwmNIy2VqrhVNeaOvWrbS3t5NMJgkGgzx8
      +JC+vr46ykKnyHUkEmF8fJzBwcHHZtpYK0zLQjfMlsKlVzPwHfzKF3c3rP61AYJ1x2t3gDsT
      k1jCltOUKovxWrEWGvFWURuVupRMvRIB7mpRrpjcnbETcppluX3/wn3evzzFP/rl400rnetC
      orezveH4SnB2gHQmy1wyTVs4iKrIj23FeZKD3+mTpfJGhBDEs3m6W6iPsBostQBJksT/+acf
      A/APf+lY3Tl1PeXwxiRzRfcj2sKBJxrS6iTcWNWXWvysxR8lhHAz1STJJoj1qI3yZDjge6wi
      C4vxje9f5+Nbjzi2s4//7qeeavm6+UyJ87fnOL57Az0da1eAPapCRzREqlocGgnaQsHHTjpZ
      CQv9Y7VkWLDTNC0URXHD4BfzMElVPWA98dqHd7l0Z46/8zMHl6XGX4ymVSKdoCUhBKlc0S7A
      INmkuK3wLbYKl+OyOsgX7zgTs1nO3Zrlay9ud4+ZNWmaDntZMwR9XubSuXWbACvhy4c38/KR
      obrJKkkSv/1n55lPl3jv8gP+5f/48pK5v61AliSX4U0Iu5CEbtp5ztHg+nHmOzBM02WdgMaV
      fHIuz0B3yDUOON53SZIwTQNZWtoPI8sShmm1RKS2EiRJ4tKdOSbnckzN5xsmgBCCf/hLx9yf
      HVQMa3kdQJIkOqrBS3aDl0ibpXVrcCdevTZZvRabe6IMdtdvk4qsMJsuEQ16CHjXv2D3Uvjr
      X97Li08NsLV/aUvHSiLfemc4tdeYEtOFolsQOhz0u1QjjwM7h9f24jZLm9zUHa4jDFgsli0n
      orVHQiTWSQwSQvB3fuYgU/N5nt7aPKpgqbZfsyc4Uyih6UaVh923qjDkpV6wVlFx2Oaa4Rtv
      j3JsZ19TG68lLLezCmUNCWndmOoikQiKopBOp5c8xyGScvQAWwSa5bl9gwxt6Fz1hF2LJzhX
      LFOq2KReIb/vsb9/sSxvCasactL8W+49yjLct3JU7kq8pquBJEnEYjHXV7HceXW79HqEQ+dL
      ZYqaHdgV8nsJrdLbuRjO1itLC7WKW4ETaagoijsJapVhVVVdItpWYZqmvQLKMp0d9gDOZrN1
      9/mLj+y6WD/93Fb+wR+cBuCf/eoJt6FzJY3NG1c2yTXD44ZDF8oahbI9III+72OLhLVi62pr
      CDvFAh2xNZ7JuwYXwK1wv5p3cUSugD9AOBzGMAyy2YUsQQGcuvKQ7Rvb2NgV5p9982O+cnQL
      T1ULrK+L0BgO+F1Sq2LZrukEEKwhu1rNRzlyp8D+wKXk/MWQJRlJWbQy1cx2y7IIh8N2vbMq
      BfuKYkuVrbhWAVRV1aU2SWTLfPeMbav+3NODfP7AJhB2ZzqWFm+LFOhPAg41CNh5sPPpHALw
      e9QGUqxWYNXoBKZpNrb3MlisD3REgiRzRVfn9Pl8SJLkMmavNBkEC7tTrf5YSw42NZ/n3719
      nUPbevh7v3icn3xmG5t7FhyYTzQhxiG7EtgxGa04P2pLisJCuuVakMyVmZzLsn9Ld51dOJUv
      2nyUPl+VJE6q+gyq1NyWPbhNy0LX9ao4ZvPWhMNhJCSKxSK6rqMoCicv2RTdXzw0AEhV1jc7
      1VDTNIKBAB1rlHWfVEKMputki2WEAK+qtMQcXbv6O78vlwq7Eh6livg8Eu3hhXGhKArxTB5V
      VdF0WxKIhatlqKqisbOAGVVfk0DgUT0u0zZCkK6GeciyzKU7CQZ7w/R1hNz61oqsoFUqK0+A
      tfgCzlx7yL4tXa77ulVYlk3TUWt1cBp4LcruP/kPHzH2MM1v/MJR9q8h5NoZ8JZli1amWVM3
      IZu1V3hpYRXy+wOEQnY1FJszP7hmVjMHy02AtbSLJQSlskFoGcKvpVDRF3bM2sG/ljEyncjz
      v/zbD3hmdz9/+6sHVn094PItOX0DduHtslamkC9gVaUJB+Fw2A4rqeggQSgYai0f4Ny5cw3H
      bt++veT5bRE/HlXmnXfe4dKlS6v6qMWDHyCTyTA5OUkul2N8fLwpAWw8HqdYXEjcME0TfyXO
      1r4I7TUbj/Pe9+/bTBCzs7O88cYbde+ZTCa5evUqhmmSzOTIFkooqorf73cHQCQaIRqLEo1E
      aW9rJxZrIxgIoMgKXo/XbtxPwEJ14cKFBqfWcn0jhKCg6YyNjfH++++TSqVW/czFK//Vq1cB
      u92Wevbk5GTd7w8nxnhmdz/bexcWSedaTdN49OgRYAfqvfXWW+7ktyyLdDrN1atXyRZK5Ipl
      VI+HQCCA3++3dUBZIRgKEQwGiUZjRCNRYtEYfp/f7ptQiFDQtqC1JFynUin+5E/+xHWl79q1
      i1OnTqEoCq+//jovv/wyd+7cob29nampKWKxGHs3v+xac959913u37/PILiQqQAAIABJREFU
      tm3b2LVrF5OTk7zzzjucOHHCDXM+e/Ysv/7rv04gGGiI49d1nWKxSCqVwjAMbt++jd/v59Sp
      Uxw6dIhEIkFbWxuRSASv14ssyxw9epQTu7vYvn07t27d4srFj1FVlVQqxb1793jw4AGvvPIK
      lmWhaTZN+dtvv83t27c5cMBekRRZJhTwAxKZXKGOeycatp1QlWqQmsfzeMRfa0U6neb+/ft8
      4xvf4JVXXqFSqWCaJpOTky4xlsfjIZVKEYvFqFQq7NmzB1VVKZVKzM/Pc+7cOVRVdX0Uuq4z
      MjLCvn376Ovr4/XXX2f79u389M/8dFOxx4kqvX79OplMhqtXr+L1ejl//jwvvvgisViMc+fO
      cfDgQbq7uykWi5SLef72V1/g9OnTvP/++9y7d49t27Zx7949fD4fDx8+5Jd/+ZfJZDIEg0HS
      6TTf+MY3eOmll2xiMc12csqK4vaNTU4FkVAAX/VbtIpmU8M0qcAJLeQEf/TRR27En6OkSJJE
      f38/uVyOnTt3cufOHXdl3L59uxtfHggEmJycxDAMt0ja2bNnuX//PgcOHCCXy3H48GFisRgv
      vfQSoVCojsemFhcvXiSTydQ5zfbs2cO+ffvYt28fBw4cQAhBLBZzP/T69evMzs66ypRlWe77
      bdmykDg9MDCArutks1na2xfCFQzDIJVKkUolMfUykjDwyAKPKhFPZYins8wlU8zMx5tyJj1p
      PHr0iEQiwYMHDzh48CC5XM7WZ6rm2qGhIXenA1vJfO6559A0DUVR3ChSR66emppiZmaGVCpF
      V1cXnZ2d7Nq1i23btnHw4EGX5nLxRI/H4+4uIEkLutKP//iPE4vFOHLkCJs2bWLbtm2cOnWK
      PXv2kM/nXcnC4Ux13q+zs9OdjD09PQQCAUZHRzly5Ig72QAy2QypVBLL0JAx8SoSPo9CKpsj
      kc2RyuZtPiZNW7J/nogO0AxXr15l//79y56zVLTnamTdS5cusWPHDkKhBSdRpVLh7NmzdHV1
      sWfPnmWurodlWejGynm71v/X3psF15GdeX6/u+/7CuBi3wgQXEGyikWVSqpSayt1S724Rx3q
      mImY8NgRDveLIxz2g91hOzz96HHPg8cv3dMheTSjUVdL6qlFElUqsVgLiyRAkNiI/eIuuPu+
      L3nTD5cACWInQRLVhd8LgETezPNl5rkn/+dbTkOk9CDeXy6Xo1QoMOqa7/9POyoctgbYif3c
      n53ih/b7jBSLRebm5jh37tym7QsLCywvL/P1r3/9QPY8qkm2QyJpFkgulqsolSoUCgUKhQKT
      TrtR0n5TB0ilUlsa8Ly+1dajA3cKZjoIpWoNjVKx68UREXfNGV5nt8TtHY8tNqeDRURsZtNT
      xVJJpVIUCgWlUmlLB3ieI06tLuwYtnDQdlRrdZQK+VN7xtdngA72mea9kUglGLSP1QY95pgv
      Gi+8KsQxx7xIjjvAMV9ojjvAMV9ojjvAMV9oNnWAuem7jI2NMTY2xlpsbw9hMZvcqJffqFe5
      d/cuxT2qH6+FtilhXS/t63wHZc23zNjYGIvewKEfu14tEks8mJMWG8xN3yOZ272EYCIcorrN
      pFIotLbn+XKp2Ma9Gbs7vY8WihveVIDo2ipLq5vPs7a8QP5FFauulxgbG2N8fIJ8+cnXENiJ
      R23PJaNMzy1tmi8qp9bwxfKbO8DgyTOkV1boHR2l1bF7/urK7Dg//Jv/l6kHixK8987b9AwM
      8O7b7xyeFY8w8/E7rOwchr8tn9weZ3R0FG15jet3V7b8/9131tua5t13Pt73cdOhFX784x/y
      wY0pAK5dfQ9zWw+fXH2X0jNKtTVYHIyOjrK6ssLoma1Vzh7nZ//x3/Pjf3gXgKRvmkl/Hlne
      z63phyEJoZW9OkCZd959f5vNYd59f+yAFjxGPsxKGs6eHua9bZ6ZlbH3mQk3Izof3qf98cG7
      P+P/+dsfAyCUklz9ZJI2s4yr1x6G9JTTIfyx/G6hECJX3/0vmB0ucmUYttX5nbeBR1tC4xhg
      9OR5vieWaNZJbiBIlOg1GuwKSFcKfPirD3A5raAyUV9bJSopoTd2UstEaH3z21x95xeYXe2s
      +Nf40z98lYmbM4TUKdL6Nogt4hn9Jqvjv8XiasXt6X7gUR5DNdxDJR0mkc4Ry5b51htf3vVi
      iGKDeCqDwdHB+I3rVFARjye48soFVla8jN2ZxGUTWVlZYHaxDTEbJlmBTDzOa998k3/4//6G
      U6dPMz23zPBgD9FMjW++foV//v3v8db7TeszZQGXWc+ZXjuz/jSJmQ83Xbd37kUxaPW0yWqc
      fLOFOx+9jyA3sLC0wr/4wT9jfHyCK8Mh/vFumkEn1JUerlwY3NUu//w95sN5KCYYfvn3uPbO
      f2JgaIRlf4Q//u6b/OGf/UveeustACbuLnHpzT/AIG1w9xdvc78WIlJoEPIGaLsCH/z6XXQm
      C6WGEoeiTKwmx2Ky4jSKrKwsMz3XTT6yjKg2YbY50QsRVpYXmet2YFWDNxjFt9Y870EpF3NI
      5AqEcoZ3fv0xTocRuc5BwecjkdRiFDqa92lsjL6Bfq5/8DucTgd1uQ5VxkfG4CG+MEnHiRF8
      c/f59p/+GV/99h+SLDVt989O0HvmEmaXgdKNu0S99xlfiqCrhJB2te2iASoxaooWLl58iXK2
      Wd67f+gUX/rK1wl7Z3a2SCIhtnyPlpOv8NLLrxAPeYEyJy98jd/70oXmPqUwVXU7Fy+MolM9
      2gQpJ8+cY/RkD/FUAZPJSK1WR61S09HRwckzzZEpkYiDREokvEYiHGBs7C7bfZHVS3nGx8Yp
      oUKBQDiR5fLLlzjjUbNW0tHd3cXouVN4Ojro7u5nqK+LlXCCL11+mVfPeLgzt4bN2cq50UtY
      TEbOj15CKO2xnFN163Vr7T7Jn/7B723sEk+XeeXlSzjMmwtr9Q6c5KVXRslE4izPTTO76N3x
      NJMLft748iu88fpL3Lk1icHi4Pz5C7RrJCR2cV5LJBIWg3Feu3KZ/i4PkGVhIYJMriSVjGMy
      WxBqVRRKJW5PB93dPZwc7MFsMVOt1VApVc3r1TPIYE8HqWSChgihSIRqIcPY2Bip3P5WhPEt
      zzE1t4zRaCQwO07Pha/w8uUvEfUv0tHRwYlT5/C0tTXv0+gokuQSpp4LXHr5MqmoH5AyfPos
      vW4bXSfP0esy7TqiSSQSbk8v8o03XuPUUDPPfOcOoLRQya5RrRSpic3dKtUKa0uTGJ2PLywt
      RS6pkS+VSNUldHm6WVucoZiJIVUaATVO5yO5tCoLpVSASilHMrvze7OrrYtLF87x6UfXMVvM
      xGNxBEHAvxbnRF8Xogg2t4fR0TPbDmVyjZ7RCxfo63ASCEZQShukC2XmAxk6HBoagkC1Xgc0
      1IUcgiBgVEqJpAtMzwfo63Bsc9StWDRyIuk8d1dSDPd2bbluTufmJaCEaolipUo0vvOaVj2D
      Jxnq69rx/21WLQvBBPOTs3QM9DSD4OpVAtkylscinc+d7efmrWm807do6z+HijqJXIloNAbo
      MNt0nD57hnOnhpGp9Vx++TL3J8cBBfV6CUEQ0BrtXH7pJSbGPgOFnnopjSAI3F/0cvbMMFJE
      lDoTo6OjWAz7S7Tp6Bnk4ug5EtEQzs5eVu9PkU+FkGutGC1mkrFY89wKCZliBY29g/jqfcr5
      FMj3V8SsffgcK3dvko540VracJtULAQTRKMP1n8THyMZjYq1B7+XCxnxzsQ9sVITxND0R+I/
      /OYzcdEbEEVRFIOrS+Lt27fF27dvi6F4WhRqFfHuxIRYqDQ/nUlExHvTc6LQEMV0PL5xzHg8
      LopiQ8ymYuLkzLz4zrvviqJYE+PxtJhNxsWKIIq1YlZM5ytiNhUTx+/cFcs1QRTFhrgwOynG
      0jkxEQmK9xe9D461M+ttnF1YERuiKDaEujhzb0KMp/OiKIpiKZcSJ6bui6IoitE1n7i4GhTF
      hiDOz9wTw/H0I+3d/DMZDW7YvuIPiWJDEO9P3RUT2cKW61bJp8VssWn9+nWolfPixMQ98ef/
      +PbGMddtXr8WOxGNRjd+9y7eF1fXmn+/9dP/KN4ZvyMWyjVRrBU32jd+b0YURVGMBL3iojco
      iqIoNoSaOHVvQgwE1sSK0Gzv+Ni4mCmURaFeEScnxsVIItNsWzggzi/7xWo5L94ZHxdTuaIo
      iqIYDnjFZX9ILOXT4sTkjBiJ7X4vtrDexrExMZ0riaIoiqnYmjg5uyA2HuyyPDctRhJZsSFU
      xXsTd8RCpS7mUjHx7uSsKDTEjefl8Z9TE7cf2D/e3J6IiFP3Fx8ctyEu3Z8Sg8GAmM5XxH2H
      QuRjPrJyJ62Wp1+gGuDe+E0qtQae3iFa7E+/puzniaW5KVK5EkZbCwPdnkM55vzCPAP9A4dy
      rC8Sx7FAx3yhOXaEHfOFZlMHKOVSFB54asbHx19Ig54VuVRiWycUjSqJVLOKxfLMGKnDq117
      6CQSzXWL6/kYd+d9e+z9+WLdtt22j48/pe9hGzatD/DJu/+JyVAFg06L3WpGq9VSyqeZub+I
      zeGgmk+TzZdYWPLidDqolXLcm5pBZ7Ieelm+wyCfiTN9fxGL1c6vf/p3hCoydFodjXKO6dkF
      TDY7keU7vPXeDUwWE26HE41Oi0SoMDk5hdZkRSUTiMVTLC/OY7A6kEsEpu7eQ1Ro0O+j+vRh
      kUvF+A8//gkyhYbW9jaUMgVajZKVhfsU61KMei2JRIJIcJWyqMCgVeNbniOSKmK1mPaR+fC8
      EVmYnSJXERErWX78k79HoTHgdlpZmJ0mUxIwaaT83Q9/hEwmw2BxYtBp0Gq1RIOrBONZbBYT
      iUSCfCpGOFXAajYSDwdY9K5ht9v2lZO9aQTYmHt12/jsxg1olHjv6scMDXTxy19eJTw/zq3F
      GH3WBr+5vcgvf32VkVOnqJa2JqkfBa7+9kNOnRykWMjT0dHNqXOjuG0mKvUGZ04PcfWXv9o0
      pz0//hnJKrz3zrv0nRjmg1+9h1BN8vN3rjM4NMhvfn2VD371S9oHTyJrPN8YAoPFseG3kFaT
      fDY+z+3r7yMxtpBavsN8KMvVd/4Rs7uTzz7+kHxohtlIA6dBs62P5EWzMv4BeU07OpUMi6OV
      7q5uzp0aolrM4+zop+C7y3JGSndXN6Ojoxg0cm7c+Izw4l3mY1WsijLXb03x8e9+Q02uY2Xi
      NnmqfPjJHQZ7WsmX9hdesbsGyEdR2TtRqvVIxeZl7OjsRKfTUqtWOXdqmJs3bxGMbD98vWhG
      Bnq4dXuMWDL7yFaR2599zJ27k6S3qS4BgFyFVqXEoVGQqUNbewdKpQaZpMHFS6Pcu3WL+ZXD
      Wdr1aYhkq3S5zAyfHGBp0YfR5sRi0KKQy9E5+9DXY0xMTVPd9t3vxdI+dJHc6j2mZ+apPzIN
      E1heYOLuBOFohMw2y52uLAQZPt2PvX2AbNSHXK2nzWVHI1dQR0lPh52x8TtkC/t7l93UAZwd
      3cze/ohQ7EHQjdGDLLPMrZs30FucWz5cKJVRKeVEopEDmP78KFYqKORywpEIHd0ebn/0EbF0
      jlKpghRJs2icykI5sczSanDjcxadgs9u3iKJGutjb3aZbAGNRkXsBdislovcvvvQCz/U7eaD
      jz7lN9fvcuHc5tCJYi6DXKWmXkyTKh699Ygz2QxqjYZMIkalAXKxyt2ZeUrlEjzywua26vnk
      s1sUH3Ti05dO8cmv3+eTD9+n68Tm3GKEEpW6FLlcJBLa35fy8TToMV9ojqdBj/lCc9wBjvlC
      c9wBjvlCc9wBjvlCc9wBjvlCc9wBjvlCc9wBjvlCc9wBjvlC80w7wEEWPIODrV7+LFc6346D
      2HKU7Vhnv/bsp32Htc/TcNBnbZ3HHP0iywvzSFR6ujva9vywb2WRulSN22FFq92ao3nj//4+
      6aWtq8vsRensf8sf/6v/edd9DsuBHVxdwe7pIp9OYrMZiEaKlItxpGojGoUMs1ZGDgMGFVz5
      wV8eyjkBem0Sfvhv//cD2ZFNxQhFk7R4ujDusfxUMZvCtxahtb0DuUSGVrt5/8nlCH/5t9cO
      3O6Rbif/+l+9vmnbfmx4fB+hUmB+2U9bR/cWW4rF4rbPU2B1mbKooNVp2/L/v3nrt/zdzz/c
      rxkbbOoAmeAKKlsLtUKe1aUFpBo9uUQMpd6MWtEcLIRqiXJDzmBfN4lEnM7+ESZuf0bv8Dlc
      dvOmg59qVYNEx0G5qZHx1ltvMTo6SrFYZHV1Fb1eTzqdZnh4GLvdzttvv43D4aC3t5ePPvqI
      trY2otEo3/ve97a9eDtRbzTweVcRhRo2m4rI6iIqdxcDLXYW5hYwSBSk0WJQybB37n9tgb3Q
      yOLcv3+f5eVlLBYL1WqVVCpFT08Pd+7c4c///M+31N0PRRJYzQYkkhK3P5vB2WIll8mg0Jro
      bDXhX8si1PLYW7qoZFIgUyGpp7hxO8hrb1zicFZ6aBadev/99/nmN7/Jr371K65cucJnn32G
      yWTiG9/4BteuXSMSidDV1UUikeD8+fNMTk5Sq9X41re+BcDSip/BEyco51LM3V/GatTgjZWw
      GdSsrKww3NtLrCZgVUKm3ODkYB/xeBxPzxCTE7dp7x2m1fVw3TetyfFE92fTK5BSo6ZQqFLJ
      5xClStpdBiQqC/VKiXIpT6Ui4PV6N4ab/hMjrC4vYHO04LQdbl7v6OgoAMPDw2g0GmQyGdVq
      dWMJpHXeffdd0uk0KpUKqVRKPB4/2IkkcrQygWKtQblQQGm0UCnmqVar1IUauUIFjeqwHp3N
      6HQ65HI58Xgck8nEwMDAxuo621GvV7HY9YT8MezODsrFEl1tVuRyOR9/dh+xkqRYa9AQBMw2
      J50uPf5ojtbWlkN913W73bS1taFWq3G73czNzdHT04Ne3yzzIpfLuXz58saCFH6/H51Oh+KR
      5WKVMsiXK4T8q+QqAo1aGYenF6lMSltbG0pEuvt68Hq9iA+et77BYfzeRcw2B26n7VBs2TQC
      aKytWGtr1O0OzAYtyNQ4jBmUhk5UVGko9TisWgq15gNRyCRp7+pFr4RYMovTrCZXEUGoYzDo
      mVwrk146eK5ASS8wOTmJSqUim83i9XoZGhrCaDSSSqWoVqsYjUb0ej1/8Rd/wcTEBDqdjnw+
      j8dzsCRzl9uFWqVAm8oQiuYZONFLJhEllS3S1dFKLFOmQy9DEATiq7vUQzogJpsEi8WCKIqM
      jIxw/fp1Tp8+TTAYxGw2byz4/SgnBgdY8Qbp6u2iUQeFTIc/lKCnsw2bWY/RqMe74sVk1CGp
      l1gN5xnsGyQcCNAAirlm5pvBYECnVjLSvTXC93FEUdy0AEZ3ixm/34/X68XtdtNoNHA6nYTD
      YcxmMwsLC+h0OiYmJjhz5gyxWAy1Wk0qlUKjeVgupatvEJ93hdb+k8gDPkyuVkwyOehcFLIp
      5CoDWgmcO3eOVKEZzVrMpWnr6MaiUxCJJdFrlBv2FDOxJ7o/zzQadLubuBv1eh25fPfMsnw+
      j06nQxCEPfc9TA5iy37seJJ9D5P92rOf9j26Tz6f3xgJDnqcp+Ggz9o6m1qUSMSx2ewkEgls
      tq1DTLFQQKyVkWj1IMrR7vFq8Nlf/9mOIng/Qnc7tru4exGNRnA6XZu2pdNpzGbzDp/YnicR
      weti97BIxsLEkhla27swPCJsD2rP1Ep0RxH8f/7Xr3OqZ+/RYTsOcn98K4tI1UY8LZvPta0I
      ruaIV1QYyTLnT+B0ujZpzr/9hw+eXgRHQwHi8QTFikApn6HUkEMlS6ZQQSpX4bCZ0daLZFMx
      lmMiAw4FqVwFs0VLMZ3B1XcKi+Zhp9hNBN/UPJv36u2IRaNoFDJWVsO422wkUkXUSjmZdBqx
      UUWiNEI1R6ZYx2JQkUunaR86j0G5+ThPIrI0sgNqkj1YXwG9WsiwFM6j1WhIpXNIJXXWVpdp
      6R4gEvRiN1tYiWZx2s0UUzEEuZqRE0enblCjGKcsMzPQYmd54T4NuZZGKUMFJcV0hPbeYRIh
      L662TpLREE6bmYRoRU0Ce3s/6bXFTR3gUESwXKVhcHAQnVpBNBrB5/ej1Ogx6Y1YzQaKpWbN
      R6PZTGtLC4VyDatGRrYm4US3i0zxxcxp70aj0UAUIRKNkon48EWzdHW2Uy5kyJVqaDQa0ukU
      pYqAUS6hhJQ+j5X84VfsPhSkCjWDg4NYzAZCa2EKhRydXZ0oVVr6PFZWAjHKlRzhtQgOTy9i
      PYtcZQHhaGWFSRSqB5MNZbxeH42GiEprxKhTbYhcvcVOtZChXMwQiec2PutdXqKju+dQ2rFp
      BGhrawfA42kjq1PTqTejUyloNBpIpVIajQYKKaDUUMwHcHS0kchV6DMbQCHBLW+QK5b3JYJL
      +ufTWXLpBC3tXWhkAmqdGVeLk2AgRFfvABJBoFQp4XLrMaklpIsCbqMOuQys0qZolCokINOi
      kPJEIstkO9x6DE6ribm5Oax2F6+8cpFSWSAeCeN2u5HLYUgHsbgCu8mEVC0HXSf3bn9CQ+ci
      t08RrFMrtt1+mEgUBtodJVLZMufOnqYm02B88EonQyASS9LiciOXNBDlamwWC8jVqGjnvFOL
      SsYme74wIvhJ9j0MjkXws9/naTgUEbzOwv1pFDoLXe2tm7YfVGjtJoK1/9W/x2KxkM/n6ejo
      YHZ2lsuXL6PVavnggw+4cOEC4+PjtLS0bKyPe/bs2X2fG6CcTVDXWEms+XCY9EgMNh6VHuVi
      EaVWi1QUWJyfR22yYzFo0On029q6XxGciXqZuvpDrl27ht1uR6FojqKDg4Ncu3aNr3zlKwey
      Y51EIo4MCQabbVunVr5QoFIuo9Fo9nQG7iSCf/FX3+fu3bvk83ncbjeLi4ucPHkSi8XCrVu3
      UKvVKBQKzGYz4XCYXC7H1772tSeyx7s0T6kKAycGkO00UFZzpOtazNrdH+5DEcHrpDMZnAYb
      fr8fmUxGKZ9Ba3bhX5rG4upAr4RMqYGSCumSQIfDRDQWxtZ1Bpfx4fC5mwgeA0KhEFqtlmAw
      SK1WIxaL0Wg06Onp4datW1gsFpLJ5BOHPag0KgK+FULhJPV6DXOtyko4jtZkolJtUEmG0LV1
      0+vUE08XGek0kYpHSERD+CJpvvTyxU3HO6jICoVCWCwWUqnm8k+5XG5j2H4SZqfu0mgoOXPx
      NGteL2aLjWgmjVAGq9OGDIFysUAoGOTE8AnC0TRmq41MLIDSYGOwt2vf7dZqtfT09LC2tobT
      6USpVHL+/HkWFxdZW1vDYDDwyiuv8OGHB3/o1smk0zREGb6An3qtgUwoUaxLaXOYWA0nabcb
      iUV8lOQuWu1a8nXQSOoUc3lURivtj8weHYoIXsfhbqOzzY1YzVOoiNRECQ6LAVdrO0qZSDQa
      xe/zI1VqsJr0ZPIlPA4jpdrBHtSzZ89SLpeJRCKcPn2aZDJJd3c3wWAQtbop9qLRKOVymXL5
      4DULJQo98YCXkROtRHICfu8qDYmIQqGikE6jNVtpcbtAomTk9EkWZmcplYpUajy1Z1sQBF5/
      /XX8fj/1ep1yuUwymWRpaYnCTvWI9sDV6qGjzU0sFqWSS7AWSePp68Kgs4FQfTBJIcHR0oaW
      KpbWTkq5DEaLDZV8/1pk/b5UKhUEQUCpbE6H3blzh7Nnz3Lp0iUWFhaYnp5mePjJw0PMNhcO
      o4J0qUFfTycVAeSSBtFolIjPTzRXpNPTgsVuYnYhgBD30miIxHJlAsHw3ifYB9uOADKxjte/
      hrOlC1Fs0KipSedLuFxuALQqBa2degwPgpjK2TgffzbGhdfa9y2Cteea74VdXV20tbUxNTWF
      0+kkmUyiVCq5cOECN2/e5NVXX6VaffIpmRNnzmM2GxmW6TDoOvEGIthMOuqCi3a3jbVIFG2L
      g6TfS+/AIHJJg0atTKpYf2IRnIl6kclkRKNRLl68iEQiQSaTYbVaeemll9DpDh4fBc1JCikg
      kYrEFBpMJgtquRpNuwKpVNwIURHrFcqiAmkmRmdv78YM0H5F8Pp9EUWRixcv4vf70Wg0nD59
      GqlUSjqd5tVXX0UQBCwWC/X6k9WeUymgLLMz5LAiAdrdDoqCDI1MQGd24rIbCYdjuFssmEdk
      SCQSjEYDDaGB1e44FsHHIvjJORbBTfbVotXleUSFHrvVhP6xb6+lpSV6e3u3/dxOIngyWOZ/
      +vk2y6UeMkIxjT8t0GFXsRTMYDWqsdlspNNpqtUqTqeTRDyBzW4jXyhs2LaT2N+vCP4//uVr
      vPHGG4dqy07kM0kCoShtHg8SuQr9I1OYyWgA1Hasxq1FfLcTwU/jAX4SjqwI3kyDeDxBz5CH
      VCpJMhIikyvQP3IGMbtGPFXEmY1RahioZkPk82W0Jisdba4nDoc+LIRSmmC8gbwCtYpAMlHA
      ZrMxN3UHZ3dzqdFkIonNbiOVShJcXaKCCnmjxLJPwfnTm5cjPcxw6MMinUoiVWjQyyoEClUW
      JgOYnDZ6OttIZcuQDVLMqpABEhnE4hlOjOy9zOrz4MiK4McZHD6Dd3GOYqlEQyKnxaIhX2mw
      uhbHpGmwlqwTmPkUuUKOL5pGFI9OMVaTSkqiKkHxyDeM3eWilM9v2q9UyiNVNIsAaw0WrKaD
      xxy9CKwON21WOfMLAYrVKhZ7C7VyAYQSoXCMcCKFpFYmUazgX/UiEUWEI1IM88iK4M1IyKVj
      dHT3o1FKCXiXKVuceLRStN19aLVaisUiVfN5zGYTNEQ0pubrw04ieDJY5tuH0vzdkRvd9JsU
      VEtlZDIJ2VSMYDhGW3sPglBHBHRaBWuROJ62Tmbv3qKssNDX2wyce3JP8GvPzKbHkUnAn6rT
      P3yCslDm7q0lzl46jSBUufjyy4jVEkqVHF2xjq7DTSCSQiVlWxH8PDzAj3Isgh/jKIvHYxH8
      7Pd5Gg5FBPu8K7R0dJNJJbBvEw69EzvlcG4ngtfDoD/88EO+9KVnBgTbAAAWDElEQVQvsbi4
      iF6vp7W1lfn5eXQ6HZVKhUQiQX9/Pz6fj/Pnzx/YsHWEYpoZbwSLxbIl7HaddQFcTKeRm80o
      t91rfyK41ybhb/+v/5X5+Xn0ej0LCwvY7XaKxSL9/f0HDsF+xBCWA1mMesWB7g0IFIv1LTnB
      j4vg9VzfTCbD0tISVquVtbU1Ll26RD6f5/r161y5coWbN2/S0dGBz+ejo6ODgYEnjzA9ciK4
      0aix6vUhCBWyyRgNuRa1QkoikcDhcFAu5sgVajgdJpKJFDarlVC2QiHmo3+fOcE3NTL8fj9L
      S0tcuHCBpaUlXC4Xra2tWK1WVlZWGBoa4v79+5w8eZJsNsvTIJTS5Coi8lyOiFgmma9h0KqQ
      SCTUKgUkSiNS6uRSMYLLa7SM9JMLh2npOoFJu/mVYD8iSyOLU61WN+xa9warVKonykF4xBD8
      /hA2hx6FpEEoHAaFAYtBRh0lkmKKYF7EaTNRSMZR6s2I5QxytYyV5fy+c4LX14abnp6mra1Z
      GOHu3bt8/etf5+rVq+RyOWQyGalUCplM9lQd4OiJYJkKJVUqgrARolrKRpA0ZCQKFSRyFRaN
      gmimQFeblXg0RUdPD44D5gSvra2Ry+X49NNPEQQBn6+54JvBYACaaXi1Wm3j76elu2+AerVE
      NBLD7/MjqVfJlR+GQhdLJfKlKq1uO2s+L7WG5KnKePh8PgShmT/9+uuvEw6HMRqNT21HZ3cn
      q17fRhutegkLgTxx7zwaowF7SwflbGwjj1up0dPd3bnvnOBisUg+n2dmZgar1bqh79adeoVC
      gd7e3k0/n4YjJ4LdLhdqpQxDtky7zUxNpkEjM6E16MjnqwR9i1icHkYszVzUoeF+GgoJuo7W
      fecEl/QCb7z0EoODg5hMJgRBIJvNMj09TTabpV6vUygUOHPmDAsLCwBks9knfoDkRjfZ5QXa
      O3sQihmc7WooRjHoPWhkzVBoo1aFjDqReI5zvd34vAGMOtUTiWCTTUJfXx99fX2USiVWV1c5
      c+YM8/PzqFQqurq6nsgO5EbcdimmS+cxG/WseANYXR2MaDJIJK2YZEWm5/1cOn2KbDyE0tCJ
      UgagxqBP7pkT3N3SXBTx93//90mn00ilUgKBAIuLi1y8eJGJiQn+6I/+iImJCV555RVWV1d5
      5ZVXnsyWB/yTF8FjY2MbjTSbzXtGcx5l8SgIAtevX99zv6985StH2o51soUyq5Hm62V3i3kj
      wfxxPi8ieGlpCb//4Ou2bdui6bvj9I6cIx4K4PG073GIGpFwFpd7qzAbWPhrCDXfKT8pD8PZ
      /3zgBj4Nywv3ERV6erualSICAf+O9oQjYdwu9yaP8OP8m1/vPuzGV2f4+AlDnfdLLRtmNiJg
      1TT2cW8gEg7jcru3bF8JpTZE8PP2AAOUEmvMRXLoNRr6uju2+b+forYdm2bz9nImwUIwhtvd
      isP68K3gxlKe//y7g78WbdsB9CYjfu8q1NK8/fNxbO0d2A1aQpE0njYHlVwcX7KOx67B4nSz
      PLuIRHkap/VwawM9HQ3qooyBLg8zkxMUqmA0aphfmGegxcDkaoJCXUI9X8DmsFPMRAhFEmg1
      SoxKkevji/zJH377yBVPFWtlKuU6ybpAYXKM6Xkv3UOnMUlzNKR6ZFojs3c+YejEMKspAadO
      JJ7MMjQ0gPQILRYsVMvUhAaVapWpsU8JF6S4TbJmnkGyTKtRRCJz8OvfvU9LRyc6owOxWqDd
      bUGo1ZAckjHb31+JHJ1MoFgTcbR46O7oJBMN0+ZxUpcoKFYEDBolOqOVVpcNs9lIuVQBoUKu
      WCaXy2972OeLlEoxy5I3sGmrQiIyt+QFoLO3H5fDiVbZfL+USpvzJMlMnhariWwuR7mcp1w7
      Op5tAE9XF2u+VeRKDSdPnabXriZeNxEKh1HUcnQO9FLJFunq7UenMyCnhiCKT52PcNhIpFIE
      QaBUb6BTKzCY7bQ4LEgkEiRAIRnF4ukBiYJCZAlrSwcNUYpapSAeix+KPduOAJ2dXQA8mg/m
      djzi3ezePPSOnDuz8bvhEXfAdK2LzIM4/ryh/6ka+iScOjv64LddimUNdAHQ2dW567EEQcC9
      R4WHw87/3Q6lrYsWoOUbX9+0/ZIToBmUuMla20O7FI/MqjnNOr7/xkjzd8vzj9fSt/RwoWX9
      r81LvI6effx1WmBhQYFFKwdMnDix9U1DLy3ueX+245mqL8Xwd1G1Nwupup50/vsI8WcPHpjH
      edIUxxeJTvNwFuh5h0AcHBn9/btXgRjpdmKSb39/dmObDlBj7PYMo+eH+PTWFJdf2uqFbdTK
      lBuKjcJYuVQMXzhB+2OVfh8Xwbnev+HmzZsb+aRms5krV67QaDT40Y9+xFe/+lXu3bvH2bNn
      mZmZ4cKFC1it1gMbtc7q0hylqoDN3Y7DstmnEA35qUs1mwqsVnNxKio7hVRTED/OdiJ4Xfhe
      u3Zto3pGOp3m4sWL3LlzhzfffPOJ278bQiXHzLwPt6cNrVJJuVzaVMzMHwjQ7vEQ8PvxtDdH
      bL8/gAQRT3v7FhFskpeZnZ3F4XAQiUTweDycOnWKq1evolQq8Xg8zM/Pc/LkSaampvjqV796
      KH6ahckxHP1nMau3uul2KtAGDyct1jlEESxSLeQJBNZQGvTcn75HvljHYFKjUBlJhn20u8yk
      BS2r/jW+fOVlQtEkJ4dO7Hkyg8GA3d584PL5PIlEgitXrnDr1i2cTider5fvfOc7/OQnP8Hp
      dBKJRJ6qA1QbcGJomMWFRXz3xylIjZgVAlWJgkY5h9vt4PadMHq9lmxiDb1CJK/tQi8kWFkN
      cvnS6N4neUBPTw+BQIB4PE42m6WlpYX5+fknbvte+FdDDIycRCWpcn9qkWAkTHtrC1abkarc
      SjGXZm6uQK5YIZcM4UvW6W5zIGH7We/29nYWFxdRKBQb79aiKJJOp8nlcrz22mssLS3R2tpK
      KBTaVOj2yRGQaIzEg36ChSTJTBGlXIXJKKeEnlo2Qrl7gPt3PkViaMWmbmCy2MhWaigUKtyu
      vc+wF9uK4NY2NyuBBHqFBB64CWQqLT2dHuzuNiwGLVK1EZtGIJEtY9KrmJ6dJZvN7iqCl5eX
      GRsbw2Qy0draisfjIR6Po1KpmJubQxRF3n77bQYGBiiVShSLxacyrl4pMTd3H5VOT70hR62Q
      YLI6cFhNmO1OWh+pMOxsaaenuxMpDbQGCy0uO8V9imBBEPj7v/97NBoNtVoz/XBxcZGJiQmi
      0ehT2bATToeJ6clpYqksMqUWq0lHW1cnM3M+Wq0akKuazkademPSYjfee+89yuUymUwGs9lM
      uVwmkUjQ3d2Nx+Phpz/9KSqVihs3bhAKHU4yUzK4Sq7SIJ3NojdZcbucdLQ4sbhaSCWiOB12
      RMBic9Hf04nZ7sZq0IJEioSnLzIAz9gRduNHf0kmcB9oiuA//u//9ZZ9/H4/7Q+G6KPsQBIE
      gf/uf/t3W7aXMrEttT9flB3lfIZYtkx7695fjaF4lt/dbYagvH6+G9djQrhWq5FIJLDb7Z8L
      R9gvfvMp714bO/DnXrgIXn/4Pw+si+CjKnrVehPt+v35YvYSwQqFArfb/cQJ78+bwxHBQplA
      JIe8UcHe5uHxShrBQIBWj4dgILCvOvwv2hNMLctKuEwpHcHkcJOOBqiKClqdZlKZPG2dPVTj
      IdYKJSwmG56WnRengKYIfh7e3m2pZRmbjeC0amg/0BoIVRLxCjb7ZsH6oj3B6xwtESxTUyr4
      kUgkKMKrfHB9nOHzI8jrBdSmHpw6Kb5AEEGUc+fWbaQaPTIhj9lkYGopxpe/dHnPkunPFbFG
      KrCEdeA8bTYVYd8SVVFAJpNQq9WQSmVUi1W6T5wgtLjIR+/fJicx0OnQUSg1OHdp9NkOkQdB
      rCFUyoSTdajMcGdyFrdnAJtNg9gQkVYKBEtKnAYZ+Uwepc4AlTR6s/5A4dDPlyMoguWSOg2p
      ingyQ3eLlbKoZOBEH2KlhtrSytLMNO0e+8ZcgsFsx93iwWWUEo+njo4nuF5h5v4Krp4BYivT
      BMMxAGQNEUEqQ6GAeCwN1Fmcm0MiV2Gw2Bjq70EURaQyOaUj5gl2erqIr/lAqqD/xAgnT3gI
      hHKkwiFa2lyIYgPZI+/ZRquT7u4etKrmbT5qnuBjEfwYR0UEPz68wkMRvJ3ofZq2HZodpQTh
      mhG3cX/Tk3uJ4IO071gE78Dn1RO8nRMMmiL4iTO6njUaG27N3rut8/nyBO/NoYjg+em7tPSO
      kI6HDiS01otLPc5OnmCLxUIwGMRoNPLaa69teIJ/8IMf8LOf/YwLFy4wNTXF6dOnN9LynohS
      gptzEUx6DYN93c22PhBWO4UJ78a/+XUYt2yKv2pv5969exuLxzmdzqeqkblfAoEANq0Cf15E
      KxXwePZ3bVKxEJFEBnebB6Fax2Yz79sTfO3aNWQyGa2trczNzdHe3r7hsDysb/Rbt241SzAG
      AkhEccNz/Si+lUUKZZEWhxWt3bYlb/tQRLBSbyLs99JA4P33foHE0Eq7y0woFMLj8VAu5igW
      ahhtRmrFPGqFhkRDSTWxfU7w46x7glUqFZkHS/2sXwCn08nq6ipKpZJkMolGo2FycvLpOoBQ
      pVQTUFWq3PzofUI5CU6DjO7BU/hWFoimMqilUpCINOpV8pkiRqee2clZLnz5202H0jbYbDZs
      NhtOp5Nf/OIXCILwXDqApFrGV2ugkjSo1ARm797cFJbuvb+MwaRmaclL54kRdLISalMPJqWM
      Wq1GuZhhZmqZV7/66pZjb+cJBjaWpXU6nXz00UeYzWZKpRLBYJDOzt0DCPdDKbWG0WAilK5Q
      LJWQiiKf/u7XJKoqelpNZIoCly+NIpWAIIqEVhahVGHosdL9T8pjIliCWScjW6xvCA+hEMfT
      6iFVFkEUkcpkSB7Zv7e/F5fdARL2DIde9wRLJJJmUnqttskTnEwmicViG5WJ+/r6ntpAiURK
      QxDQGiyMDPXjeBCK4Wptx6hVUcyniMRTqLUGulpc1B8ITLNOsaMnWBRFkskkLpcLk8lE6cHS
      Uc+a1jY7oVACST2HVGXaEpbe1tmDXqfjxMgpdBr1xuSFVCpFoVBQKNfRabb/1t7OExyPx4nF
      YsTjcQKBABaLBYPBgFKpxH3A0XMnAuEkSESSYd/GNp3JyskTfRseeQCZXE49n0RtccCD2/Hc
      RfB24nA3/il6gtstSv6X/+G/2XXfo2zHOsee4CbPLSe4q6trz4Two/zgCIJALpfblwg+ynas
      82hO8G5OsM/LLNDh5AQ3ygTCOZKxECcHPUTyalrtuy+1s8787BRSjQmLQbvhvXtUBN8M/Au6
      uv7HAzfwaQj4/XjsWvxFLe0PkksfH8XC4QjufXpUJiYmXngYxOrcPbQtJ6hEZhGtAxt2Pcrj
      ec1L8zNI1Sa6Ox7qqUdF8C/+6vvPvuGPIdZLzMyt0OLpwGrSs7owidrRj8u8tZL16vICqWKd
      syNDrAW85AoVNAYLHa0PO+7heIKlaspFH6pGibvzMfq6Xbz7X365Kb9UZzQyMz6OobUbraSM
      RKHn3JkH1YbFZkfoHjyF2/HkYcyHRTjoo5CQUpTZiYdq6LUGMjEf4WgKhVimWJdiVElJpLM0
      CnHmvQmGR3oQ8hlahi9vScg+EqiM5OJBJOUC6bXAhl3J8DJaow211oAoVMglwljaBuhptyCI
      Wno7nmIy4RkQ865Sk8vJZLJYTXpqEg21eJBsrAESKCQjLIVy/OF3v0W1XEIiUVAsVSiXKzSE
      KtXa4cQobfEEV1IRzP1nySYj5OKxLfmlnW1ObK42ejo9WB3ujSrKCoWcZDKxITKPAiarg8G+
      rk3bmqu1SDfWHVPrjEiFKjK1jlOnT6JRaxnoaqEqsO9w6OeLhEYpicq4+bXF3daJwWCgv6c5
      M9Pa6iESDgFKysUYK77gkfIEm5w26sUKtVqVUjJIIlchns6iU0ioIUetNXBqZAgpUK3VSQa9
      FB4swSWVKRBq1c+XJ1hx8ru8/gc/2HX/o/zuLAgCk5OT+1qp8ijbsc6jIninVE/4/GiAIymC
      mwFn+y8ssp5S+DT7Nqs7HH4xk4OUSjwMO9Z5VvbU6/UNR95u7MeWg+wjlUr3dd6Dsl97HueZ
      fvXIZLID3byD3Oxn9WAcxvmOsh3rrD+Me7Gf9h3WPk/Dfu15nGc6AhxzzFHnmY4AQjnL9LwP
      m6sVGVVKxRLd3c2YnEatzM2JGV6+eI656UlkWjNKqqSLAk67iUaljK2tE9WDwvHh4CrhWJbW
      FivRSAJPZwe+1cC2x35WFNJxlgMhWjw92M2bHUd+7yLFiojbYcG3FqKlrYOwfxWD1UGnZ6MA
      DstTt9B2nKWaWCVdFPDY9aw9Zk+b6/nMoPlWFjeut1EtJyeocFn3rvQQDvpIFWroFOImGzra
      3RQlesqZJF2dB0naORyW5mepomRoYPtFG7fjmY69sWCc3lMjVPJplqfHkeofBsxJFWqsZj1Q
      QKF2IW3UqTekuNQKYrkMiXx14+EHcDgcyORysvkKI6d6mbk5s+OxnxXhZIZTI6fIJLfON8tk
      cmrlIr5YmlMjp4gvj2NsH6Ze3ZzY72lxUK6JG7YGt7HnefHo9Z5c9O/r4QfQabXI5YotNsR9
      QT65cZvWfQbpHTpyJcoDfqU/0w5gtumYm5xClKlo7R0iF/ZvJNLUynn8fj9rkSLZlI9CpU69
      UsCXyqJTqNHJ6+QrD4Xn7Vu3USqUKGUiU5NzePo9Ox77WWHSKJmcmkSp2Zp3K5fJaNTLqBRy
      Jqcm0Tp7iCxNURMeFWYNvF4fwWBgw1bzNvY8Lx693n2tdtZi++t8awEfCoV8iw06m5lTI0Ms
      r/j2PsgzoJTLkMkdLC7rWAMc84XmqBU/PuaY58pxBzjmC81xBzjmC82Lr/pRjHJ7yoejs5dP
      f/tLzr10hcGeDmZmZnbMsnr77bcBGBgYeKpVCp8FiwuLNGhg0al5/9rHfPlr36TVYdnRnkQi
      waeffgrA5cuXd6yD86KYX1hESgNpI8/N8VXe/N7vY1CUmVlOMjywdWWX+fn5jZqo3/nOd553
      c/dkfmEeKQ2C9ycpWQdffAeYHr/NrYUcX/d0YjQaGexx8u/++t/i6O5lZWkOu05OLC+SrMr4
      k+++yfrKpUfx4QeYnRqjUIFvvPkHGI1GpLEZ/sMYWIQ0M1N3EOsytEYlGls3r18+t/G5o/jw
      N6oFxsduAir+5PtvcH+xxIe/+Ud6T3TgXchw6/pv0dkc1NNBTr/6TYZ7H3aIo/jwZxJBxj95
      H3XrJc60Wim1Dbz4V6BoroFR20CjeNgXO/pPopUBYoNqvYG1vR9pcoVItrnYhs1mO5IPPzSo
      1UEiaSCXP6y0cGKwGS4u1OsgkzMwNMzkxPjG/wcGBo7cww9Qr9URkSJRyB9+U8pUnOhvpqrW
      6zXkcjlDJ4cYG5/Y+Nzly5eff2P3QT0fI1+SYnY9vNZHehr00xs3uPzyyy+6GYfGPy17qnx6
      Y4rLL29dP+LzxJHuAMcc86z5/wHZt5GGNPwUKQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Bikes Due for inspection' width='184'>
      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
      AAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Bottom10deststations' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAgAElEQVR4nOy9V5Adx5Ww+VXVreu9ae8duuEa3nvQgyIpUhq5lbQzI4UmYjd293XfJmIe
      9/3fnX8kjWZ+aTTzz0iiJBIkQJDwroFuoNHdaLR3t+3tvt7Xrap9aJgGSdA0QEkk7heBCAA3
      KzMrK0+ak+ecFHRd1ylS5ClF/HNXoEiRPydFASjyVFMUgCJPNUUBKPJUUxSAIk81RQEo8lRT
      FIAiTzVFASjyVFMUgCJPNUUBKPJUUxSAIk81RQEo8lRTFIAiTzVFASjyVFMUgCJPNUUBKPJU
      UxSAIk81RQH4kqNpGkWnvtVTFIAvOYqi/Lmr8KXG8OeuQJHH5/Tp08VZYJUIRaf4Lze5XI49
      b/wfFAqFP3dVvpR8sTOAXmCq7xpXb/YTzkBp2y5e3N2GURJWJFIJdpzkrZ4Qh179Lq3+x6iS
      kuDa+8fpmohiMNrZuP8FtjT6WFncYvcf+ekHU3isEoIo461q5tChPfgt0urLfRLoOqmlca5c
      vMLIXBxBMtG45QC72+sRs3GSBQNepw1B+OijtZuOoGrFcWw1fKECoC7d4dJwjgOvfJdSq0A0
      mXuoMwKQTzCwINHe5mduYo5mfxWr7Yra0hCdsRK+9zffRJvr54ObXbTUPIvL+CCNaDCx/aXv
      c3SNHa2Qpf/sm1wdinBso3+1r/lE0NHov3kNqXYff/tKFXo2zsxCAl2H8HgvN6NuXtiz7s9a
      x68iX6AA5BnuGsDXuIVcaIoRZLwlZYgfGsKSkUUUi42m2jK6BibIKpXYtGneeXuYHa8cwmfQ
      SY1c4b1QGa9uK+VO5yU6+8bISU7W7dzPtpZyDOJynoK3mjWWJcKZHKZsFre3HNMj3lDXQVUU
      CrqM1SShZmJ03riO3e6mu3OY9S8+R5Uyzdnz15lPFnCXN3PoyF5KLDDdf4Xz1wdI5EXKmjZx
      ZP8mzGqWS+/+B2HVwsJCGEt5G02OBIOjs+Bt5IXnDuKX0wzcuEJH7wQF2ca2/S+yvt6DQQAQ
      kESRbCZJJl/AZnZRU+tCX+jhn46fJarITPZ20Lj7GY5uqP7YmaDI5+cLFYDwUpoFZQjZJpPP
      JLh6a5yXX9qHe0WvjC5OY3LV4fHZEdIjxLJ5bI5SKh1XGJ/L4KuAwZEI9evXkZ6+Q1Cs5Y0f
      HEGIT3Hq8m0ilX4CjuUhXjB6KLfP8dt/e5MN6xrZuKUN84f0XGouRde537HQaUATJALVa9nb
      5IF8lNjUEEHvZg5/4+v45RwX3++nfs+rvFJjY6rnNFcvj3B4t4NbfUvs/Np3qLOr9J15h0tD
      tRypN5PLQ8u+l/iaP8kf/793EF7/Ot/db6Xz8mmi0RRCdowluZbv/c2zqPFpzpy7RGnpi5Tb
      RAQEWjZuJXqpk9/+ZyfuyrUc2bcFe8l6/uql+P0ZoNjxnyxfoAAIiKKZlq272VJqR9Cy3Hr3
      OENLObZX3Cs2z9jt22SqAoxNppGS0/QFE1S0+SlvrKVreJikzcscZnZ5TMxfH6PnxiyjXTKg
      k5dKadfUu3mphG5foZ9WnmtfYiRvQY4P8u6VHAcPb8JyVxBEo4W1u3ayv8FGPh2mr7OTvola
      NpeD7K1k+/atlDkMZOMhMgUHG8rdiKJAWcNGBiZuEVvykbM3UumxIgrQ2N7ISNcc+fo6rG4/
      JV4HkpzDavRSUelB1gqYLGYkXWMhOEBn5zy3r59ZroujjHX5AtiMIAjYfHUceKmSdCJK8M51
      fvvmKV762pEv7hMV+SIFwExltcjVYJytZQ4EyYBJlsitHMESYwzHPFT75pgKguC2MtM/QbbN
      j8tXQWFogNmZNEZbOXaTTNJopPXg67zUXvHR4rQco5Np2jZvpNUvoZ17jzffh93PHL3f+QEE
      QcRsdeB0OcDlon3jPOcHZ1HLS5FNZkzycpOIohFBzFNQdUBAKyTJF0wYzGakXJqCDiYBCskE
      BZP7M+1bDCY3m5/Zw8H26o/8pus6uq4jGYw4PCW07nqeud//C4sxBdfnavcin4cvUAAkKjbv
      wvDbs5yjnYAhRl/WxTMe0/LPukqwb4DyXUc5uj6AAKCnuPDmW4yH21nj9lEj5rjWM8X6Q9/B
      IIqUt7Ry+a0LXGQDAZPGfFxl84Y27BYZBCNlfoGu7h7EOj+JfJZMRicWTaKWOe53UF0tsDg/
      xrBkRVNSjPaP4t94DAMPa1Fki5MKt8S1y9doqrYzc6cXz/rn8bsNeI3HudxhpMZR4E7PIhte
      2IdE/lPbo6qmihtnr9AlZ7BLCrFUnsbWzXitgK5z++LbhOQqKn12lHiQME20u41IOTvR26MM
      DZux+8oo93y8NqjI50f6+7//+7//ojIXZCc11R5is0EieTPtWzdTYjfd/XgqmZyJytpSbPLd
      7ikYsTuMSCYXTosJl0tGlctpbizFJIBo8VJdZmUxOE0kpVBaU0+Jx768sRZEXIFSxFSI6VAc
      b+N2jmyrJZlQ8AZcD0ZoXSO8MEcsFiORUihp2cqmRj+iICAbzTidLmQJBNGAv6wUPbnAzEIC
      b+MWtrYEMEgypWUB0qFZ5uMaDVt2syZgBQRkkwmn24MsChhMVrylXkyAJMk4nC6cvhJqA2am
      JqaIJguU1a2hzGPm7h4eu8NOJrLAXChCTvSy+8B2PCYRk92NR84xFlxCdvrxOy33BUBVVX5z
      7g7F05zVUTwI+5KTy+V44e/+Hwqq9ueuypeSoinEV4DXNjnQtKIArIbiDPAlJ5fLYTQaEYqb
      glVRtAYt8lRTXAJ9Bdh+4HkUpWgMtxo+owDEuXT8Cu6N22mr8iyrLLNRrg+HaG9rRJbi9F5Z
      oH5XC7ZVVkTNJRi42cGd6RiSxc2GrTuoL7HzSRN7ITnLlUudzKc0ajbsZltT4OH0iWneO99J
      LJ1HNJipbt1Ee3MlRkkgOX2bgbSfTc0lH6vDV7Jh+m9PUb++HYfxYxL8BVFz8G+LxnCr5DMt
      gfJTt+gJZRgeHXvQ0PkEfcMTd/8dZ7h7guyqq6ExeOUEI0oZe/btY0uzn9nxaXJAOHiLs2f7
      P6plL6ToOnuRtLeZ/bvWstBxgv5F9eE0qQWGMm4OHTrEvp0bSPRd4MpoCACLv441VZ5HNoBk
      dNDY0oR1FXNkZqaXNy/0fv4Hi/zJ+QyfN8fQrXm2HtnBTOcgSVXDLX7CuaeuEpns53L3EJq5
      lJ37dxCwGIgE+5lLC8wODxLT3ew5tJtSm3z3IZXFUJja/a2UlUhQUkI1kFsY4vSZi4zNC8wv
      DlO/fhub15QvV1oQEA1WyirKKCm3Ue2/Tk7R4EPjuWS24/f7AT97ts3yh6koNJeQCU8yXqig
      2RtmdDxLw9paTAJklsYYiThorpKYGg9R29aCOjfJbDZPdGyI6bhGy7b9tFY6EVFZmuin48Yg
      OdFCWX0DrXVuOk6eoycM6vwAroatPLO5ltTCEOev9JEV7Gzae4Bar4nM4izTyRTxiWGmwjnq
      txxiQ62ruDH7E/Kpba3GF7ij+VhbXso6Z4zb85984hmfH6FzJEb7jj20V+mc++A6cRWWRm5w
      7uYMde3b2VKa5IPOyRVPGahvqaXzxG/puDXE7GKMgqYjuytp37CG+vp17Duwh9Zq74PuLVlY
      117F7fNX6LlxhQX3VtaWyh9To2V0VWExksBhswCQCY0xOJdE0AUmx3uJJgtAgclb10nIdrR8
      grGhMbIqZBbHOHvxBpaaDWxvr2P42kXCGZ3oWDenOoO0bN/Lzk1NzA50kdI8bNiylvKGtRw4
      cICtTWXkQsOcONdP7abd7NxYwY3332UinCMbCXLu7GXkinXs3rWOyY73mUt+2hcp8iT51Bkg
      vDCP1ePFJMnUtFVw7cY426raeNSyeDF4h7GRBPHYAgI6kYUQc/FdGO0ettTtpKHSBo4IHVdX
      +rIKVK4/ymv+MW71DnDuVgeBDQc52F6Fy+XAZjPhC/gwrXhCU9IMDc9gNES51Jfnja9vY2nk
      Dnqglkq35X665HgXv/vdBKJoQLb72bqj5KH6Gi1OSmwGZsMxSsQkfYt+jhwwQ2plKjNrtu5k
      fWMVas5NycQkiqIQnImwdvN2Git9FLI27LIKohGX24HFBoFAANAYH5jG07SRtpoy0AO0Ts0w
      M7+E02CkcdMONjZXo2sqFf5b5It72T8pnyoAcyPd9Pammey7DLpCDj+z8RZqH5FeUXQq2jaz
      vWXZwUQ0GHE6YeYTS9FBkPBUNHOgrIFsaoKTv+lkrrXqkYKWiswyl7Rx5NgBQjfP0dHRhayq
      bKlseiidpbSZXe1Ozp6+RfmGvfhsH8pRMtFQ7eT98TnKEmHsTfW4JD7TfqYgStiNj5517r2b
      WtCRTPcmWwGDwYCuFw+u/hL4lCVQnNmwg2/95H/jJz/5CT/5u/+doxuszEyHeZTOwe0NEJud
      wejy4vc6UOJRsuojEt8nx8itW8xEMuhAIREjJZsxiSCKIul0HEXRUDXtQbm6SiaToaAbqWmq
      YermRZLGMhzmD+0BLA7KGzbzta/tYvbaGW7Pxj9UtoCrthnnXD+XpzLUlfs+UfP04DEJv1Gj
      f3ScvKqRCgdZTNwt0yCTj8VIaxqqCoFyD3Ojw4QzKkpmkeHgIm530cbzL4FPFABtaZJs+SbK
      bQ+SlVU1oGYiaIKMx2VHQACMuHx2JMBf3872Gp03f/lzfvYv/8VQDIzS8lLDYrxnlG/C7TCv
      KMmAUUpw4Y+/5qc/+zm/uzjPjmf24JXBFain0jLNv//il1zom+HeCsHmraatUuetX/2C/zg9
      wYFXvkEgMcZELL0iWws+5/JyyBpo5tkj7czduMZkXEEyO3BZ7o7eBi/rGi3ECjZKPPblKooy
      DqcDSQDJbMVuvut0I4hY7Q5kSaR6/WYqsiP8y89/xttXg8jmZdExBhrYHkjxy5/9jD9cHcVR
      1cbeJiN//NXP+cW/n8TXfpDmUjuSyYLd8mBhZ7G7MK6U39Q87/3+fRaW/8H5d44zFfk0q9Mi
      n4eiKcSq0UlGQiRVMyU+O6n5IU5dHOHAyy/hM33600+KXC7Hd/7hzeI5wCopngQ/BpKa5ta5
      k4yH0hhdAXYffBbPn+HQbPHKvxbDoqyS4gzwJadoDPd4FM9cijzVFJdAXwH+4R/+oegPsEo+
      RQAUwvNRZKcbu0X+bOrBL5hCNkletGI1PqnJSyeXihHPCHj9rlUH5VrOSiOTiBJN5RANZrw+
      D/KKampKlkROx2W3ADqFXIZoPIc74MEA6IUc0YyKx2H9XMWen7EXPcJWyScLQGKIX/7iDA2H
      jvDSjtbHc8TOJ+gdW6C5oQ6TvPpuFhq4yLB9L/sb7Y9RmRWoWW5dOUXX7RTP/+iH1Fk+/ZFH
      kY2Mc/LEJVSrEzURo2zHS+xp8d0XKjU8yh86onz3a3uQgPnhTn5/vI9j/9ffUStDdmGQd3rS
      fPf5nZ+rXIe/sqgFWiWfIAAa0z39tBw+QHJpEUXTMEkiWiFPOpdHzWbIKCpWpweDmiaRyiNb
      nXgcZgRdJRoOky1oyGY7LqeF9NwEVzsHMJtM2O0OAl4nopYnGo2RK4DV5cFhkdGUPLmCjoEc
      0bSO1+NA1BRi0Ri5gk40lQM76LpGLp0gnsygIWF3ebCbDaiFLJlUnrySJa+KONwO1HScTF7H
      4nDjsBgfEuR8JklMsbF7s4mh4SVqNvhAyZDIC7hsZkCnkE2T1WXsFpl8OkE0ngaDCbfHvSLO
      qU56cYasfx3feGYT2cUbnDg7Tq7Fx73xXPaVUBIbZV6FckEjksqzZZ2b4YkstY0mwksJSnyB
      L+hTF/k4Hi0AuSW6p+1sf7WW8XdGGE9prHGK5MMTvH36GnarA0WJEUlaqSi1kkvGWVR9fOO1
      Q+jTnbzbEcRiMiDZvWzdvonFgdvMT09zo1PE6K/n+Z3NTPXfZDAYplBQ0Exe9h46gDE8zq3B
      IEo2RtRUwwu7mpm4eYm++QyyJFFILVJaClo+zZ0blxhfzCGgoBvrOPLCdtTFPo6/eQdHpYN8
      NELG5qXUKpJKpsBdy7MHd2JfYb2QiYyTN9ZTs9bA3NUB0m17MMXGeOdCjFdf241FVxnvvsKM
      fQ27quDq9R6iKQWlkMNfv4tdm6ox3g1t6K5qpmT0JsFInNTgIuXt21h53IfBQ1N5gtFZhbJy
      jXQiS+Xmddy4NYHS2EwkmcATaPmCPnWRj+ORApAIzaP4fXgNdszNJk72h2jeWQ6A1V/L/r07
      cRhjvPWL49RtO0azO8O5t7rIaAXys7O4mreyuymAURYwyGbKd++nN9PD888exmmRyS4FmVhM
      s2bTNuwGlbHb1xgYCbHek2d8eJptL73IgXIf2aVhggkLR198Bo9ZZObmCUYB0WCmYe1WyhUN
      XVXou3COudR2AqIBf8069j27AfPCDf7xcobXD+9Gzke4dL2bXIEVAqAyOzSKr+XrOKwZDOId
      Iokc1d4GWuQ/MLS4nXWODMFohrpGN9Oj3WiOSratK6GQCnOj9waLTRVUOCTQdVRdQEpM8V//
      Ps2W3YfZU2slmcrisJnv7p8kKhrL6RqdpeCHeL6cdYE6PIWLRHMNxKIxylrcX/AnL7KSRwrA
      3MQAwcEU72YWEJQQs/M3CG8uxw4YLTYssgFBNGAymrBaTIhSDoMoAiIVG7YzcvEmV0JGZKuL
      9Zs2U/qh/UM2HWZmZIhoMrUcHFay0uwyoiNTu3YDjZV+ZAGiSgqrowqnxYDAsm0QgJIJc+vq
      BRZyIiKwtDiHJwUBUcRiNWOUJSRJQrLYsJkMFAoiBknkISOmzDSdtxYQ06dYEgpMjwYRaqJU
      e0qpby3jfM8YtRt1MpqfgEumv3OK0XmIzIwCYPRUYZHuZqgXGOzuRGt+hr9aM0HnQoSZwRkG
      0yU8t6P5fpFyWSO2zhEWxxWUyh1YRSsOt0Y0PEsy5cPrKirm/pQ8orULzC/E2bLvCFXO5Q5n
      6b5EcD5J66ce8+uoBi+7jzyHrqQZ6LnK6FiIQIOIoKko2nIIQKPZjr28jgNHn8VnM1BQcmiC
      TGY+hCRJ99fpBkSSiSWyhXpsokommwc7pJLzZKR6Xni5HbmQoeP47Od8dZ2lsTFM63exc00Z
      AGvKrFwNzqO2lWIrbcU21MlwTxZr4zNYDRJOu5sqXzOHtzQgoZHLK8jG5SbUNZVoKkdpnZ/K
      QIDo/B85fsPOK69sf0h7JhoCOKwX6Ok2UfuSE0HQcTg8hIdvkPS14yz2/z8pH9vcemKQYH4N
      x9pqcdxT40UruDM9TUvDp6kfVZZGe7g5uQRAvqCzZqsTwQzN1hzvnzqJs6SOQ5tqaXHf5tSJ
      47isRpCtrNmwFe+HcnN6a3Hp73Hi+AIOq4XMYgivH0wmG/lIB++fnMdkEFkIZVj7OV5cV7MM
      B1O0tG2kutqz/J9lFkZ+c4Hp7EaqLU7c5jhXbxv51n4HgqBTs6aFgTMdvD03gFESsPiq2Nq+
      AYcJBEmmKuDi6oWTjDutaHk71e48g6NzVG+uuV+uKBpw2TWuDps44FgWDb/DysWzt2l4/eWP
      qGGj4zcYo57NdW4Wx/uY00tYVxcohkZ8QnysKYSeT7KUMeBzme+PXoVcilRewGEWSeY0HDYr
      gqASD8cxuz0YRZVkLI3JYUMs5AgvLZFRdMwODz63HUnQUTIJQksxVNlGRcCDoGZZXFwiq+iY
      rE68XidCIUc2r2O1W5aPqfW7z4VjaKIJp11GNDmxyZCMLhJNKRhtTqxCDskewEiGTFbA7jAj
      KGlCaQi4rOhqgVQmg9nqwCAuj9iJRBKT1b5CLauRikQQHT4sBp1sMko0K1Hqd96NXaqRTUZZ
      jCbRBQNOjw+H1XQ3tKGOpiy/d1oRsHu82KU88ZyE370iVICuk02GiWQNlAeWTaK1fIbFpSj2
      QPlHfJBz8RAJwYnfYSKTCJPRLXgcD0IjFo3hHo+iLdCXnFwux46Xf4RS+FSniyIfQ1EAvuTk
      cjl6e3uLt0SukqIAfMkpWoM+HkWdw1eAycnJT09U5GMpzgBfcnK5HO1HvlV0iFklnzwDqHP8
      5z+9S/mh59i7puLxVG+aSiqnYDGZEMXVZ7Q4dIWgpZ1NVY9htbYSXWG48wMu3xE49p3n8D6G
      OaimxLl1/jTXhueR7RUc/drzVDkeWNHmQkOcGVF4btdaBHTC490cPzvOi99/DZ8IhfA4J27H
      OLav/XOVu/bwd4paoFXyiUr95OANMuX1hGaCqI87UaQX+MN750jmHm+kUtIxErknp/FQs2km
      Iwo19hB3pjOPkZNOZLSb7riX7//tj3h5u5WLH9wmtyKFyW4hPhokAaBrhMIxvMISI4sqoBNd
      XACxuCr9U/Lo1taS9PXn2HFoC5NnbrJU0Cg1SuQjU3TcmSA9M8HEUpKa9oOU5EboujOLs2k7
      rxzcgJSd5eRbpwhG8/jqN3L4wDr6j/+evr4FwsFRDGVtfP/YHrToBGdOX2Q2IdC04wB719eS
      W5pidDaNjVkujQi89sJuiIxy+vxV5hIqZoNGw4G96IUswzcvcLl7jJxopnX7UfasqyAdHeLm
      lQkWY9OEkjIbd28mP9bN4FyWxm2H2buxlpWuBNn0PErBT+uWMrqHx8lVtyEsDnB6BJ7dtQZR
      11gY6mJMr2B7o4fxW1c43zWM7ijj4NFnqfU9uOLI5vbhsCZA1zAYLdidtocPtsw+mqwRxqMa
      Gxwa6XSa5i3N9I+G0AIlRGJJPK7KL+RDF/l4HikA+fA8k9YAr7n9uMpTdI+nea7FgaZkCU7N
      s/PI1znqjPHv/+032I99mx/uhPfe6iSqtJHpvIS04Rg/avUQXZpHUEzsfelVJs09HLtrDFdI
      hrjQN8WWF79NmSVPx+mT9Di9NMhJhrqv4WzYxKvH1mPMzPL+lX7ajn6TV3wmxq+/QxDQNB1r
      WQtvbDyMWYty5vdnmGp6A1cuzvSCxqHXv4VrsYv/91Qvr7/+CtulKOev3iKRq8W3YvUUGevH
      UHsQv09Fvn2FWKqFErcfafICwfY1VMs5RqdCuNqaWBztY1wt5zt/c5Ds/ABnL1/C+exhfGYB
      EDAH6qlL/4pfvx2nyuZk76EmHgqbJVhoaLJxejTCuo0Qj1mp274G6/E7JNQAkXgEb/WHz8KL
      fJE8UgBCczMYZTPJeAJTeQkL1wdINW1DAjxVjVR5rEiSQsBfQk2lH4MpjsO4bCjkr63l7JkT
      nAy1sn5dE6VWA3xodZGOhxjt7aB/cBBRgLyi0loSpz4AFl89u3auxylLLC2FsQfaqPcv34xo
      Nt2NzyOCsjjOm6dOksypZFJJ/HFwiUYqauvxOczIKQu2ikbqfFYKqQxWi/FhYzgtwuCdNL6j
      kM4qCHmFuUiCkmovaxtFeoZClNQXiGclmt1mgreH6e0NMdR1FnSNvNnP5mwBzDLoGjN3upix
      rqE6PQ3+FgyhO5yekTi4tfn+WtNaXYd+eoJkhUrC3YDT4MXtjhONJ0nGDdS4zBT50/FIAZgd
      62N+ycXJxWXLRyWjMB1pp+ZRD9xHwF67g+9/ZwOhmXGunT9J2fojbC3/cDoR/5pdPHPkAFb5
      waY4GhzE5fVgvmueoGsamsZHItEllsbom9R58dt/jdcs0fX2P6JqfC43/8z0MCO5PKFzJxgA
      CvEwCxOLbKx242lYh36xnxlJQQ+sx20WCUoudr50mJ0tpR/JS1fzjM2GWdN+lAZ7C2ffv8zJ
      KRMbtu9/qEqitR6P+C4DtyDQvhVJBJvLSTx4i5ihEY+lqM//U/LxxnDqPHOxKl79zjFKTcsf
      ZPDqu8xPL1Bd9mlZFpjp7ydpL6PEXUaZdxglXwCDjDMbZzwUptptx+70Yoxep2toivUVDsKh
      WSR71UcuhbZbvSRC1xmZ8VFmzHLrThDrNtD1AromkEvFmBgdomciyYatn/3FdV1hcixM277n
      2XfXGlRLjPK7dyaIak04bSVYzV10XlHZ9K1SJFGgqsLFWzc7qfDsxkaa2cU41fVtOM2AIGIR
      CkxOTuNvcGBVI3SHbaz/kOpMlIzYXTlu9tl59agIgo7X6uT6jfNY2v/2I7FQC7k0eUxYTRKF
      XAYFA2ajXDSGe0J87D3BenyesK2elvIHN7SYTEbyKvg9NjTRhN/jRBR0lJyGt6Ici6SjKDru
      gA+HSWfgxhVu9g5jqtjI1vXVyEYz5V4DPR0dDC6pNDc20FhfylTPdW70DZE3+WlsrEQWNDCY
      8XgciIDB7KDcBd3XrjE8p9DcWo/bU0qZz4uYnuTajX4ythrW1rlxl9TikFUQrXh9NkStQE60
      UVPiQr/rsOL2+JbDD6oKi5kCNVWVWE3L44BgsmNVltBclTjNElY9T9RcyZamUkQErL5yKkwJ
      rl6+xkgwgr+2lXKfBVEAQRTxB7yEhm5yY2AGf/shjqx1MRnKU136wMlFQEAsZElay9hUFwAE
      TAaN2UWNts1tuD4Uazcy0kFvzE6Nz8rCSDfDEQMVfkfxnuAnRPEg7EtOLpfjjf/7X4tRIVZJ
      Uen8FaCh0IOqFq1BV0NxBviSUzSGezyKoRGLPNUUl0BfAb722hsUig4xq+IzCkCOgWsdzGd0
      QEC2emhd34bH/DiBBFUiUxPkPVWU2lcZU1xXmBvpZ3g2iiBbqaxvprrEifQJy4FCLsZgTx9L
      WYGS2hYaq3zLUSlWouWYHRtmdGYJ0eKmuW0tbmOS+VmdshrP44VPXEE2tkS4IFHhe7xQKMYN
      30IqGsOtis+4BMow1hvEHAgQ8HsxZ8Y4eeomicdSPKjM9t1kNJL79KQfh64y13eJS4NLOL1+
      7MY8A3eGSWc1CA/x1tXhj3uI8esn6ZnXcdkMdF8+z1Qk/XAKTWGk8ywX+mZxeH1YxQyzoTj5
      7Bx3bs/yJMfZ9EKQweD8E8yxyOflMy+BzPYSmtralqM26CVM/8tZ4vmtmNQlRgdHCKUULJ4q
      NrZWY5REQlOjmP1+pu6MYKtqptprZGFikJGZGGZfNes/dJqaic4wMDhBUtFxV9jWNf8AACAA
      SURBVDTSWuMlGpyBQDl+qxG0PDPBBRylpThMMuhZRoci1O88zMaK5eOzdkDJROi53kH3MLjy
      s1jKmtnWfO/0TkfJ56ls3cKGesgthklncsCDYLS5xCw9YxkOHDtGqe1B86QTC6i5JGO3uwiF
      cwQa2lhT4UaJBpnIumkqs0Mhych4lOqmKqTYNMGCF3tqnKmUlTUtNejxWQaHxkljo35NCyZA
      L6QY6r7GQiJPWfMm6kttxY3Zn5DP3NaappDNZEhGF+i7eBm1fiM+IyQWZ1jKing9TtKjl+iY
      WB5Rx2+c5ey5y8ykRcxGiYXha1y4OY3N5UCNx0h/SG0Xnp0gJVhwO81MXr/KcDSLsniHjoEQ
      OqCkIvTc7id773ZVwUxDvZMbH5zi1tg8qWweTdcRJBmn04HR6sDn8+G2rQxkJFLdtpX4cAcT
      YyOEBTeVPsdD9cjFptHsDbg/HJ5BU5gaukUwLuC2KnR9cI0wkJ3r4+pIZDlNPkzn1X4ygLJw
      m7OXrnO5dwqz1QJKlIunPiCiWbEbFCLxNJBn9FY3C3kjLqdE9/kzLD48IRX5gvnMM0Bkpoe3
      /3MBoyjh9pfR1OzBIICrtJayxBBzkRiinmV4aol9DXZSiQTWpo0cbCtHEhSunJtg/cFv0eq7
      t4LOszKUVaC6mdjgCOGYgpadJbhUoHVDOzffvMnCukoMkVkMtnJc1rtHpYJE2abDvF4ywJXL
      79OZFGjYtItd6+qoravCuSSwdu2HIgXpCoszM0RnB3lzvIzv/vVrSJFRprNVVLiNCICWTqM5
      yj+6LxBl6tbvYf+utRhJkRk5Rwp41OpdV1ViOZGvHXsGj0UkOXSKWMUhXt9VdX/UCQ8Fadyy
      h73ta9A1ldzS70nnWTkhFfmC+cwC4KvawuFvHsWjqWTiIc6fPo2j5K9I95xmOFNKXakHoWAj
      nVk2+7R5SgnUlLEcPFkhnzNgNj9qwsnQffY0UW8T5R472oJOPKuBsYTmWo2xyQj+pSmc1Ucf
      xNvXdXTAVdHKC683k5gf5d3zvSzUllH9iFL06BgdMzIvfvN/YebGOXq7OlGWIqw98MDEz+Dx
      Id2eI6PWYpdWr1sXJAM1zWtxW+6GckynkO32v4g7Foo84HMvNwVBQBI1CoqGBkSXErRs3kpr
      cy12k7AinbjC9dGKv0RgbGgGRVVJxxPkHjq6jxCKetm0tZ2WugrMInfNP0XK6ltIDJ+lb9ZL
      S631QQfSFBaCEyxE02iIyCYTBkFbtomRDIjpJGlVQ11RTiGXRtEkDLKVxnUbmL98nLCngUqH
      4X6+FlcddkboGZiloOnkM3HC8Ud7igmSAT2Xo6AqLM3PEk0/2NSLong/X1tVE9nRbpZSCmou
      RTy1ys1/kSfKZ5wBBMLT1/m3fxxGRkA0yLRue45yO+iVfs7+18+5ZPXR4FWQ77pbSZLhodGu
      bv1O5s6f4xfXklhL2jj24lZESbo7Q/ioLo/y5j//DJOnBL8uIt0dfa3uAObkPKmanTiFh6qE
      Ep/h/OkPSGQKyBYnTZt3U+Ywg17LWtNx/sdPf4p//SHe2Lscclz2N7POfpJf//NPMTr8tB58
      kXiwm77pcjZULnvJGExOdu7ZwaXz7/Pz8xkMNjdbD75Is0dEkh4ULhoMiICxtAXL+bf42YiR
      khI3mmhbfm9RQlrh+yx7mthUPsU7//Ev5CUnmw4cpUEUkaQHY5AoGXjIXTo1z3uneml/9Sgl
      pDj/zlnqdj1D9Z/jKsqvKH/xphBqdolL53po3LWLCmfRWeTDFEMjPh5/2SfB4WH+59uXcTVv
      x2f7E94+/SWj9/h/QymGRVkVf/EzQJFPpmgM93j8Zc8ART4TuVxxQ71aigLwFaBt94sUlOIS
      aDWsWgBmbp/hxLkB8gIIBgtrth5k18YajKLwRHXdM/0XyZfvpe4LujpLV3MMd53lYvcEoreR
      Z4/uoXxFZIZ8OkRPd5A12zdhNwjk4kO8dWKUvc8dpsxlpJBP0tN1i/rNe3CbWL4rLBel5+pF
      OgdmkBxlHHnpJaqdBgQBdF0nMtnNqTP9bP/Gd6i/d3WArqPlE/RePUtH/yyCycmWQ8+yodaL
      dPfMQxDEj/UF3nzs74qb4FWyarOTlCqw6cg3+MlPfsKPfvA6+thZrg0sPsm6LZcTniH+Bc7w
      yfAA1/oUjn3vhzzXqHDy6uBDv0uiiUh0nEhieYRNTg6ykIOlaBwAJTVBcE7GeE8zqRUYvtlJ
      wruBH/7oR7xxqJHLx99lMb/8s56P0NU9iJ5OElcelKOj03PpJEHDGv7XH/+I779xBDE6R0qB
      uf7LnLjc/8U1wlPMYy+BdF1HMNgoLfEwl1fQM0t0jizR4Be5fLqThudeo9WR4dJ7J+ifjlO2
      dg+Hdq7FZlBZHL3FBxduEM1LtGw/wr72agzoJOcHOXXqMqGsiFnKsKkJJrrPkKvYQ7NfZKbn
      ItcjAV4+sBYtHaF3aILm1rUkJ25y5koPcUWmZdcRDqyrYnHwErPWjWyssiOgMdl9lnztQZo8
      y7JvMLjw+RcxiAYsDhfW+MPaJlE24jBZSaRS4LYxF9TZut7DQiLNOiA/P41avgHzvZFZNNC4
      9SBNBhlJ0LF4q/Ga+ygUQDcWmLx5AaF2B7XZCx9uSNLZAv4aH5IgINlLaN9Ugr7Qwy+OnyWq
      yEz2dtC4+xmObqguRoV4QqxeAJQU42PdKBEr2WSEmOJlz7ZyxPwMwbEe5scctBx9mSZXnqsn
      TqHW7eOHL5QyfOVdTl/WeWFXI1nRw7Pf/D5uU4HrJ9/klv8NWk1BTp67w9aXvk2Ny0Dv2f8E
      QJZ17oxM0+DyMBzJIIzfJrhzLe5EiGhUwyBqKCY/z33zB7gNGa4c/wN95d+jzu0m2HmLxvLd
      2JRJugYlDm98MPGZnaX4DR18cOoDXFYL+7fWPfSagmSk0m1iMBJnrS/OmF7Ocw1u/nB5kcL6
      ciaHF6nfU/5gKhUEDLKMruskQhN0X+/C3HqEEqtOdLyHm8lqXt5Zys2Bh5tTEERa17Vy4oO3
      CI3XU1lZS1tzLaaS9fzVS3FuRt28sGddseM/YR7D8lZAlAwYZBmr3Y1Milgihw6oBQPr9h6k
      ucSGmowyLXjY3FSGLBloaF2Hmlkkp8s4jWnO/u5X/NNP/weXBkPEE0lisQUCDVuo9lgQJRmL
      adn4ze6pREjOkYjnMBjdNK6xMDuTJBMOgqcSoyxjJcGZ3/6Sf/rnX3NtbJZoLIvVVYHFkCCW
      yBGdCGJsqsG14q2T84NMZexYkmNknQ24pBhdHd0kC/fW1CJ+v53QUpx0aBFDiRejPUB5eonF
      fJhgKkDlh/Ynuq6RnO7m7fc6MdbvYk+rH0FNc2cwSNu6ZkRNQ7+b7r4WWhDwVG/ktddfos5r
      Yu72Od463UOq6Oj1hbL6GUC2UtO8js0tPgCmb19iYHCC2g12TN4ySldex66viOx29y/58AwX
      OkfZcey7VLpNjFz9I6MFFV1UQZA+MtLZnR40dZK5xUkkUyVlFW7Cw0OMx6JU7S8lF5niys0J
      dr7yXSqdJobO/5rpQgHJ7GRdiYWeyUncUZXWtf4VuaqM3eymfv/3WGeLcuH0Gd6fUKnYcQzb
      CnNQc3kVjks36bE4qSizgeiksSbN7a4pkmXl+FcOI7pGZKyL93tTvPjNN+7H+SmkZhmfnKN3
      8tecQyU8NYUY+p8UXn6GbbX+u4IgYHYGWLc5wNpN2zj95i8ILq3BueqPVOTTeDzfC315D6Aq
      ScZGJhFtto9ogAx2D1VE6BqaJV8oMHKnF8kaQBJUdIMRu0kktTDEtdtBAGw2N3NjtwinFXLR
      Ke6ML9vaixYbfr3A+NgY5rJSHBY3WuY2o7kaqh2gqgqIFqxGkejMHW7cWbj/ioGWWhLdfczp
      Ah7nw7bGsiwyOxNCk0xYSXJ7NI7XbXo4FqPso8Y2z+3FHA6LHQBnVQWTXcP4Aw93T11VGB6f
      oW3zZpyG5TuRdV1HcjbxnR//mB//+Mf8+Mc/5Oj6Np773rfZVntXIHWdwc5z9AcjaJpKZnGI
      ubgbm1XCIEuEwxE0XaWgasUgWE+Qj40M91nIRya5eO4817q6uNkzgLt5H7vba5D1Aok8lPm9
      y8ZgopGq+kpmb5zh1NmrFEraObxrHQ67DWtmlhMnzzIas9DeVoHFVUZtVTleMcx7J05xex5a
      m0pwldTitsjYDDFG5m1s2lKHTRZJzs5grN1IY8CKbLYipSd5773zTOdcrGvyYfXVUOKQEWQ3
      UriTRdd2NlQ7VgipiLu8grnrJznTcQfP2sO8uLOcgYE5AhWlK8KoS5ilNMG4ifVr6jEbAIOJ
      xekZatvWPmSmoasqE72X6Orupauri66uLobmU1RU1WG9PynqZOJJrBW1uFfYtRnI0Hf1LKcv
      XmdgVuXZrx+jwiZhdboxLN3hj+91kLKWUBsoRoZ7UjwVphBaNsSFEx1UP/Mi9bavlsNh0Rju
      8fjKnwRn49N88Mf3ce94kTrrV6vz38M4/LtiWJRV8lTMAF9lisZwj8dXc0gsUuQz8pVfAj0N
      /OAHPygGx10lqxaA5NIkY1Ph5UBRggFfeS0VAQeP4Uf+iHKmUe2VuL4gfxhdU4ktTDE1H0Ow
      eKivq8RmfBD7TVXSLIaSeMpKMIpQyEUYHY9SWVeDzSShqXlC8yFcJZXL2iFdJ5tcYnp6jkS2
      gMHior6hDpssoCkZ5oKTLMSyGG1eGhqqWRlcT1fzLM5MMrOURJBMlNbUE3Ca+bRbZZPVLxbD
      o6+SVS+BZid6GZpYIpfLkU1H6DhzgqH51EeuMnpcZu9cYiL6hDNdQS4V5Mx7F1iIJZnqvciF
      3umHflfzKW5ev0wks9zBcvO3+N2JK8wupQBQsvN0XbpN5u6L61qByTvdDM9GyGazhEY7+eB8
      HylVZezmeS7cHCWbTTF95zIfXB0ld6/BdJ25wetc6Bwinc2SXApy40YvcUUnGhzk5mDwkapO
      QZSW/YmLfz73n8c4CbZR37aezS0+dF1nUDjOzGyEFr/IfDSL2yIwMzmHq64Zn6nAzPgYi4k8
      Nn8lNeU+ZEEjEwsxMb1AThXwlNVSVeJAREdJRRifmCZdEIhGsniAeGgK1VaBxyqQDE0zn7NS
      X+UDJctiJI7b60OJLzA1GyKnSngraqny28mEZ0jJAQIOGdBJhIKojircd63XCtkUkqOO7Xv3
      YJ418+/9UVhxE5pstGGzysQTaUptVmZHw2ze1MBCMk4TTpTQGNlAE857LSkaaNp6mCZh2Sxc
      zbXw3lvvEU02Mzm/yOa9b9AUMKIqS5z87VkimxsosyybRYyOT1C76UU217ruyoSOkFnk7I0u
      RlM2hEwEd0UtNX5n0SboCfHYm2BdU0ktjjI0laW03IuQCXO9r5cb505zOximoClM37rIxZ5x
      Eqkk/R1nuDESQlOzTI6MMBeOk05G6L50msmoSiEd4eLZDxiZi5JJJe+HDwmNdHJjNIKuZenv
      vcrZdzuI6ZCNh+jpuUMun2VydIjZcIJ0PETXubPMpCGxOMj1GxMoOqDHuHG6k/CK5bLFVU2p
      PUlwep7e0QXWNT58T69gkPFbTIQTSVCjTMW8bGqyMLeQACAcnMVbU35/6ScIwv1wKNlEiO6L
      5zBUb8Nnk/DaLUxOzaDrBcKjvaRcDTjuHYQJAiVeOzcuLMcr1VnOB71ANq+gKHkymSz5QnGp
      8yRZ/QyQXuTsyX+jwy5jsPhY295OhcsIBchODiHse4OXap2QmuP3UypHnz2Kx2IgNTfIqe7b
      ZGv3UdvSgjg1R6agklqcJBhKYjWMojnXc2TPGmQBhtUpMoCnqoHRgSnS1ZVk5HLW184yMadQ
      kQki2mqxWizUNrUizSyQVVSs88NMLSlsrViLONpJJFmLMzLMfNka9lsfDJ+FbIJYLMT13/6a
      xsPf4XC1hYW5EO4SP0ZRAMFARamV/oUYirNAqqSCQKkbZ0c/MbWUkSkbzbs+FK0it8i5d97j
      9nyaisY1bKwNIEsidWvWsnDxEv/9egqTp5L9+zdzL1aYgEDTtufxlPRz6g+/Ii642Ln/KGvr
      ymhvbUCPutm5s2gN+qRZvQBY/Rz82iE2N3tR8ym6r5yjd9DKngYBY2UbGysdiKJAXsmhyQZM
      BglBEDBbrAiijpIK033tMnnZi80skcrk0bM58qYsZmc18j3Psnu3sNt9FLQBlmJ2jAYPlU0y
      o9NzRLIzOOq2oqWjdF4+T9Zait0okckqyJkscqWLSqvMbDRMJJikqbb+oU403XcZQ8vzfHPr
      NBf7BxnTCkzkazkYuGc0J2AvKaHQN8+0TcTrr0aQPNQ4lpgMhgm5Stn34VY0+Tn46rfZX8iy
      EByh4/olTPt2M9Rxi4pdL3O00kE2PMkHly5iPfQ8FQ4JBAFBMuKvb+dbNWuJzo1x6vz7eHxv
      8KF784o8QR7/HEAQEGUjFqMBJZ9HB0TpQUQ02erAnk8yHU6gahoLc0EQLaiZNBmDi117d7Ot
      vY2Ac1nNY5SMLM1NkVY01FyCyF13MKPdib1QYHJ8AKmkBq+rEj3ZxZ25EpoqjORSUXJSKbv2
      7mbLxjX4HXfVRqKR1rYyhrpuEywIVPlWXsSqkFjKYXXb8Va30WSe4+0L82xsr8e4Qp0lOsqo
      zU/QsZSn1OYADFQ0+ui51I+r3PdQB9U1laWFWZJ5FdFgxuMrQchGSWezpNM5JFlevinSYELL
      xu8vaXRdJzw3RTiZBdGA3ePDKhZQVB1RFMhmc+joaJpetPt5gjzGEmiJi6f/i+5LJhDAaKtk
      79FyRMIPJRPMbnZurOa9U29yqQCyPcD2fftxOBWsmRl+82+/wuz0YSzksAPeiiZ8A+/xn7/q
      xeQIYC3kqQcEg5Vat8LbPQle2m7HJCiooUminvW4RCjYncjpi/zml6NYPSXIiRye5Rpg8DdR
      pVxjUt+O86GozzI165p4+71f0y+bcQcq2dGaoOt6Pwd3reN+dHTBRmWFxunBOPu3LzvxGnwV
      xEduUL9z50Pvq2sqM/2XuTWZRFE1BIOR2tYdVPj8yGur6PjgN1zNaUgGmdoN+yhz3hMfnfBk
      Lx0DC+RUkAwy9ev3UekyABUYbp7mf/zrAA07DrKvtWLVn63Iw6zaFEJTFRRFveusfdc5RpIQ
      0ChoOpIoPjie13UKioKq6wiiAdkgIaCjqgUKqoYgiEiigC5IGETQNBWloIIgIokgiDKSCLpa
      QFHBIBsQ0SkUFHTRgCyJ6LqOdi8/UUISdBANy/kWMvSdfw917YtsLJUfMtnWdY2CoqDpIN51
      Y1Q1HYNkeGippKsFFA1kwz3ndo2CUlh+ZoWiXtd1dE2lUFDR9OX7g2WDAVFc/q2gFNB0HQQR
      WTYg3i1k2WxaQy0UUPVlD7F7v+u6jlZQKGg6okHGID5wji8awz0eX3lboFxylnNvvUPMt5WX
      n2l/4Lv7FSGXy7F2z8vFyHCr5CsvALqmouQVBNmILH31TJ9yuVwxMNZj8JUXgK86RWvQx6No
      DPcV4P3330fTigdkq6E4A3zJyeVy7P3G/7msNCjyuVn1DDB6/fe8fX4Ko1VGEGX8NWvZv28r
      fpv8REMjjl79PZmGV1kXeIKZrqCQjXDlvePcnkmim9zsOvwc7bWe+7/nkrOcP9vLlmeewWsS
      SM9f47//xxCvffs16kqsKJkQ505dp/3ZF/GbAXRCd67w+9MdqKIZEKls3ceRg62YsgmGbl3l
      yq1x8oLM+j0vsaOtZPkj6DqpxTEuX7zK6HwcQTLRsGU/e9obEDMxEgUDPpf9Y0+Ca9oPF7VA
      q2TVAqCa3Ow7to/NLT40NUfn+7+nf6yO/evLPv3hz1NOIc8XaembiU8yEy/jm399EHH8Mr/t
      n3hIAGTZjiClSaTyeE0mEtMzeMrLiaUTgJVCcpqkUIH9vrm2RiyWY+2hN9jTVvWgIF0jONjN
      cMrHN394FLOQI5FQ7w8WOhr93deR6/fxt69WoecSzM4n0HUIT/TdD4xV5MnyREIjqvkcGkaM
      JgMkZznZHaTBnuda1zibXnmDmsIkpz64yHxcwVHWxN79u6l2i0z2XOVc5wDpgkhJ/QYOH9iO
      8/9v70yf4rjTPP/JzMqs+66ioKAAIUC3kEAIXeiwbHnstnt6undnJ2YjZiImNrY3ZiP2f+i3
      +ydMv5rdiYmN7e1te2x3W7Yly0IXQkhIICQB4oYqrrrvqszcF8gWsi3bwvbMWuTnZVVWVmZV
      fvN58vd7ft9HKjF9/wbXB8fJqSZMQpFDrTB27Q8kal/j8DaZB1c+4PpCkL/+D72IqSjX7o7T
      1d3N6sPr9A09plSVCG7v4LVTXaRHP+KR3sGp/SFEStz96AOU7l+wy7c+ImS2hwkFYuRyZShU
      aaj1P3N+gmzGb7WRSGdo8laZXbBxtNPF47UsHc0hMnMzKM2n+KI9mqaSzCXJlmI8FPNYHF7q
      64KYtCrTC3OEIj0sTI6ByUY40rCh67yAJEoUchkK5Sp2s4tIkwt9eZjfGtaIPxqbF0AhTn/f
      u4wOKOiCTH1rB93NfoTiItn5UR6F9vLKr/4dNeY8n378gJbjP+etBi/zw30MDd0n1LsfR3gX
      v9x5DJusMfLZe4wv7WOHPM39GZXX/vJvCdokRi//DhVwBWqYXoxRDftY0V3U64ss5MCfjwNe
      zIoJd2Qfv9pzEptU4e4nf+BxvJPW8HYKN0fJ7KzBVZzhUSHMW96nw6Gy2YGlEuODP7zD9t37
      6O54NoIJoolaj8K9ZBYCGaKWGg7WeRh9tEyZMHPTJZpe82xI+yTqI03kFlLEFlOkVwZ43H6a
      E7v9JKOzlAgTsEE5u8qDyQRnz3TgMK0Xw7Xv7yJ1/Rb/938P4q7fzdneLhyGNeKPyuYFYHFz
      4FgXe7Z7qOYTDN4cZGw+xMEAiO4mjvd04LGaqMRjJCQXPSEPkigSbtzG0NIk5XKFxMJ9br7/
      mEy5Sq5QYH8wS0aJ42vcTdCuIAigyBIFwOWrR5+ZYS1hRlF8RPZLLM6sIhenkcO9mPQqa9ND
      DIzMkC2rFHIpDm7PYWuuxWeZYiWZJrMQpW5nOxuKQVkeu86S9QAnds0xUZGpxMe5OFHk8PGD
      OEwCIBKo8xO/vcaqVcVZV4vJWkOzNsJcYoVZ6njNseF3ESXq2g5S17YeHcu5Jc5/8CkrTb/E
      7Amx49BRWgMKerVI38fvEU3spC1oBkHA7m/i5Bth8tk08w8H+P0fPubNn5/d9F9k8O1sXgCC
      hNlmx+l0gdPFru2LPIouowUcmKxWzE8mnUSTCapVKk8GmyqVMroG5dQaE8sVzv3l3xCwy+vW
      iLoOuka5VEYT2JAegMXuRFArrK7OINha8QXcLIyPMbOm0/Sai2JqhukVkdf/6m8JWOV1a0Rd
      R5Bt7AxbuTI1R7AMTU0bjTwrLD6Osu34GXY6Wshf/piPL+l0v/HWM9aIJn8If/wGI24fNfU2
      ECxEGgX6785BKIBjY8mErqOqKiaTab2lrGJFFjUQRZwWO/FUBiEYANGELItfFLZ97iAnmhQc
      ngA7es4Rjf0ja6kKG8v3DH5YNi+AaomllSnGWENXC4yNzBE+tAORZ3vqSs4ABwIql67cpL3B
      R+zxKP7Gw1gtAmopy8LUY5YqcQaHZ6nr6cEbaCQzPMAdWx6HkGNkIk57K4gWJxGlzNDoMgfP
      HcOprKEmLjIjHeO4FcolEbWUZm7yMdHiKkP3l4iEAETcrTtR/vlD5htb2ePeWLtvwl/ron+g
      H1OTk3RBpVwskk5nUT1mTJ9nSpKfllCcP86Z+cXOdStEW6SRxfM32PGLN585X61aZuDiO5Q9
      Owh5ZFbGR6iEDxN0mrDvbuP89T7M1V2I6QXW9Bb2+Z6siNF1Rq9+wLKpnnq/nUp6gThtdHgV
      pJKT5OgkY+NmHIFawt6vHw0yeHE2bY0o6RUSq6sk02myhSqR3d3s3hZAEkRkiw2vy7HeKFsw
      4QvXI+VWiK0k8Tbv58DOBqwWGz6byOLiMlVLiAP72vD7/AR8PkJeM9HFKAXRy55d2/D5AtgU
      CbvDBHId25sDmE0yJkEm1LSNoMuMyWzDbYVodAUcDezf04zPH8RlkRBEG6QfkA8cZketdUO+
      LuAIhjFlYywlizTsPszRA00UMiXcXvdTASBgtduRbX6aw0FkCUSTFcWs0NjchMP89D4iihI1
      oRDF+BKxtSy2ul0c62rFIgpY3TU0+GXmZxYpmAIcOdqBS356NE6Xk2JyhaW1FGXJx9HeQ3jN
      ImaHG59cZiaaQHb5CTithjXiD8RLPxGmVvJEJ0cYelDgyFsnCZherltnqVTi9V//d6qGLcqm
      eOlLIbRqkdXVEu1HOl+6i/9zftXlMUohNslLHwFedoxiuO/Hy1cfbGDwArz0KdBWoOvEOarG
      gphN8Y0CqGZiXL3az0pWpba1g86927H9K0kmPnufFVMjO8LOJ6+oLI/f4fq9KcoamJ1B9nV1
      0xSwf6t14OdkFiZZNQfYFvi6pkM6+bVZBgaGWM6quGua6e45gNf8NEjqpSR3B24yEcviberg
      VPf2r/yAulZm6u417k2uovibOdy9n4BdeXajwho3bgxgaT3BgYiD70vzmf9kFMNtkuemQIWV
      Cf7l/c9wbD/E6dO9hCx5ii+88CjDlXfeY6Hw7Vt+mVRskpnVjR/USMzOY2vt4uzZs3Rud3Dt
      4wvE0sXvvM/cygLRVP5r3yvnVrh08Qau1i5eOX2cJleZmcUNnox6lcnb1xjP+zh1ugfr4hWu
      TGSf3YleZur6Rwxn/fScPM3eiA9V/fKdWSe+MEmsXGDm1ggZY/Dm35Tn3s9nxh/gaDtMZ2sY
      QRAIBNbrkauFJKO3bzKxXKR2Ryc9O+uRxCSjt5ZAWmFsag1f6wGOtXm5d+sS/cMjjBVK1NU0
      caS3m8r8XTT/dqJDN9DCe9lVK3L/1i1m4yXsoe2c6NmDQ5aec1QCNqcHF2aH5wAAD/9JREFU
      n8+Hz2tj30SctXKJmlyOocEBZpdz2GqaOXK4E49cZnJmAZ/XzdRwP1rkGBs93/Jrk0ysmNnV
      Xo8sQqWcpKx7aW6sx6sI+AOhr3y3JJrx14UIBsJoDW4GS89evdXULINLTt78i33YBSAY4Cvo
      GovLSRqauylO9rOSquD0CSyODKFtO0SDHdByPBqcItS1F7ea5tbly8ylKjTtPc7+thpk43n3
      B+O5ESCeSFAXruXZKUeN8dvXybnb6T3agTZ2jVuLBSDD4KU+loVajh7dT+beXeY0hfaOTtrC
      DRzqPcORQ7twmmBl6g59F6+S8WyjrcFHJZfGXLuLkyeP0aRN0Pcg/rxDeoZqKUeiVEURJPKp
      FJa6dk6cPkmTLcXArXHKeoW56UcMXr1C2tFOa+2TVEPXSEcfcvn6DL764BeWhhZ7HSHbMh9+
      eJH7E7PEM8VnjX4FkYY97eSH+7k1fJs76QZO7ng2lcquLlNSE1z6/T/x23/4Lf/8zgVm48+G
      P00tshrPUFsXoibgZTm2AkhYhWUGRqKo6JRW5xhazeDQs9z77DrSti5O9vaQHr/K8HTcmPT6
      AXluBNDU6no9yzOvpnkw+Ih8OM+iAHpqkfijKD0NMoGmgxw+0IaNEk2ex1REEYfdhc1iwe3z
      433SnLFaVnFs28+xfbWYRIEKfnh8iysP0miZKCu1a7D/eatfSgxf/hOxOxbQdCx1bTS4bNjw
      o80McnU4QTGXQXdbqKhhKGZRmk5wYl8dAlCgxIOr55myBDjy6lkanE9zc0lx0vP6LwmPj3J/
      dIC7gwJdZ96kvcaCwPri+vnH01RtEkP9o/T+/C+oxiYZF720hX3r51atoop2jrzxJl6LyPTA
      J9wcmaTx5NM6fjU5zqrewhGniXLAw73pJdgdxt3WhfndQeIH3iC7sESothEhvcS9+UVsqSxT
      QG5tlTX3EgebfZv5rw2+hucKwOlys7Kyys5g7YYx5gKCUk/3iZP4n0wqyTYXEPvOX6g4XDSG
      1y9+gImBi0Qt+zje60VcusvvZivf9GlaOjrpjHgQJBm7w4FZKnP/yg3WrBGO9+6nEJ9maCyL
      pgOOEG31G0uVZRp3dSCtzJJI5tD8ti9CoK7r6+Zbu7qI7NjP8uMbXLv5iMa3OrCyHnGmFtbo
      PvMmUvQ2/XdusyAWaOk8+cXe7U4XopzDaVUQBYg0NdB/f+P5VJkZusfYRIZ//Id+dLVEPO8l
      1nuQkClAja/MYnSN4kqc+oNHUCtTaM4wJ051PSkMFFDsTgx+OJ6bAjU2b2P+Xj9zyRK6prIa
      myVTDBD0J5lfreL1+bBJBRKZb7pgZSBPNltCU9eNooBn0qpsJkddYyM+h8LKyjKVb1z+JWB3
      +wgEAvi9biyyhKBViOd16usb8LstZJajfHFITyzKN56u3V/HiWMHWR25zvjK0zSnXIwxfGeC
      TEkFdLKJBKLN9rQiVVcpFUoUKhqBxmaYuc1k1onf9bS4zhpspCE/ybWxJcpqhempeVxO+9Ov
      LywzvBzgP/+3/8qvf/1r/svf/z3/sVtheDqHIIg0hGuJTd4gVgwT9plR3H4ChSXm8jIevw+l
      WiJTKPCDrjnd4jy3GM7iDFDvqnL5o/NcG7hDUncTiTQQrvUwd6ePC1du8jhWprm9BbelwnK0
      Sn1LEBMa6aU45vowbpMZs5Th+sULPFwsEm5uQk1FMfla8FrXv8dsqnDzwnluj8Xw+D1ULSH2
      NPrIJ5coWmqJ+J9siE52dQXNE6Z2w0WHIONR8ly9dIGb92ew+Gtxmm00RGrIJDP4/TVYLeuB
      rpSKU7R4qQ/VUeMVeTg6TaAujNkkgKYRHbvF5b4rDNy5T97ZxqljO7Gb1n1ORUnBIWW5dvEC
      g2NrtB05TYQlYpqLet+Ti1yyUBcJMtP/CZ9dGyTn2M7xrh3YZAnQya3MEZN87I0En1zDInaX
      wNR4noZtPpwWkYmhu3gPvkqLX0aQrDQ0uLl36U/0Xb/FbFog0tSIy/p03bVRDPf9MEohfuIY
      1ojfD2Mm+CUgfvN/GtaIm8SIAD9xjGK474dRDGewpTFSoJeA3/zmN0af4E3y4gLQNYq5NIl0
      Dl0w4fIFcJifV7rwY6FTyqVIpHKoSFgdLtwO6zM+/V/5hKaSS8dJ5ytIZjt+jwvThi4wajlH
      rmzC6TAjANV8knhRxOdxrfcsqBbI5sDhtm4ybOqUCgV0UcFi/vqfXdeq5NLJ9caAogmn14fD
      LH/r+t9ry26qRvO8TfHCAkgtPuDKjQdUZQVJ0HFv76F394u5wZWWxxkv1bA3sjm/AzU5x8W+
      Qcq6CQGNiuDmxCtHCdnLjN2KUneonS9PFxXik3z84Q10p4titsCOY6/Tte2pA1xu7RGXbgu8
      9uZBrAIsDrzP7xcC/PXPzxFyiOSiQ1x44OFn53bxpdrOr0dTmZkaxxrcRo3LDGjMPBqiZG9l
      X1vNV7fXddam73FtaBpBlqFaQQm2crRnH0JijljRQmuk5mvF4PCFjVGgTfJiAtBLDPUPEuh4
      k0MtfkS9SuHJpFOlmCGZzKKKCm6PB4siUc1nKCFSymYo6xJujw+ZAguP7nAz14ZPCmF1B/Aq
      VVIVE1aKpPIqbp8XSS2QTKQoayJOjxf7F3dCleijISqhTn52qBEJlXyuiKwIpNZmuH11hN1h
      ByGTDV+N54v+XcXUCnpgH2+8tp/s6Kf0xeLPCMDsqMfCLXLFA1jNaebiXnY22shlc+BwkJif
      x928H1nXqZbzJJNpKroJp8eDwyKjaSXyOR2zXCGRLaNoJYaHbuFukajW+/B51+uG1EqR1aUo
      FU3CHQhgk9fjia5rTIyPEdp3lsOtAXS1Qr5QwaLlGH00woOME7tJw+ry4LFbDFeIH4gXE0Bh
      imimiT9rCbBu+yNjkwA1zZ3LfSyXdSrlMkpoB+eO7CZ25yMuLJkJmSGXy2CPdHKk1cSj8QWW
      SxUGK/OE9/bSpTzk/YdmmipTZJQIR07sZ2ngCuPJEnq5RNUR4dWTXbjMEiDiDHpJ3hxmvM5J
      a70Xu9OBWsoxO/aIxcQi+uAgS45GjmwQgCO0Hd/4CKuJOMurVdranrVAVMx2zIpIJlvAV4yx
      6m2m05ZkIZOhpVZgfl6iqcOOVs0zdPk8UxkBRVCpynW8+mfHMZdn6PvjPFZvlrQcpEkpMDMf
      xVK8SzJeT8+hDqikeTQ6wILbTCUXR64/yavHmzEDCAJuh5Wh+yM0h44QdFpxOBX0xCQj49PE
      ihZuqVnqd3fR2fKltqwGm+bFBJCMkw0GcX4pCS7O3mFWbqZnjw+hGufmZ49Z6mwDZJr2dnO8
      JYgan+TywzUsnh6OH9lJOr2Pt488MY9dgLXZSTrOvkJPgwcpOcrFpIOujj0oFBi9NsRkcicH
      Qi5AwNV0mLPVUQauvMv1sp19R3vp2B5i39FjzN6z0Pn2z6j70qHrqko+McG7/2uKA+feZm/Q
      QjZbwGa3IgogyApBs8xaNourmMJXV0/IWeXOTA6tJs+cXEeXDYpLY8wVI7z+dicOocr4lXe4
      OZGmN6KyuLhI9+FzHG8KIusVMoU03p2vsKfBBagkJSuNO9vp6tiGWIly8Y8TFFkXgIBAa+cp
      TKN3Of+7/4HmjHDmzCkaAts409NhWCP+SLyYADw+HKtLZDTwbBBBPLZAdHaNO5n13Zk8HhRJ
      pISEw+VEMYmUJRPSN7Qoqmk/xJ5GLwKQX1tidjGKrK6sv2lx4DA9bUYqSGbq2w9S395BKjbO
      Jx9dwup6i+cbU5d5fKsfZ+cveDM/zMOlZWYz95lnO8cPNqEIgCBTV2Ph6kocRS0TarKjBE2Y
      ByaIBU3YwwHMQCmxQtm/C5csse4DGuJeLAWNEvUte2lvflKv/3WDMqKMw+5AkQRUTUERN+Tt
      goBs9dDWdYrWjiMsTw/zycfnOf32nxtj1T8iLyYAaxM11puMTa3Rtc2HqFcpVsHlD+AJRzh3
      ZgdmUadULGOSJaLP2Y0giKiVCpquI7Be2yXJT0uvzW4fPp/CydeP4lYEKoUSWD73H9co5XNU
      ULBZFZyBBpr9o2QLFUBEEKpUqxq6JGwohsuzHIXIUT9NUjexT97h4lQt//6vIigbzK/ctTVk
      h+eI1wrssNtBdtJs72PgcYD6tvUcXvIEkMejZCp12IUq0YVl3MGDQAHpS50lBV2nqmp8l7lG
      XdcpZFOgOLAqCoHGXQTvjpIvqjgF4clM7+c9ggUjEvxAvJgABCudRzu5fO0TPnjgwISKs+Uw
      ve1dhO+d571/mcBukUAJcvxU53N3Ywu1IN66znuZhzTtPsqBL7VCl4Lt7HV8wIfvvY/TJiPo
      DjrO9FBvMwM6yfkH3BhZQDIroKkUxQCnQw5Aoy5SoO/dD6it2cbh3r2sL4Nx0rzTzLX33+eh
      Q0EXa2iw5Xk4EaV7d/0XzwmiJ0xtvo/53A66HOuvhhps/J8Ly3QcPAyAxd9OxPwhH32wiFlQ
      KYphXj3mhvLSsychStR5HfTfuMDCVITuzn3f8uPqzNzrY3RZw2KW0asFlJpDhL0ygh6kem+A
      P/5pifCugxxo/pG6hWxBXrgUQtdVipkU8XQOXZRx+wI4LSbKhTTxeJoqIjanF4/TQjWfoao4
      sMkiWrVMrlTFbrMhopKJr5IqVLB5a/DJFZIVBY/9qRKq5TyJtQQlFRS7C7/b8WScX0erlkkl
      kuRKZQRRxun147SsjxJVCmlW42kwOQiEnj4Eq5UC8bU4JVXE5fVjoUiuYsLttm1IMXRyiRUK
      ogPfk9fVcoaVZAWfz4NiEkHXqZRyxBMpKpqEy+fHZV0fBcplNeyuz+cJdNRygUQ8SRGFgN+L
      UC2iiWasZhO6XiWXLmJ1O5B40kO4lCOVSlMoa4gmM4GaAGZJWJ8fSCVI5srYPH68G0aBjGK4
      74dRC/QTp1Qq0f2zvzN6hG0SQwA/cUqlEvfv3/9OzxkGX8UQwE+cUqlkVIJ+D4xiuJcAWZYN
      EWwSY4jZYEtjCOAnjnHn/34YzwAGWxojAhhsaQwBGGxpDAEYbGmMYdCXiFJ6idGRh6R0O+27
      91DnsRpFc9+CEQFeFrQi/Rc/YU30ElByfPrpVbLGOuFvxYgALwnqyl3mTQf4Vc8ezJSRE3/g
      7lKZEw3G6rFvwogALwn55RjWSD1mARAU6hscLC3n/q0P6/97DAG8JKiahtXy9G5vNluM3sHf
      AUMALwkWm51kPL5uQa/rJBNJbDYj/fk2DAG8JFgadyM/vsl0okApvUD/mMbuRuu3f3CLYzwE
      vyyYwxw+4OPKu/9EVrfScvA4Edu/tmPfTw+jFshgS2OkQAZbGkMABlsaQwAGWxpDAAZbGkMA
      BlsaQwAGWxpDAAZbGkMABlsaQwAGWxpDAAZbGkMABlsaQwAGWxpDAAZbGkMABlsaQwAGWxpD
      AAZbGkMABlsaQwAGWxpDAAZbGkMABlsaQwAGWxpDAAZbGkMABlua/wc5uhnYlHAMswAAAABJ
      RU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Bottom10originstations' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Gender-Age Statistcs' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Maintenance &amp; Gender statistics' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Months Vs Bikers' width='192'>
      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
      LrBR8QAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Passes Purchased' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 2' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 25' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAACFUlEQVR4nO3TMQEAIAzAMMC/5yFjRxMFfXpnZg5Eve0A2GQA0gxAmgFIMwBpBiDNAKQZ
      gDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFI
      MwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQD
      kGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBp
      BiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA
      0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDN
      AKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxA
      mgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZ
      gDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFI
      MwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKR9Y+0F
      fBUOM1sAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Today-#Trips &amp; Start Stations' width='192'>
      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
      RU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Top10deststations' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Top10originstations' width='192'>
      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
      YII=
    </thumbnail>
    <thumbnail height='192' name='Trip statistics' width='192'>
      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
      0YdRAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Trips&amp;Riders' width='192'>
      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
      jz2S4eQ8SgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Trips&amp;Trip Miles' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAgAElEQVR4nOy9Z3BcWXag+aX3SGQmkEh4DxKOJAD6IqtYTs3q6uquVpe6pdZoR253pdDq
      x+5GbOzGjhSKCcXuzp/5MxGzO9rWSlEhhaqnvZpVXYYsQwsaAIT33iWQ3vv39gcIFEHkAwF6
      kPlFMIjEO+++exP3vHvvueecKxNFUSRHjhcU+dOuQI4cT5OcAuR4ockpQI4XmpwC5HihySlA
      jheaTQowOthLV1cXXV1dLLl8X19IxzZ/3gHLy0sAjI+NPXQlPc5lksJDF/OApBkbn9rmusDy
      svOJ1eZJEw16WVz17kg2EvBs9J+unn7u/pO5lpZJP54qkg67mFraXf9cZ5MC7Gs+iH96mtqO
      DkoKLY+kcuPj44+knKdHmvHx6addiafGpYuXuXTp4o5kDWYbHR0dzMzM0NHW+sSmF+mwi+ll
      /wPdq9zu4n/9px/hD6f57r95j9s3RlnW+vAZS5B75yk78DINpRamuy7QFzAhd49jrNhPeG6U
      w9/8Pt3dt3n77RIAUhE3n3zVjVmTobD+CMaMj2WPH6cryLfePMmvzn1CeXkFSysemqsKWPAn
      8K2ucvbb30Yjh5GuHprfLuYX//yP1DceYHx6nu9/57c499F5HA479S21/PRHPydtMPJbp1uY
      W40Scjt57e3vMDfSQyiaIC5qKFDGcKWUWMxWGkqNnL82hEkeo7T1NBNdn2NzlFFaUUeJ3UI6
      5uXcp9coryggKcCHP/sZr3/veyx3XSBW+hITV3+BxxPklbe/z3BPNx3VZr6cEagyRMC6n/zM
      CivhDL6ZcY6/929xaOHKl5+i1FuwFjoITl3H2vEexfEhrizqCEx1UlO/n/6BQVqam5mYWeR3
      Xm3m/z7Xx0GHnMWkkTJ1GGXFYeSecdJyLW5/mNcPOvj/PuzDaNLz33z/2w/UCaQRiKYEbKoM
      gaTI9U9+xam33mXm1gU0tccY7zyPrbicuUUn3/vO21vunu66wOWpKAajCbMY4aWSt/nJ+//A
      vuYWZpY8fPNUE+cuDlPhKKTtWDsq4NzPf0JJVS3z01O8/M3vcvvSJxjMFmKCmkLBSd+qDL0x
      j2+/eQrv4gTXBucpUAQg/yArC9PML3uYd7o43VxEr9vIq4eK+PX5br7zzVeztnBbJY2klfy3
      f/ZnFBqVG+ItB9t57ezrjPf2bcjVNx2gpdZBUVUzLbVF+MKbB7upvpsIOgv6fCvLczN4PB5A
      hnPFiXO0i/KDZ+joaEcupugdHMGgUWFQJFj0xjeVY7QU0t7ejkmrxDV5m6Lmlzhy9Bj5eiVK
      UyF/9ic/ZKB/CJNORZ5WZH7Vj9vtR65Qs7QwjznfQiaVRKVWM9zdhcqUj9FqYXF6FrPJRDqV
      QaPVADDadZ2Dr5ylo+0g6izfUjAU59/8yX9HTcnXI2V9YyvHjx3Cu+phYtHNK6dOUl5cuHHd
      YjaTTKVQa7RbytPozRw61IbVYqWtrQ39nYdWVNdz8nALenMRJw63sOryMTI6hlKpIBTwkwEs
      JdWPofODf66fRW8SpSzBl50DvHSshWu3hpnxJqhSriJaGzhyuAPdNq/R8n0H+e23zmx8Ntvs
      tHccwSYXiGsM6NQyZCoVijvbsXKNnvb2dl4/1kDf2Cjj4ysolGp8XjcA1c2H+fabpwC4fnuE
      s7/1KgebGwDwejwIwIpzhYKadvzz/fRev07HyZOS9dtWAeyFdmSbfiOQSCQZ6e6itH7fdrdu
      wlFRjUKuoLWpmX311UzNL9G6vw5EEUtJJQvjw4T8bqIJAYfNjLW0lrYjxyk0qiTLtJbW4pwY
      JBENEoqlsdvtAJQUWjEVVXKg4xjF+gTuqIKq0rVrCq2RE8dPMNLfTVlVBXKFlpbGFhrqy3FU
      1HKko5Urly4DUFxRzsTwMH73KgkB9FolkXiK+fkFACyFdlRyWfbKATp5Bk8wyurq6sbvjNYi
      Thw/SveNaxgMBqKRCHNz8zv+Htcxm83UN7Vy4lgHCtho+6Pmet8sf/pH3+fVd35Ixj2OwV5H
      eK4TldGBwmQn7JwmEQniD8cly7i3bslkknQqjiueRJkUOXL8BLroAhPutTKEdJpkOkNX/yT7
      qmvItxk4cOggba1NW8orLzAwPLOy8R2PTs1zsHU/Mta0aX+JmaszYcryNdKNFO/Bu7oqpu78
      7Ha77/yUEt1uv3jr/DnxYne/OLfk2pCPBr1iOJHZ8v/6vev/u5bmxNv9w2I6I4hBz4o4MDIh
      utxuURAE0bU8L45NTokfffSpKIqCODEyIE7MLm48w+92i6m7ylr/P+hdEXv7h8V0Jim63f47
      0oI4NTYkjk3Pi6Ioiouzk+LMworodrvFTDoh9t/uFlc8AVEURXFlYUbsGxwR04IgBjwrYndP
      n5hIZzaeuzw/LU7NLYhut1cU0gmxt+e26Hatbmrfen0SYb8YjKZEMZMQ3d6gmEmnxIG+2+LH
      v/yl6LvzhSaiQbG7u1sMROKiKGTEwb7bosftFr3B6Ja2ud1uUUxFRbc/vOX/TDoh9vV0i8su
      n5hJhEVvMHrvn/GR4HK57vp5VRRFUVxdmhMjiYwoimvf2cDIhPjRhx9tum91dU12vS+Ioih6
      3W4xI4rizz74Z7G757YYTaTF9b/VxMzCxr3nfvULsf92j+jyhURRFMV4JCB2d619Z2G/W4ym
      Nj1KnB4bEhcWFkRvMCpGgx6xb2BEXHWtfYdR97j4yaWBbdsoE8Wd+wItTY2TV1GPcduVwy5J
      x7jR1Y8gCjQeaMesVz/Cwp8eS3OTLK34UBvyONDU8LSr8xgQuH3rJsmMSGVDC0UW447uGh8b
      o75B+vu43/WdVy/JjZt9tB89jFJ6oGZXCpAjx/NGbiMsxwvNQyvAmkVnjc5rnQ9b3ENzd32y
      0X+tk/ATqksOEISntoO5IzYpgM/jYXV5nqm5JVzLc0zNLQNru4G9/UOkBZFIwIPH66VvcARR
      SPJfP/iArq4ufKEYHo+b0cE+vMEoIDI+3M/Mwte7pNGgl+7ubkLRJCAyNTrI1NzSxnVRSDHQ
      e5tQNEnAs0osvfa8UCyNa2WR3t5e4qm1L3RpbmqjbCGVoK+3B7/fxwcf/AtdXV2EYmkCbieD
      o1NrNgFRYHy4n6Gh8ce2I5ljK8/6DHuTAnRf+4qwTMfIrUtEZHpGbt8gmQrxmy9usr+2jI8/
      vcDsQCf980FKtWEuD7qoqK6io6MDi0mHa2WZstr9XP7yAtPdXxDWlWPQKDbKjyTSHDx4gAuf
      fczy0DVWBBsm3demzvOffEL1vkbOf/ob9Dol5379IZ+cv4heq+Sj33xC4/56Pjz3IXODN3Em
      1CSWhxmc9/HRhx9S19iCIMqorqqmo6MDbdrN5d4ZSvNlfH6lhy8//QiTo5rCHS7WcrwYbJ4C
      yTWUOArQaI04HAVolEriviXySurQ6POQZZIAVFZWYTDoSSaTm24vdJRi0KpRKOWUNx4hNNvH
      4NAY6Tsvgd5b1+np6cXrj2CvO0jaNcrA4MiGn8+Kc5mRwQGMpnzkeiu6xBJ6Rx0KGRTYi1Br
      9GjVciam5ogFVggLahSZBDK1Br1ahdWSv1EX7+IUvkiMyQUvFqOGSEaGw2JEo9nGJpzjheO+
      awB1YQ2p5UFuXu8kr6B4y/Vah5Wvrl4nGN2sDIFgAK1OR8DjInGng8diMWTytWExFAig0eqJ
      +l1EU2vXa6orSaQy5FksLI/exrr/DCrfOCuBOK6lOa53XsNoKeJQeyvuVT+iXI3VbMCiV3P9
      5k1ml1ZxWI1cvX4TQ1kz2qQfURSxWK0U5mm5cu3GpilXjhx7xgz64Ucf8vY3t/qb5Hi2yWQy
      KBSK+ws+JfaMAng8Hmw229OuRo57mBgdQmcuRCUmCCXAlm/EpFPgjyuwmfXPvAI8yj3dx0qu
      8z+LCAQDQTSmAkKxBApg1RVkMpymre0AmUwGQRCeaUvQnhkBcjyDCEmC0QxzM1MolQrkgEqn
      hUSUgsp9mDSKF3cEEAQBuTy30fxcI1cT8c9SXl2LWogTSkKeQYtWqyESiYLG8Nge/f777/PG
      G2/Q29tLWVkZra2tXL9+HUEQSCQSAJSUlDA6OsqZM2cwmUzZm/C4KpgbWF4MissqMRu06Ez5
      2G35aLVaQIbB8Pg6/8DAACaTiXQ6TSgUIhQKAVBVVYVOp0OlUqFSqbDb7bhcLlQqabf63Cs6
      x55DqVQyPz/P4OAg+fn5xONx3G43P//5z9FqtbjdbtxuNwsLC1gsFtxud9ZygsHg41sDPOtz
      v50Qi8X46quvMJlMlJaWUlVV9bSrtOd4Ev0glUrh8XhwOBy7uu+TTz7JKcB29PT0oFAoWFlZ
      QS6X8/rrrz/tKu05HnU/CMeSDxQAX12cj1G3NdZklwogMDk6RjAhoJOnCCWhKF9PIBjAZjWT
      VNlIJ+PUVZY8FwogiiI//vGPSSQSfOc73yE/P3+LTCQSQSaTMTAwwJEjR5DJtom+eAF51P2g
      f2qVf/ejz3d939/+6Wu01mwNHd2lFUiOTqdGl28mFg5QpIOoCK0ttQz3zzDhdXP21eMIgvDM
      2393wnqndjgcXLp0iTfeeGOLzPXr10kmkzQ1NdHd3c3Bgwcly9srljGlcs9sDz0wU0s+/v7D
      nl0qgBBnftGFo0KPkjTBJDjy9fQPzVNR4cBeb2N+fpGayjJEUXymR4De3l7m5uYQBIHjx49T
      VFS0RaapqYkrV66wsLBAe3t71o5RU1PDysoKKpWKhoaGrDITExP09vaSSqVwOBycOXNmi0wi
      keAf/uEfaGxs5NixY3esKTkeF5F4ioHp1V0qgFzLsRPH7nz4esFRUFy28bPNWMZewO/3EwgE
      MBqNBIPBrApw8+ZN0uk0ZrOZwsLCLKXA7OwsCwsLLC8v09zcnNXenJeXh1KpRK1WZ51GAchk
      Mk6dOkVTUxOjo6M0NjY+XANz7Ijnf6yToKKiArVaTUdHBysrK1llzGYzR44cIZVKMTs7m9UK
      lJ+fTzAYRBAE8vLytn3mdusDpVLJ5OQk4+Pj5Ofn31cBpqamKC8v39bGneP+vLAKMD09TUtL
      C1euXEGr1VJeXr5FpqWlBQC1Ws3k5GTWObzf78dsNnP8+HHU6uwZLYLBIOl0mmg0it+f3YIh
      iiLBYJBMJrPtOuHHP/4xRUVFDA8P88d//Mc7bW4OCZ5LBejp6UGr1WI0GikuLs46Lz9x4gRK
      pRKbzUZFRUXWcpaXl+ns7ESlUlFcXJy1Y4qiyKlTp7h+/TpNTU1ZpzhGo5GzZ8/y5ZdfUldX
      l/VZCoWCP/iDP0AURca2SSh8+PBh1Go1arV6T779Z2dnqaysZHZ2loqKCmQyGb29vVRWVm6s
      paxWK7Ozs9saFB4V0q8aMUMsGmFxae9lPvZ6vSSTSS5fvkwmk8kqc/36dd5//30+/1zapObz
      +Th27Bi1tbUEAoGsMi+//DIKhYLjx4+zuLiYVWZycpJf/vKXnDlzhpGRkawygiDwd3/3d3z1
      1Vdcu3ZNsk7j4+NcvHiRZDIp2bZnlbGxMS5evEgwGORnP/sZmUwGv99PMBjkypUrFBUV0dfX
      x5UrVwgGg5Kj5aNEcgSILg/zs8szGM16vluyux22p01TUxPJZJK8vDzJt+SZM2eora1lYWFB
      cmFaWlrK0NAQCwsLHD9+PKvM7OwsLpcLl8vFqVOnssqcPHmSuro6NBoNNTU1WWXkcjm///u/
      j8FgYHpaOht1cXExBoOBUCi050aAnp4ePB4PFy5cQKlUsrS0hEajIRgMotfr8fl8iKKIXq8n
      GAxuOLU9TiQVQF+8n+b6DOVlJY+9Eo+a4eFhBEFAq9Vua3svKyujqKiI/v5+Wltbt1wXBIFA
      ILAxBcrGzMwMSqWSjo4OxsbGOHLkyBaZQCCAWq1GqVSi0Wgk6zQ/P4/BYCAYDBIOhzEatwbw
      Dw4OUlBQwOzs7DOxrxBwLbEYSKEWIohKAyaDBoNKRkJhosCs3yT7gx/8gJmZGaqqqpidnUUU
      RQRBQKPR4HA4WFxcxG63Y7VaWVxcxGq1Pvb6SypAzD3Ntf4JxExK0gT4rFJXV8ft27dxOByS
      mzqXL1/eeMOUlWU33VosFr7xjW/Q39+P1+vNmoS2sbGRWCzG8PCw5CgxPDyMQqEgGo3S2NiY
      tdOmUinm5ubweDzY7XbJ+e/3vvc9Ll++zOHDh5965xeFFKuBJAoxhVKhIBCOIMtEmA+lONJe
      lDUgpqysjHQ6TWlp6cbv1vdF6uvrN363/nM6vTmJjSA82LRPEDKbylovR1IBtNYKaqwjxITN
      m1lD189jaX4Dz2Q3GpMNLUn8WVwhniYDAwPMzc2RTCYlO0pZWRkXL17EarVKvt1XV1e5evUq
      +fn5TE1N8e67726R6e/vJ5VKUVdXx+DgIIcPH94iU1paSklJCUqlkmg0mvVZKpUKjUZDeXn5
      tq7EGo2G119/HY/Hw/z8fFbr1ZNCSKcQMgkWVz3UlxcRj4cxmW1UFslweoM4rGtmYYVCwYWu
      aT7v3v1BI3/ydtumFPRy+YNtrsrlik0vw/VyJBXgwscfEkuCEAxt+n1FRTkhWBuGF1xYCizP
      nCuEwWCgrKyM2tpa0ul0VgVwu90UFhZy+vRppqens9rdrVYr7e3tlJSUMD8/v+VtBNDQ0IDV
      aiUej2M0GrPKBINBuru7qa+vZ2VlhZdffnmLTCaTYXp6murqanw+X9ZyYG0KtLq6Sjwe5+zZ
      s5JyD8NOXSEUaj379u1j351M+eVV0rKr/ggD06vSAhJE4qld37MbJFtaaC8gOH+vH3WG+SUP
      qbxFLKoUWr0Oi179zLlCvPLKK8BaIP3KykrWt2QymeT06dOcP38eu92++Y8eCsHEmimyAsDj
      ohrA7wWjCeobNpXT1dVFKpVCr9dTUrJ19HM4HOTn5+PxeFAoFFk7mEKhoK2tDYvFQk9Pj2Qn
      9Pl8DA8PU1RUhEKheOrToL2OpALsq61i0hnDtGk4VtDY8fVpG+vdqvAZc4UYGBjA6XSSSCR4
      6623ssqcvHNqyNtvv838/D2HVIRD0NOdvXBH8SYF0Ol0HDx4EIPBwOTkZNZb8vLyyGQyOByO
      jeilrEXf8Wffbkf5zJkznDlzhqmpqftumuW4P5IKoJCLRKOP3wz1OHC73QwNDWX171nnq6++
      IhqNolQq0ev1kuZJKdIuF2mXiwKAYBABqAbiQ0MoCwtR3mU4iEQiXLp0iebmZsJh6dS8Fy5c
      oK2tDa9X+lTGnewE78TRL8cakgqQTiZJptMk7kl/uBdwOBwoFArUarXkG/L06dMkEgk0Gg2R
      SGTXz4h8dZHAT3+W9Zr5ve9hfu97G58tFgvvvfcegKSPj0wm44c//OG2MgDvvPMOOp2Oqqoq
      ySnmThz9cqwhqQA6ez1//Pv1UpefaSYmJnj77bf5+OOPSafTm+bTSc8VUt6rG59jrG2HR5yg
      sp5EbXvpkdWjb2mR//XXv8x6rbW4hP/w7e8C8H9e+I1kGf/b65uncJcvX0atVm+MANnWCtXV
      1SiVSvx+/yZzY46tSCpAKuzi3PlOTJYC3njlxBOr0Pq89n6RVWNjYzRIHKXz8ssvc+XKFYqL
      i7eUIyY9ZMKjWe9TGnd+8N/Torm5mZKSEurr6yVHgJGREdLpNA0NDYyOjtLW1vaEa7l3kFaA
      qA9fJMXqSi9Wm432lsd7ztXo6Ci9vb2k02mKioqyxt8KgsCPfvQjGhoamJmZkVSAzs5O1Go1
      165do7Gx8ZkOzNkpC6O/IhZeS+w7ccc9a/rO/6UN30Zv+vpNf/LkSX7xi18QCAT4wQ9+8KSr
      uqeQVIDxWSf5OtAUNT32zg9rx1++9dZbCIIguQi821/m1q1bkmUdOXIEi8VCW1vbnvOXkWJx
      7Fd4l7O32Vp8eJMCXLt2jZdffpmenh6Gh4dpbm7eck9/fz+rq6scPHiQgoKCx1bvZx1JBWja
      v5+MPkx782brSDwSQKY1I0T9hJJQYNaz4PRQVmQhJdeSjke27GQKgkBnZycFBQWSb+3JyUkM
      BgOjo6PYbDaqq6u3yAiCwD//8z9vjAD37rp+sfQRq7E7r8V1HbqzlfFqyVvYddl3fJ83Xnrp
      JW7fvs2bb74pucAPh8OcOnWKsbExwuHwC5vyRXoKlIgzPtLP/Nw033nr6+nI/OhtjA2vEFh0
      Igd8bhlFFi0z09PEFCasZhP37uRfuHCB5uZmrly5QiaTyWrlKCws5NatW3zrW99icHAwa53u
      HgEmJia2XF+NOVmIzGS9N5GRPsz5ecPr9XL06FEUCgU+ny+rTFVVFel0moWFhayOgC8Kkgow
      2HOVBGYMis1mxOJiByHWfFcUQAIwmfSsrARwBp2UOAq3uEI0NDQwMDDASy+9hEajybp9b7fb
      OX78OG63m3A4nFVGFEV+/etfU1hYmDVEcTvXi4wgkE6ntz20TbgjIxMEpFYNoiiS2WE5wjb+
      +qIo7siNYV1mu7atP2+doaEhpqamSKfTHDt2LOtzJiYmmJ6e5t1336Wzs3NTUqkXISvEOpIt
      bT/zLofkWlSbekKGJXcMIbaIVa8hlIAyi46RGQ/1tRWUKM3E/C7kBvsmV4jl5WU0Gg39/f00
      NDRkTXUeCoW4du0azc3NGxtU2Th9+jSlpaXMzc1tkdnOcqSQy1EqlWS22TmV35FhGxmZTIZS
      qdx2B3a9HPk2i+/1cu7Husx2bduo9x3q6uqoqalBFEXi8XjW55w6dYqGhgb0ev2G2fRFRLLV
      QszHL8/fQkzF2Hegg4ONtYCChtZDGzLrzsHN5rUOrQZMWVyG8/PzN7Krmc3mrM+7e7Mok8kg
      imLWP3ppaSmCIBCPxyV95l90+vv7mZubo6SkRHLN5XK5uHbtGvn5+fj9/k2uyC8S0gqQSSFT
      qpErFAjx7OGAOyUajSKKIuPj41kDRrZUSuJtlE6n+ad/+idSqdS2C+oXnfLyctrb21laWsLv
      92eNeCssLOTIkSMbo+mDsh4QY5Al1owi1jzJgJhnEUkFkKkMmLQymg4cpdzxcGayuro6uru7
      KSsrkww/XF1d5cMPP6S6uhq/38/+/fu3yMjlcg4fPozFYpFMZfIi4wqv4gqvoi1RM+QcADn4
      416WnAsUGu0UGr8enWUyGaWlpUQiEfx+P2VlZbt2rLs7ICYtU5KnBn/QmzUg5kEPzJYKZHlU
      5UgqgFyhQiGDq1ev8YPffueBHrpOXl4eZ86cIRwOMzg4mNUubbFYeOeddxgdHeXo0aNZy1lf
      CN68eROLxZJV5kXm4uTn/Kz3g6zXvnfwd/newd/d+DwzM8Ply5dxu928++67D+RVendATInF
      gDcJhTYz1iwBMQ/qtSoVyPKoypEeAZRqiu02RNXDO8Pdvn2bvLw8ampqsr7ZgY2ww7a2Nrq6
      urL61ctkMiYmJpifn8+lDnxIqqqqSCaTdHd3P/AewL0BMXsRSbX8z//x/2K4v4u6Qw/vB+T3
      +1EqlXz55ZeS/vCHDh1CLpdz9erVrGGFsDYFevfdd/nLv/xLzp49+9D1epEZGxvDZDKh1+vp
      7+9/2tV5akiOAP/D//LXjA/1MtV/nerTx6TEdsSBAwewWq0oFIotawAhsEhq6FcAvKQDdMDo
      ByQAeV4JquY7cbhf/LX0A1799w9VvxeRRCLBpUuX+OEPf7htHqLnHekpkExOQ3MbUnaWxblp
      omk5JTYjM0se6ivtJJRmYn43dvvmLBJ9fX1MTk4SCoX4wz/8w01KIASXSHb+56zPUJQd+VoB
      cjxSWltbN3aAX3vttadcm6fHA+9+BIMBFLp8nG4/+6ssTEzMsRhM0dF+YMtO8KlTp6isrGRx
      cXFL4Ph2q/q7d0u3q+hOdktfhJ3gndRpJZzi/EQwq4zdqOTNOvMLtSn2wC0trahhcW4OQaUi
      FIqi0qgoclgJh8KYdRZEUWRo1nNPJoB85r9aSw3YUm2ntcZOeptV/aPcLX0RdoJ3UieFQlpJ
      dlqn54kHbq2YjmMpKsFuMbLg9FBVXXTHG/TrmNeB6VU+uDCQ9f7ffb0l65E1OXI8SR5YAcxW
      O+tODRVla27GGkBjyLkm5Ng75HJq5HihySlAjheanALkeKF5aAUQ0knmFpYRUnESGR4ox06O
      HE+Lh7Z5TU5OU3ifkMgcOZ5VHnoEkCuVmEx6UokUTqcTrS7npJZj7/DQI4CjIH9LSCSGnH3/
      xUBgcmyMQDyDWkygMdlQK0S0CgGFybG3A2J2isFs2xISue4KUZCnpbFya/wvQEGedi30UaWH
      4vbshVvrvz4IzpT9JEcA7sjY1HZJdwAl6rXnKS3IdNlPahSVlrXnKZWQJbQTgPx8yGSQWa2o
      JPyAZVYrmUwGnVJJc1H289WqLNaNtpXmZQ8TXWvamozBUk9Gom1ypYFMJoNVZ2NfYfa8olad
      jUwmgwKRQn32Hep8jXxNZseJxOQY9FpCyQQFFhOzCy6sVh2roRRHymr2RECMTHxMp1hk+yLv
      jfN9VDLZ5B6VjJTcvTwvbduVAghJxsamSMtUmDTgDSUoslsxaRSEBA0Oa95Gef9yYUDSK2A7
      /vZPX9vkMdA/tcq/+5H0yZ67LeexOX7c65eSTCa3HCR9r0w6lUKuVCLbRgYgHPQTiaWwO+wb
      i5h75bJ12HtlUqnUfesEa67DSqVS0k9mJ21LxmIodDqSsRg6nU7iWRlisTR6vWbbsmKxGHq9
      /qFlEtEoCp1+UyfYVeSWXE3DXQFOdx9DslfsII9tH+DeDphORBkZ7Ke3f4hEWsgqI0NgZnKc
      W909+EPRrDKQYHp6CYNh8x/3brlw0MfCwgILCwtEE6msMjutk39hms7eEaampiTbupNyxnq6
      GRgbY2L66wD0rW0T6bp+jfHxKe4e6O+VGx24zcjYOKFoUlLGtTBFT/8Qqx6/pEwmEeBa5y1m
      F5a3qdPzzRPbCPP7AxitRRxsqSMWyZ6lLRrwk1ZoaTt0CDLZQzGXF5ykhSSzs8yGUosAACAA
      SURBVPNIzt3kKnSa++cETSYSaPNstDTVSNYpr8iBVatAozdJl5NM3rdtdS2NlBbYsWx79KcC
      qykPbd7278+iEjtGtZpESnr2arIUYM4zIaalQ1pVWj15eWa0qhd3P/SJtTwVC+Fyu1n1RsmX
      sA4oFAIrzlUWlpyS2SOKyxxotSZ0cpDypjcajTiXlzHmmVEppJu4uupmeWGW4ZFZyTqF3G7k
      d6YsWduViBKOJSGTxBdKSpYTDwYYnJolEpA+/QVSrCwuMzU9x3ZLvXDIx8joBLGY9Ak+4XCE
      +akJvAHpjclYMMzK6hKLy65tnvZ888QUwGC2oVFCMiH9RlKqdRgNOtKp7QLxleQZVOgLi9Bs
      I2XNz2NsfJKMIP2WLCwuoaq8BFuhdNoXjV5NcpuTClUaPRazEbkcVpzSpyAaCh3UlxQiV6ol
      ZUBNTXMdpUUOtpMymx2UVZZRVCg9KlksZoqKi3EUS58OY7TaKHfYcRRnt1S9CDwxBQiEIgjJ
      OIGAdJKtqM9HShTx+bZLxCUyPTVN2O/f9i3pC8dprbeztJI9CD/kXuL6zS784fi2Vg+FNg9H
      gRm/RJJZ4I6ZT9xY3ErVWxAEotGYpEQs6sUfzpAK+pF6tycTcZZXPZTY9czMebLKZNIpJmcW
      KC0txbkwn1UGBJYmxtAVlOBx7f740ueFJ6YAjqICrIX2bU+dNxQ6KCu04nBst5Emx2rOI5HZ
      PpzQoFUxMjLN6upSVkUxFZTwW6+/QsTvIhiW7pTrHVeqcyeiIZacLqKRKIptziIQUglCkRga
      lXxjgb+lrLiAmA7hi8Ql/zDpVBJrvomxWR8VpdmniaKQId+0lu1Ba5TeY1Dl5bM8PkhG9mJF
      gd3NE1MAncGE3V6E2+WUlFGqNdjtdgL+7efJiUiU1RWv5BpgfmqMWBpSMj3HO5qzxveG3ct8
      ev5z1CYbeUapN3eGudkFopEoBlP26YZGb6KhoYGGfftQyaTHpIjXS35JOaIosrK0kFUm32pC
      Zyjg6NE2Sfu03phHKBSlqcrKgsToplRrSaZFjhw9SkWp1MtEjkZMUdXcTsv+Wsl6P+88MdWP
      hvxMzsxTXC59HGk04McfT1JeUSUpszi3hLHIjhGFZOVLK2uYn5slpoBQNIFJv3W1YCwo5uw3
      7ndghoLaO/lHp6emge1TRG53GqO5pIKJsRFM1mIKLVJzdxl+r4u5OSWVNZWSgfkmo46FlQCF
      ZdIjpZhJMj83R56lgAJL9nOHRVFkxblIxmSkrOTFPEnyiY0Ai0sr1NTUkmeQdpaTiQmmphfw
      +aXXAEqFEqVKhUarRcpiLVcoqayupa29LWvnfxCqa7aeWLNbSsqr8LlW0Gik6qTAoFMTS0hb
      dxLREBNTc4hkiMWkjQVWSz6RaJRkUnoBb7AWIETDe/Io3EfFE1MAa76ZZaeTYDj7/BdAa7RQ
      aDFue66XXCFHJoprfj2Po6KPCSGTIhAIYN52HyDNyrQTFCDVbTV6EzW1NdTVVCLfZs8qEAiD
      TEk4kH2hDGtGh2BSJJPcbg30fPPEFCCeSBAKBvH7/RISa1YJra14W6tEIp4gncmQ2UFOnWeH
      DAvzi6zOz5OQHLcANFQ3liPKlGzrVJ5JMjm1gHqbzT5HiQMxHSe/QHpqs5NNvnUSQRfdA2M8
      Hs+xp8cTUwCFSkN+nh6lQnrZoTZbcE5PYJRYcAKUVdVQX19PfX2N5Bz5WUSGjPsNWUHfPIuu
      OFGXS9IMGvSuEkuJpDKg00orQDqVQm80bfsHDjiXKdnXRCp+/yg+jamA5Moo/+n/+RG9w1vP
      Z9urPJFFcCIaIhyJgChHL5nVWY4ylUDUGImFs1s39i4KqurqqKqr29Yt2Gi2U1IUw1hQKLnJ
      t7ziZX/jfoTYKlOLPuqrsrubI4prCreNb4+5uISBoSHMVoky7iIRWmVsOcyhQ23UVaxvnIks
      zs2gz7ejlaUIJSHPoEWrURGJpjBss957VngiCrBmKlx7q0sfbJFCYS7GHJzAUfb8muW2z94m
      IynICa8skyiwZFWCmuoyRkdGQK6ioV76ewqGgogi+Px+SStQ0LmMN5ZBGw1nvX436dAqGO0o
      5RkMG7mfRCy2IsanptColMiBSFgLiRhF1XsjZ/oT94KSNhUmGBueIhSOI9xnk+v5RUEmHiSU
      TrF8l4fm3ai0Rvbv38/+htptF8FarRZkbHuOQl5RETqSO1oDBDJ6DlXmE91kMJITCrhRKDWo
      VCrUKhWpZBRPKIFGKd8IiLlf3tLtWA9kWf/3sAEx95bzDG0B6mlsqUJkzYz5YrJmBSpurcNR
      9uCHeiejIQLhOOlElKAoNZnK0Nc3RGlpMf7Q/UcA90w/s2I5RO5yCRGSBIJRjEYzemWGUALs
      Nht1VRo8viCFe/mEmCePfNvF74vBmhUodj8r0H1QqtXIZaDNK6CqolRCKk48BrFYnFhU2jS9
      zoFT38Tz+Veo77Yq3RMQc/e2XKF1O7+oZ4dnSAFyTIyPI1coiHi8JOtrtvUI3Y5ELEZaAHki
      isvjx27L5jNk4Pip7CfxZCOViHPo+MtYjI9mY/FZIacAzxAKMiQUOkodhocy8epM+ewzZXeU
      e1CERIh/fP+faDnYxpuvPPyxWc8KOQV4hqiuz36A4LOASm+mpq6e/TVlT7sqj5ScAuTYEcmw
      m5m5OVLJBOXl5fe/YY+QU4AcO0KTV0R9iQ1rxcM7BT5LvLjR0Dl2Rcwzh754P76lGVxeKX+u
      vUdOAXLsCLW5FJs2RVl5BbG4tLv2XiOnADl2hEIhw2q14A0lqXiOgmdyCpBjR8R9i/z011+h
      UD6YS8OzSk4BcuwIrbWcxkoLKtWzn/F5N+SsQDl2RNg5yYIvzvjkF6hUKtpbGp52lR4JW0aA
      aNDL4up2WRm+JhLw0NXVtfavp5+7B0fX0rJk1oaspGMsuXzEfUvMue7vnDU+Nrbp8/LSVu9J
      19wYvuyZCh8aj9u11l4xxezsIgABj5ukxAxhanxsd9/HHebGxnlMTdgVU8te8rVQtf/Ac9P5
      IYsCXLp4mUuXLu7oZoPZRkdHBzMzM3S0tT6S+VTcv8z8ThRgfPy+Mq75cfw77D0fffjhzgTv
      sDR8i2lvAu90Px98cgWAy1evoZT4EqbHxx9IAebHnw0FaNq/n4PHzvD2Gy/f9VuBydERRsan
      mRgbYnxqFueKk5B3BXfg/g52zwL3TIEEoikBmypDICly/ZNfceqtd5m5dQFN7THGO89jKy5n
      btHJ977z9pbCprsucHkqisFowixGeKnkbX7y/j+wr7mFmSUPv/3OWQB+8i/vU7+/lYHBQZqb
      m5hZXOW73zrO7RtDnGxa84Ps67pGNC3H6fZz9mQj5y4OU+EopO1YOyogk4jS09PN+PAY3/zB
      79J9u5u3i7/Bh786R1F5OfNLK+yzwnB/D7PhaQqbXyW+2E9arsXtD3Oy0cHFYReOQgtN1cVM
      T8/Q1dNPW1srcjJ8fO5DbHY70bSSCk2AXr8ROy7UZR0c3ldM46FWPusaxCj4ebWxAE9cQKZQ
      kIm4+eirbsyaDIX1R4gvjxARVMwsOHkJ+Mcf/RcOtB9m3unljaP7+Kp7Ck0mRP2R1+i/8jFF
      JRWUVdfjnhnCl5QzM7dEM2sZoYOROOG0Apl/jsZXvk1q5gbLmgrmuq9TUVNBfXMb+fr7JwV+
      EDKijMvnf81UVcNdvkByCgqsuEJJlJkkgXAEWSbCfCjFkfaiPXFAxqb3lX+un0VvEqUswZed
      A7x0rIVrt4aZ8SaoUq4iWhs4crgD3TYrh/J9B/ntt85sfDbb7LR3HMEmF1h/r+vNNg61tWGx
      Wmhra0ct39qooZFRVEolYihAVGlAp5YhU6lQ3ImrVWj0tLW1U1uUR/hOCoWYcxRt+UEOd3Sg
      ka8JNra2cbxtP06Xn5HRMZRKBaGAH6XBjFqWQaVSYbQUUl1d9fUoFlwgY67hyNHjhH1rAfoN
      zQc52dHMinvNH15pKkOILJOWyTjUWsPQ7dvINRam+m4i6Czo860sz82w6Pbz0oljVJWthREW
      FpfT3t6BkiR9N2+js5jIt+YxNzOPOc9EKp1Bo9Uyu+Ll9Mnj1FSUAAJujxe5QolzcZ7Tr7/G
      1a8u0Tvjo6O+GJNJR0aQoVU/vijpTz/7jJaWFuwFd2W1EOLc6h5ApVKiUCiJx2PI1Xoqi/Jx
      eoMbcQBKpfKh4wHW/z1sPMC95Wyq1fW+Wf70j77Pq+/8kIx7HIO9jvBcJyqjA4XJTtg5TSIS
      xB+WHpTt9xwtlEwmSafiuOLJXR2aYDWbqaxv4tiJY8gzIkeOn0AXXWDCLf1sjaUE38I4sZCf
      YHTrZo3ZbKa+qZUTxzrIiAqOnzhBdGEEdxyETIbk+hvCaCfhniUZD5PZxk6gIEkGNer8Siau
      /CuVzQdxVFSjkCtobWpmX301pBOEYklWXe4t91dUlyBXmGhqPkB9dTGlVfUcbmvk8qWrKIQU
      /kiC1VUXCBFWfRmqy4sREVFoLahTLlCbkCcT1B88QmOZjqvdjy9Y3VFWSU1NDZVlJV//Uq7l
      9Tdfo7LUQXlVLceOdlBTWYW9tBKHNXsY5rOG4m/+5m/+Zv1DvtVG3p2DJwoLC9DrDdisBdQ2
      NKBSqSl35DPj9JGMBKmvr98opLCwEIPBgNZkwWwyoFbIsFhtGPR6hvt6SApyTp46vZGq3Ga1
      odfr7/k/D6vNQp6lAIvZRFNTI3PjQ6jzCrAX2FhdmEJpraC+ZO0NZLWt3WuyWDEZ9NhtNgwm
      CyUFRhbcQeLhAAc7jmEy6tFo9VjzTbS2NDI+NEhegYMCm5WFqTGsFY2UWA1UlBYxMjmPw14A
      MhVV5XZGJ+Y4+dJx9Hl32qXRYbOY0WvXPPULLPkUV9Sg06iwlVRRXVaILq8AqybN1KKHmqpy
      6uvrGB8ZZv+BQ+SbjBTYrBttLqqoQ5MOsugJU1VegjwTZ3xmhZdOHqW+oY7JkWHqWg9iNduw
      GRWEMyqa99Wi1+sJOReoPXyaPIOOeGCVlYiSowfrt0268jCsTHQzOLlISNRT4dgut9FmRFFE
      LpczML3KwPTuk/C+1l5NkeXrV+eqL8Ln3dOPrJxdnBEmcPvWTZIZkcqGFoosxvvfwpq1pr7h
      SVkN0nTf6CIliNQ2HtgTpxQ+CJGAh4kFNwebn1zg+c1PP2DaD3kVhzh7fOdu28/RGWFyDh0+
      tusHP7nOD6Ck/eju67jXMJhtHDTfP5XJo6Tt9NvsS6ZR6CxP9LmPm9xGWI4dIZMJXLp4BQGR
      A4dPUln8ZBXwcbFpESymY5z/7DxLrs2HQYSXR+mf9TLa3Yn3IfKoemf7GV1eswXN9l9jeRtz
      fyzko6uri48//piurl7mR7uZfYiHX+vs3PU9HuccN27cYHLu6022TDLKjevXud7ZiT+8daHt
      8Ujn4ryXzs5ru67T0yIZWMZSfRCz2YxrYfJpV+eRsUkBhm9cYNq1ZmUJ+930DYwgiJCOhwlG
      koR9XpICCOkEfb23CcWShHxuYmmRsN+NJxBBTMXwBCLEwwF6+wdJ3zmiaH56nMHBIcLxNUtL
      JOhlcXGBsel5QFizdgAe19oOq85koaOjg3A0TEfHQdJhHx6vl97+IQQRXK41eZ/Hg8Bax1ue
      nyaWEhgd7GNuae16NOil53YfzlU3opBhZKCPmQUnYjrOqmctC7XL7UIUUvTf7sF516mKlzq7
      OXL0KMP9XRu/+/Kz8zS2H+XYsaPo1XLiYT/d3d0EwnFcS3N88MG/0D88QcDjIilAOhYiEEni
      8XgIelfwBCLEwn56bveytOJCFDOMDfUzNbcEQpLVOy8fl8uFKKQZ7LvNkmtnO/OPE7W1hnzR
      Q0XtPvY1Nj3t6jwyNilATU0NNfuacRhFPrvSR0NVER9/9sWWm37z4UfU7W/ii09+QzqyTOft
      KW51d3Pzxg3Ge67hSWT49MJl9tWU8vGnn9PX+SVhmYmKks2nw2RkavRJJ1d7Z/nyyy8QgctX
      r0ruKK+6A9RaMnzRPcXFi2u71d3XO0kCP3n//+VG3xjD1z5DsNWgU4EQ9/PRFzc50NIIokg8
      EqKkZh+u0ZssRuV8eeEzQODqlWt88cnHlO9rRiF8vVlyoNLMf/ov71PV0ILLtfZmb2lp4IvP
      PmV6yYVarSIcS3Lw4AE+P/8phSUVVFVX09pYx0DnRbxJCDvHGJj1cuGjn/Obz68ipiOc+/QK
      ra3NyBFJRsPYK+qJzPUy4cnw5RefASJXr17l2mcfY6tpRMXT98AUMwlWXC6uXevEZNyZAWQv
      kHUNEF6dpaByP1qjBTEdBe6x6So16DVqCnUqREczoZ6PMOeZUIlpprwpvnEwxgWnj8GRSSwW
      CwvuZb553IFzaPPQabfbKcvT0/vxLQ7XFXGjtxedpUKyshVVlRi1y8Rnt6bzLqraz3fe/gbJ
      iJ/OW92syNW0lCgo3d+GQqlCrVQwMzGGOy4QWHFiiAqUWzT09dygqP4wzUXQc/MmCq2ewsIC
      QKRrwsUbR6rpunqJU299h0KgqHI/367cx1jvFS47AyTd45hsRbj92+czVZkK+O673yW6NEBB
      dQtKhRK1UsnC1DjzwTSp1RWspQnqikz09nZhqWjlYLWRW903kKvX6/T0yKSTxBMpCgq3O75q
      75H1ZZtX1khg6hY3Oq9hsW8NgLYYVFy/cRMvWqxKObK4C6WxmCK9HE9CjkxTSLldiyCKWKwW
      6ssLOf/VFYbGvz5sWqbUMDHYzYVPv+TA0SPUtJ3i85//lOPHD+2o4laTllvdPczMrx25tH5S
      eyAQRKvX4XetYqpoZKHvMj09PYTjaeLxKMjkyO6kaT5+5gw/+eXnHGkqIRCMoNNpcK2u5y6V
      oVPJiKTVyBWgvHPS2PzUCJ3Xb+IJxjGbTcRiMeQyOet5w8VkjKGxaYrLSrh9vZOB0clN9dMX
      1eGbuElPTw+BaIJYPAZ3We/bTp3h5z/9iOOHaggEQ+h1urvq9PQ49+tzhFcmsZXvjZyfO2UX
      +wCPFzGT5DeffcU3z775xJ6Zjgf4/Eo/v/X6qSf2zPuRSUb47KubnH3zzNOuyiYWZ8bp7e1B
      zKvk7Vd3bmp+jvYBHi8Lc3O8+vprT/SZc/MrvPbqS0/0mfdjbm6J11975WlXYwulVfWUVtXf
      X3CP8cwoQHl13RN/Zk39s+fXXl33/HWyZ5lcSGSOF5rHNgIIgvDALrA59goCk6NjBBMCOvna
      CTGFNjM6hYDC5NgTvliPTQGekbV1jseKHJ1OjS7fTCwcoEgH0WQUVyjFkbKaPREQ88ysAXLs
      QYQ484suHBV6lKQJJqHAaqW8UIHTG9yICcgdkJHj+USu5diJdZOoY9Ol3QQ/PU1yCiBBPB7n
      7//+7/nzP/9zfvrTn2I2m3E4HPT19fF7v/d7zM/P09PTw6lTp+jr60On0xGPx0mlUpw9e/Zp
      Vz/HDsmtUiXQarU0NzeTSqWoqanBaDRisViorq5GqVRSXV2N1WrFarWSyWRoaWlBr9ezb9/X
      O6VOp5Pp6WlisRi3b98G1tZGN27cwOPxsLS0xNLSEn6/n+Hh4afV1Bea3AggQTAYZGZmhpKS
      EtxuN/n5+XR3d2O1WnG73Xi9XmZmZhBFEYVCwcrKCtPT01gsXweMDAwMkE6nGR8fp7a2luHh
      4TuHfNdz5cqVTSc4GgwGvF4vVuvOww23IxKJcOXKFQ4dOsTIyAj5+fkcOHCAmZkZZmZmeOml
      l7hy5Qpnzpyhs7MTu91OTU3NI3n2XuK5VoClpSX6+vqoqqrC6XRit9tpamrixo0bxGIxHA4H
      MzMz1NTUcOPGDX7nd35nw2cnLy+PP/zDPwSg4Z6otnA4TENDw5bf3/vZZrPR2dnJG2+8wfDw
      MCUlJSiVSqanpzEajRuLMpvNxs2bNzd1wEQiwb/+67+i0+koLi7mypUr/MVf/AWjo6NMTU1h
      MBgIhUIYDAZ8vjUX6vfee2/j/v7+fo4fP87FixeJRCJEIhEOHDjAwsIC5eXlzMzMIAgCLpeL
      kZERTC/oAYW7VoCFqWHMZY3EPAuEEuCw6JhZ8lBfaSehNBPzu7HbC+9f0BPA5/OhVCoZGBjA
      4/GQyWRoampCpVLhdDrRarXEYjHi8Tg1NTVZTbcjF3p3/LyC6iIKar5eDCqVSo4dO4ZWq8Vg
      MFBQUMD8/Dw+nw+Hw0EqldqQq6ur23SGslwuR6vV4vP5OHv2LLFYDIVCgc/n41vf+hYfffQR
      SqUSr9eL0WhkYWFhU10OHTrE5cuXkclkWCwWEom14J14PI7P56OmpobFxUVUKhV1dXU4nU6a
      m5t39f0+D+xaAbSyJOEkRKMJFMCCO8H+KgsTE3MsBlN0tB9AEIQN++/DcvnyZQoLC8lkMrhc
      Ll555RVSqRSXL1+mtbWV/v5+SkpKCAQCKJVK2tvbN+4tKytjaWmJ6upqkskkkUiE1dVVFAoF
      sVgMl8uF0WjE4/EwODiISqXi0KHN3qijn+9cAYQzreRXfO223NjYuPFzcXFx1p/Xqa6u3mSn
      lslkmEwmHA4Ho6OjHDp0iLGxMcrKyvjVr35Fa2srk5OTNDY2Eg6HMRqNm+4XRRGdTscrr7yy
      MQW6desWR48eZXZ2lkQiQSaTwefzYbPZsNlsG/ffbS583tm9Ami1pIBUKrXmICyTEQpFUWlU
      FDmshENhzDrLxtz4YYhEImg0Gqanpzl79iyfffYZMpmMq1evIpPJEEURi8WC3+/H5XJtTDHW
      MZvNvPnmmndpR0cHAPPz8xw4cIADBw5setaZM2ceqq7ARhKodRKuz0i4P9vx/fqK/x6loVay
      TiUlJRiNRiorKwG2nbMrlUpeemnN0a+1tRVg42yv9c/ZFPFFY5cKkGElCLLkIpWlDkJJKDDr
      WXB6qKouIiXXko5vDvQ9d+4cwWCQ2tpanE4nhw8fxmKxcO7cOYqKilAqlfT391NTU4PX6+Wt
      t97CbDYDawtDhUJBMBjk6tWrnDhxAoVCgV6vp6amht7eXk6cOMH58+c5ceIEXV1dW2ocHxra
      9Lkwy+/Wkev1qKuqdveVbIOQXCEd6t+xvJiJbPp8a3EeX2znOTbfrNvsq//D99/d8b2NRS38
      1Tf+dsfyzwu7VAAFtXeZ+dbPAq8oW3uTaACNYXO4nMFgYGlpiWg0ytmzZ+nr6yOdTnPixAnm
      5uY4cODAxlx3PYnSpgoqlbzzzjtMTk7S19eHyWTi2LFjdHd388orr9Dd3c3p06fx+/0bb7a7
      Wf33O/+japoaKfrrv9qx/OOma3GeKe/Og+zvVYAc9+exT/YKCgoQRZHS0lI+/fTTjQ5/48YN
      ysvLmZqaoq2tjc7OTsxmM5nMZl+P9Tn9vXPzw4fXTjk/ceLExnNy5Ngtj10B7n4rNzQ0EA6H
      MRgMvPPOO5vkTp48mfX+6E/+iMzCzR0/z/Q/7j7qKMeLy2NXgP6p3eWEvDeHY44cj5PHrgAD
      06u7igVtqbbnFGAPEY8EkGnNRLxOPKEE5SVFaDUqItEUBoP2/gU8ZXK+QDkeivnR23hjMDMz
      g8lkYmXFyfT4GLI7O+rPOjkFyPFQFBev7Xy3HT6Gb2WJRDKKJ5RAo5RvBMSk0+mHDohZ//ew
      ATH3lvPibPnleAxkWHLHEGKLZBRxFDojdls+dVUaPL4ghc9zQMzk6BChJJQW5OF0eakoLSSl
      sRL2eqiqKLl/ATmeAxQ0tGZPZFZo1WX9/bPGAytAPB4nnoRgVEtrUznD/TNMeGd569Xjm3yB
      djv03Ru7uVt/orvv3S2iKD7U/evD/d2fd3f/s9H2nC8QEHNN0Dm4ypzbw799750t19OZDPIM
      IMvQPzCJzWamtbiKqdkFGqrLNnyBdjv03TtUJWW7O/TnYf54Mpnsoe6/1xco9ZBtl+2htu9V
      JFusMRfh8o1xur0l6/WD7Uck7ny+ThDJ8Xwj+YpKBJy4QjF8u/BFyZFjryGpAFprBTVWNTHh
      8Z09myPH00ZyCnTh4w+JJUEIbp/3PkeOvYzkCFBoz3lX5nj+kVSAG9c60RrzsFnyn2R9cuR4
      okgqwJ/+xf+EOhVkbHL2SdYnR44niqQC/Mf/439ndNFPcVFuKpTj+UVyEfw//9V/eJL1yJHj
      qSCpAKmwi3PnOzFZCnjjlRNbrk+MDoHaiEZM4A8GsFnNJFU20sk4dZU5X6AcewNpBYj68EVS
      rK70YrXZaG/ZnPXM5/Uhk0UxFFppbam94wvk5mzOF2jT593d/2y0fTcuEesBMULUTygJeQbt
      ngqIkWzp+KyTfB1oipq2dH6Asqoa1EolGVHEH0hRWltF2X4DXq+fogJLzheIF8MXaH70NsaG
      VwgsOpEDkbAWEjGKqvdGhgrJFjft309GH6a9OXvyJamkSibd3ogEyvFoKC52EAJUKhUKIJmM
      EgwlqbgrIGZPnhCTEWXMT/Tjca/wZpY1QI4cdwfEWPUaQgmw22zPR0DMp599RlnVPpRao5RI
      jheezQEx9ruu7PmAGEdZJTU1NcjkL56PeI4XB8neffTYs3WCeo4cjwPpiLDVMX765SipsIuG
      lnZOHc0e+5kjx15GcmWiNhWSr1dQXFGLI5eoKsdzirQVKCOg0agx5Zupq69/knXKkeOJITkC
      iIAoCGxnvvV4PAjpJP9/e2f7kzYUxeFHqBasXQUBGW6Ic2ZOjYkuS/bRf2DJtmRb9mX/77Zk
      2Ze963AMkQlN0AIKpbIPZg6mOOQls+l5EkKay+/2nKQnveGce24mu8uxfUTNOTnUQhDcQsc3
      QKFQpGaZ1P3nH55W3M3wNVciMqESDQXYTqc59OuEDR1NVkyCS+gYAK9fv2LErjC3sHTueCab
      o2pVqWtJdH2cnz/3yR/kScSjUgvUcn05/dXw3UvtUTp6+uT5S5xGjY9f0oBxZnz9/gOKpklQ
      gU/bJgvzSRKKwWGpgE+LSS0Q3qgFcjsXeuxXVFaWFjuOR6amAFg2Tr7HBW2QSQAAAkFJREFU
      AD0W6/h7QbhqSHdowdNIAAiexnuLPmEo7GTSVBs+omEDPeindORnyhj/32b9EwkAYSAcHOzj
      D05iFnJslRusra26Yj+ALIGEgTCTvIVzWIaxccKaQqXmnP4LqChK3/sBfn/63Q/w9zzyBhAG
      QrNxRGg6waQ+TiCgUqlUQb36GVEJAGEgGOFYW7ZIc0k5QM9LoPzOdz59/UZl3+T9xy/UqyWs
      epO9vcIg7ROEodLzGyB2/Sbm+w/kik0WUyE2NzPsHNjcW1+VUoiW68vpr4bvXsoI9+zp9uZn
      Ugt3yH3/hmVVGVVHmY6HKVtljKC0RQEphXADPXusBlSyP35we36OnbxJam4a2xegcVQepH2C
      MFR6DoCZ5J9+QckbJz2CVEDVpIuE4B4kDyB4GgkAwdNIAAieRgJA8DR9B4AkwgSAvd0sW9tZ
      SqUSTs3C3K/+b5O6ou8AyBdLLKZCpLcyvHnzFlWXQ/W8iFWt4Xdq7BVyvPuQJuSCUmgYQAAc
      NxotibBpypbkAbyIbdvUbZvRlmpQN9B36m9+fo6sJMI8z+xM/M8JMV6qBvUpY2cSYb9rgQCW
      Zqd4tnH3jK7ZbJ6b6o9cC+A4zum4b/EhI4n1rvWO47SNTzx+1LVWiUbb7g2wsLFygffthGbb
      9T5tmbH4i67vjxJp06/FE6SMUNf6v21/tPK0a210Inaq76UkIqhP0toQXdO00w0x0Pk5uMgm
      OPs8RK4FBjrPSPOyFVdd4jgnGyLcqBfbe9cPa75hzfMLbwJNgAIia5gAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Tripsbyhour' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAUuklEQVR4nO3dWWxj7V3H8e853uLEcRw7+zaTZPbMdNpO6cL78qqvoFTqBaiVUCsEqFwg
      cQEIRKnKBeKiQiyCXrRVL1pVQkiotKhwQcUmoFWXl1e8W2cyWzLZnDhx4i3xvpyNiyyTmdcn
      iT0TJ5nz/0ijied55pznPD4/2zn++7FiWZaFEA6lnvQAhDhJEgDhaBIA0ZRKPs2PfvxjFmMJ
      UqnkuzuYVVKZLOlUEtPQuXP3XusHeQTukx6AOJvW5qYpu3ro7/bxja9/k1/59KdZWpzDF4iw
      vjhLV5efN+6l8WspXv3kp8jni/z3v3+Pcs2is8NF39hl1leX6Ru+wNTF0RM7DgmAaMrw1Q/h
      T8T4jx+8wdj4OL5amkS2irY+i6W08YmPvJ9UeR6P1sH5kQHuT99FNTTCbR2MjHbyg9deJ9A3
      wIBinuhxKHIVSDQjl9ngwewiwxOXKadX8Hd2sRpPE+7uwuXyMjE+xNv/9zb9vd2UlDZUS0ex
      DNpcHgJBL0Xdw9KjGc5dvMpQb/eJHcexBsA0TVRVfs0Qp9exnp3y5CJOO3l4Fo4mARCOJgEQ
      jiYBEI4mARCO1vAbYdtXdhTg4Cs8iqI0OSQhWqehABi1Mq+//r/c/PCrZFbniScyDPZFSGfz
      dPcNY1WzlAoVLk9N4ZbzX5wBDQXA5fVzbmQQUAiHu8lXLaqaxc2b15mfjxFfvMfo9VdwKWAY
      BoZhyHsBx+R7v/pR9ErJtv0Tf/ufeIOhFo7obGooALVynuhyjLzSSWZ5ju7+YYLtbm7fvktk
      YJSxS++hsrmG1teF1+UCwLXzt3i+tELuwACoqorbLaVeh2lohrz+Tl766Me2b4yP7P17/96P
      kec0LCFaQ64CCUeTAAhHkwAIR5MACEeTAAhHkwAIR5MACEeTAAhHkwAIR5MACEdruBr0rbff
      5vqtl9hamyenqQyGfCzGEvSPjGNW81RKZc5NXsCtSjmoOP0argYd6gtjWjA4NkFu9iGpTYMb
      N6+zMB9jfWmakWsvSTXoKWAYBrqun/QwTr3GngG0KltbWZRgHkOtkd3KMdQbJhpdQfG0MTx+
      iWI6jjHQjVuqQU+Uy+WSatAjaHiG+kcncXsAU2FiYpJQdzfFfJ5gqAtD70HBQl78iLOisZdA
      Hh+9vb3v+vdQ9/YHL1SP5/mMSogWkatAwtEkAMLRJADC0SQAwtEkAMLRJADC0SQAwtEkAMLR
      JADC0RoKgGVo3L39DhXdYmVxjvszcxRzGe7cuUMmXyaZTLIWW0E3pQBOnA0NlUJYFgTaveiG
      TtlwE/JbLCxvcHXqKkuLqyRiMwxM3JRq0FNAqkGPpqEAqG4PbpcKqOi1KlULPCqUSiVMRaVv
      cIhSIQ/KwF4VqFSDngypBj2ahhfHzZUNtESCkYFuclWFsd4ulpZWGB8fR6uEwTTQDBOvS369
      EKdfw4vjXpu6vnc7uPP35IXJ7faOwHMbmBCtIA/TwtEkAMLRJADC0SQAwtEkAMLRJADC0SQA
      wtEkAMLRJADC0ZoMgMXGapTF5TW0aomHDx9Squpkc1k20ympBhVnRlPVUpZRI13Q8VoFZuey
      nJ8YY2VlFa2YwN3eSygcwbIsLMvCNM3nPWZxBDL3R9NUABTVS1ebwuLyJqFwBLfbjYJFpVwi
      ENh+UtkNgJRDnwyZ+6Nprl5W2Z7gobFxhns7eTTziLHJS/REglhaDc208LpULMuScugToqqq
      zP0RNFkwrjByfnLv1vXrOxWi/vBzGJIQrSNXgYSjSQCEo0kAhKNJAISjSQCEo0kAhKNJAISj
      SQCEo0kAhKM1HYD8Vpp4Io1l6sRWYhiWRaVSoVIqYkgNijgjmiuFsAwWllbxeqCQSdLVE2Zu
      cRW3kaOsuZm6evE5D1OI49FkAEBBp1SGtg4f4XA32a1V1laWGLr4AUAWxz1psjju0TRdDerz
      erFUGOwNcW/6PkPnJukMvA+tWkQze/DK4rgnShbHPZomA+Di8rXHa4SGe/p3fpK1QcXZIleB
      hKNJAISjSQCEo0kAhKNJAISjSQCEo0kAhKNJAISjSQCEozVZC2RR0zQsC7xeD7qm4/a49+p+
      FEVBUZTnOU4hjkWTxSIWifgqC9EY50eHyJXKdHT1gZalVKhy5foUUgEkzoIma4FUhkeGKVYt
      NN3k2rUrzM/HiC/eZ/T6K6hINehJk2rQo2m6XHA9tsLw+XFqmVVu375Lz+AY5y/fpJKNo/V1
      STVoE2r5LEatatvuCQRx+9qOtC2pBj2apmdo8NzO2qADo4QHRnf+VdYGfRavf+lPiP7gX23b
      f/YLf8Xkxz/VwhG9+GwDMDs7w8byLJHx93NtcriVYxKiZWwvg64tPsDdNUitVGzleIRoKdsA
      hEJhEmur9A4OtnI8QrSUbQC2imWuT13mrdd+RKkqVxPEi6luADKpDVRT5403f0qgqwtDvvRO
      vKDq/hJsmibBcD+hvlEGRs7T6fe0elxCtETdZ4BI7wDp9VXcPj9ej1xLFi+uumf3gwd3+flP
      /HKrxyJEy9UNQDw6SzQaA+DSjVtMjvS1dFBCtErdAHzw5Y/R2Rk88D8aeo1CqUqws4N8rkAg
      2IlpGGCZqG4PqlSDijOgbgD8bW3E1+N4vV4i4ci7O1gmMw8eEOjupZhJUDIhmS2i6HlKJZ1r
      U1ePe9ziiLKzd7jzN39o2955/jLv/eOvtnBEp0vdACTiK/zwtdcxdINXP/5LDPWGnuxgGWRz
      JWrVOLR1cGPqAgvzMeKLDxmdehkFqQZthmWZB7abpnnkCs/dalCtXKK0umjbz90ecHTVaN0A
      eL1efF4fusug7gsZ1U1POECxajEYCTB9+y59I+NMXHsf1WISzQxJNWgTFOXgD+ipqnrkCs/d
      alDVddiH/hRHV43WPfKegVE++alRTNNEVetNoMLFqzf2bvUPjuz81HUMQxTi+Bz48FD/5Bfi
      xSFnuHA0CYBwNAmAcDQJgHA0CYBwNAmAcDQJgHA0CYBwNAmAcLSmi0Cmf/omno4wkQ43sUSG
      noFRzGqOcqnChctXcKtSDi1Ov6YXxw10BMjkcphGOzdvXt9ZG/QOo9dfwaVINWgzjqMa1DQO
      3iZYUg3aMMtCUV2Yhk7A52J6+j7ByACjF6YopWJofVIN2gypBm29pleHHhufZHQcVEVheK9q
      tPf5jk6IY9Z09PdXisqjvDir5CqQcDQJgHA0CYBwNAmAcDQJgHA0CYBwNAmAcDQJgHA0574H
      Llpi/fX/Yvbvv2Lb3nfr57jy2c8BcO+bf0nyndds+175jd9n4IOvNrT/wtoyc9/7B9v2pgNQ
      yib54Vsz3Lo0TCy1RXffCFY1S6lQ4fLUlFSDCgC03Ba5+Xu27YGR8b2fS/EVsnP2fbV8tuH9
      lxJxHn7767btTQXAMnUePIoSCnhJ5TVu3ryxUw16T6pBn8GLWA1qmAfv3zIf79885Fwxd46p
      sf0bB7Y3+Qygcv7cGHOLS4Q6PNy+fZfIwChjl25Q2VyTb4pv0otYDeo6ZHVBRX28/8OW1Fd3
      jgng9te+iKlrtn1v/NYXcPvbcakHn39NHbmiqkR6+4j0bn9xxuDYbkudpdSFOAaL//ZtjGrF
      tv3aZ/8At7/90O3IL8Fiz9zf/TXRf/qGbfv4Z36Hic/8bgtHdPwkAGKPZZlYB7xmtg55PX8W
      SQBEUzJ3XkcvF2zbu6d+Bk/g9C+XLwEQTXnw9S9SWJqxbf/wl75L16WbLRxRc+SdYOFoEgDh
      aBIA4WgSAOFoEgDhaBIA4WhNL424vDhPaqvA6GAvq+tJ+kfHMSt5quUyYxMXpBpUnAlNBkCh
      K9hJbCNDOlvixs3rLMzHWF+aZuTaS1IN2qSTrga1zIPvK8vaVzl6yP26u/+TqgZ9vP/jqAa1
      TKq6RZfPA5bBcnQFxdPG8Pgliuk45kD3XhWo06tBo//zL7z15T+1bR95+Rf54Of+Ajj5alDl
      kGdtRdlXOXpI5ebu/o+rGvQwj/d/DNWgoNDu9zM8cYGuYAdbW1m6QiEMvQcFecTfz9RqaIWc
      bbteKbVwNOJpTS6OqxAIPq7z6O7uBkD1eJ7LoIRoFbkKJBxNAiAcTQIgHE0CIBxNAiAcTQIg
      HE0CIBxNAiAcTQIgHK3patCVpXm2ihrnR/pZjMYYHb+IXi2gVSr0DY1INag4E5peFWJ4bIL8
      /XvE1pJcnbrK0uIqidgMAxM3pRp0H7OBakipBj0r1aDA/Mx9xi5cIR1boFQqYSoqfYNDlAp5
      UAakGnSH2kA1pFSDnpVqUMvC5fawsrTExMQ5YsurjJ8fR6uGwTTQDBPvoRMvxMlrshpUZeLi
      5b2bkxcmAfC6A89lUEK0ijxMC0eTAAhHkwAIR5MACEeTAAhHkwAIR5MACEeTAAhHkwAIR2s6
      AMXcJhupTfRqiZmHDynVdHK5LJvpFPohRVVCnBZNF8NpukkmlaC86WLk3Cgry6voxQSu9l5C
      4QiWZWFZ1qHVkC+6Qx8KrMcVo9YhvRuZz92+h1fj7tvmER63Hvc92lgbOaZDR9rM8R+y1aYD
      0NUdZj2ZwAI8Hg8KFuVyiUBA3RvA7p8XjVbI8pPP/5ptu7vNz8tf+s72jcNOFHg8R4efq0ee
      z0bmf7fPUU7W49z/YRNwHPtv/gMxi/MUC2WGLk4w+2CGscnL9ESCWFoNzbTwulQsy3ohy6F1
      y6IYnbVtd/k79o5bOaTEV1E4el9VOfJ8qqqKy+U6tBwblAbGum//h5Uu7+7/kBLv/dtUONo2
      j+Ko+296cdyxiQuM7dy6fiO0/UN7+F09i/dfQ1tftN2S//KH8A1faG4YQjyjY/+e4NyPvkvu
      J/9s297/m38mARAnRi6DCkeTAAhHkwAIRzv23wEaYVSKB142VNvaD/3guBCNOFUBmPm9n8Mo
      bNm2X/nKT/BEBls4IvGie+aHU8s0SCaSmJZFrVajVqkcur6LEKfFMz8DrEUXML1tzEfXUPU8
      5Spcu3b58P/4DLRchuw737dtd3d0EfrALzS83eQb30fLbdq2R269gi/U0/B2xen1zAGo6Arn
      zw2wsLDKWnSO4csfPnSBo2dV3Vhm6Wuft233j13ZC4Bl6FjGAauJqW7UncWWFr/1ZXJz07Zd
      b/35tyQAL5hnDkBfOMD09H0GR8fp6Hg/tfIWNSN8ahbGWvnHr7Lyna/Ytg9/8rc5/+t/1MIR
      idPkmQPQGRngvZGBnVvBZ92cEC2lWMdQrrlbimqaJlY5j1UtP9G2v+hK7QiCpw1VVdE2E7Bv
      gdin+7pDvVgoKKaBlk3v3yPsK6RS3G48XT3b+6+U0MuF/YN7opDL5e/A5d9e0U7LZjB1zXa7
      3q4wuNwoQCWTePqg97arKAptkf7tOahVqeWzttt0+9rwBkOYpolWyGFUK7bH7+3sQvX6UFWV
      cmrjiUrHp/v6I33btZWGTi2b2bd364miM9XtwRuKbI+1UkQvFe3H2h7A5e8AoJZNY+1bqPbp
      7XpDEVBdWLUqWuHx8b/r/ve14e3cPn69kMOoPT7+p+8rb2cXiufx8e+vHn16u23h7eO3DJ3q
      1uPjf9e5chwB2GWa5hGqEbf7KYpyaDViI9tspO/uFJzk/i3LOvJcPe/9N9L3OO6rkzz+Y32h
      vn/ntXKBjdQmlmWyvrb6xKfGVFV9YkKzmSS5YgXLMsnnC7bb3N2WZlgUshk2Upu2fQ2twtp6
      Ess0WF1ZJl+q7rU9fYcWc5tkstv7zWe30PYtMf70hKY24pRrOtlMksXoCsZTx7U3VlNnbS2O
      aW2PNZl5/KioKMoTfaulPIn0FsXcJouLi6Q3c7b730onyJeq1MpFYmsbT1TUPz1X8bU1dNMi
      m0mylS8+sZ2n++7Oe2J9jYpmPNFv/1zptQqlSg3Lssjn87bbBHbaLTLJjb35rXf8lmmQL5Qw
      tCrL0SjVp/a/X61coKpv3z9bm5vs/7hM/f1DamON5dX17T60hMX8whLlzQ3mZ2fRXF4ePapf
      Im1oJVbXt1hZnGczneDB3LztVjOrS2guH48eLVCuaqRiK9Rs+s7PzeMyckTjW3QEg8w/mrPp
      qbMUjbO+vERNK/PTt98hV6q/1VI6zlbVYmFunqVoFL+/HbsVxqNzc7hdJnPzUR4+Wjrgk00W
      8wvLFFJxNLWNni4/6a1C3Z56NU88lWd5YZ7ZR3OotU1iyWLdvsmVRQyXm0cz91hez7E8N4fd
      tbHNVIKHcwsUEivkDRfzB9wHa4sPWd7YpJBNM/3wkW2/QjbNnQczmIaOgYtYdBG7GUisr7EQ
      XULXdYLBDttzxTINog/fIZ7VKOczvPnmHey+DaBWyvHW7bsALEWjtLf7gRYGwO1pozsYJJev
      0tPbg1upf/imWaO9I0S710uwZ4BOv9d2q+WKQU9vBI9qoldLdPT0YddbcXnp6evBrOlsJeO4
      fT6bnjpeXydBn487d+9gKRbJdP13p8vlGuGeHrxulcnJC2zGV8hW6p9WhuKipzdCLZ9BdfvZ
      WIth1H3xaeLx+gl1BjBQ2EhuMX6u/rvful6jI9CN3+vB7VZJbhVp89RPYLVqbs+7y4PbLJHd
      ytueLOHeAQJ+D8Vijd6+Hrwu+5c7QyOjuFSFzlAP3Z1+236BrgjhYAeK6qKYTdE3NGp78vUP
      jeJ1KXi9Pjbia7S119+uoroYGRkC4O70XSyjSsbmwcLbHqS/JwRYXLh4idj8AjVaFgCFNo/F
      UmKTixdHmZ2+Q3soUren29NJOb9GVfWwGY+RTqXZzJXq9u0d7GF2+g7+rhCx2DqVYtH2Tg12
      eLh7b4lQyEepZuG2/WSRD8XMsWnArfd9iPdMXWOo/90f9AHo7usl9ugBbn+AdDJJFRd+T/3t
      RkIdTE/PMDhxiTaXhqet3WbyVXxunZV0nk6fgi8QwmPztOLzd1HYjKG7vLR5vbhcHlw2fXsH
      wsxMT9PR3U+bz03f2Ch2DwGJtRXSqTTuYJCFe3fxdnTZ9DSJRldIra+S2FgnnUqTzOTq9sym
      N0in0qytrbKRylMs5G0+AGmxGl0gnUqzkUyh47L9kg3TqLG0kiAZX+HWR15h6tpVIqH6S/SX
      chnSqTSx9Q0S8Q3UNj9u4P8BtSyXbQvd0uEAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Tripsbymonths' width='192'>
      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
      /wemW0SlgHpbSAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Tripsbyseasons' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
